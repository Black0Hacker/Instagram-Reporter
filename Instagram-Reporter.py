import base64
x=("import base64
x=("aW1wb3J0IGJhc2U2NAp4PSgiYVcxd2IzSjBJR0poYzJVMk5BcDRQU2dpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0RSUVUyZHBXVlpqZUdReVNYcFRha0pLVWpCd2IxbDZTbFpOYXpWQ1kwUlNVVlV5WkhCWFZscHFaVWRSZVZOWWNGUmhhMHBMVldwQ2QySXhiRFpUYkZwT1lYcFdRMWt3VWxOVlZsVjVXa2hDV0Zac2NIRmFWV1JTWlZaT1dXTkdVbWhoTUhCTVZsZHdRMlF5U1hoaVJGcFVZa1p3VDFsWWNGZFJNV3QzVld4T1ZsWnNWalZYYTJoRFYwWmFjMk5JUm1GV1YxSlRXbFphVDFkWFRrZFZiV2hvVFVoQ1RWWnNZekZrTWsxM1RsaE9WR0V5VWxSWmJURlRZMVpXY1ZGdVpGaGlSbHBaVkd4a1IyRkhTbFpqU0hCV1lsUkJlRll5YzNoalZrcHpZVWRHVjFZeFNsVldha0poV1ZkU1dGUnJhR3RTYkVwVVZtdFdZVlZXV2xkVmEzQnNVbTE0V1ZadGVHOVdSbVJJWlVVNVZtRnJjRlJYVmxwVFYwZE9TVlJyTlZkaVZrcFhWbXRrTkdFeVNrZFhXR1JQVmtWS1dGbHNVbGRYUm14VlVtdGtUMkpHY0RGV1Z6RkhWVEpLV0dGR1ZsZFNiSEJ5VmtSS1UxSXhaSFZXYlhCVFYwVktWVlpHWXpGaWJWRjRXa1pXVW1KWVFsQldha1poVjFaYVdHUkdUbFppVlhCSVZqSXdOVlpyTVVkWGFrNWFaV3RhY2xacVJuZFNNVkp6VjJ4a1RsSXpZM2hXYTFKSFlqRlJlRlpZYUdGU1YyaHZWVEJWTVZkV1duSldWRVpZVW14S1YxZHJWbmRpUjBwR1RsWmtWV0pHV2xSWlZscGFaV3h2ZWxwR2FGZFNWWEI0VmtkNGExWXhaRWRXYmtwV1lrVndiMWxVUW5ka2JGcDBUbGhrVTAxck1UUlZNblJyVlRKS2MyTkdXbHBXUlVWNFZGVmFVbVZIUmtsYVJsWlhUVWhDTlZaSGRGTlNNV1IwVm01S1QxWnNTbUZaVkVwVFZFWmFjbGR1V214V1ZGWllXVEJWTVdGWFNsaGhSRnBYWVd0YWFGbHFSazlrUms1MVUyMTBVMkpGY0ZSV2JYQkxWVEZOZUZac1ZsSmhNbEp3V1d0Vk1WWXhWbk5oUjNSWFVsUkdTRlV5ZUU5WGJVWnlZMFJPVmsxdWFFeFdiWGhyVjFkR1NGSnNUbGROVlc5NVZqSjBhbVZHVVhsVmJHUldZa1phV1ZsVVRrTldSbHB6VjI1a1UxWnNjSGxXVjNSUFZHc3hjMU5yYUZkU00xSm9WbFJLUm1WR1RuTldiRlpYVm01Q2IxWnRkR0ZVTVZwWFUyNU9WV0pYZUZSVVZXaERVMnhhZEUxSVpFNVdNRm93VlRKNFlWZEhSbkpUYkZwVlZucFdWRlZyV2xabFYxWkdaRVpPVGxKSGVGaFdWRW8wVXpKR1NGWnVVbXhTVkd4WVZGVmFTMUpHYkhGU2EyUnFUVlZ3V2xkclpEQlZNVnAxVVd4b1YwMXFWak5WVkVaVFVqRmFjMkZIY0d4aVJuQlpWbTB3ZUdFd05VZFhiR2hzVWxVMVdGVnNVa2RUUmxsNVpVVk9WMUpzY0ZoVmJYQlBWMGRHY2xOcVRsVmlXR2g1V2xjeFMxSXhSbk5VYkU1T1lrVlpNbFp0ZEd0T1JsVjRWRzVTVmxkSFVsQldhMXAzVmxaYWNsZHVaRlpOVm5CNlZtMHhSMVV3TVZkalJtaGFWbFp3VUZsWGVFdFdWbHAxWWtad1RrMHdTa1ZXYTFKSFV6RktkRlJyYUZOaVNFSndXVzEwUzA1c1pISlhiRnBzVW10d2VWUXhXbk5aVmtwMFZXeG9XbUV4Y0ROVk1WcGhWMGRXUjFkdGRFNVNSVWt3Vm10a05GbFdXbGhUYkdob1VsUldXRmxzYUZOVE1WSldWMnhrYWsxV2NIcFpNR1F3Vkd4WmVGTnJiRmRpV0doeFZGWmFTMVl4V25OaVJrcG9UVlp3V0ZaR1ZtRlpWazVIVjI1T1dHSlVWbkpVVjNSM1VqRmFkR1ZIUm1sU2JIQlhWbXhTUjFack1WZFhiV2hoVm5wR1RGa3lNVmRTTVZwelZHeG9VMDFWY0ZGV2JHUXdWakpPZEZWWWFGWmlSbkJYV1ZSR2QyTXhWbk5WYkdSWFlrWndTRlpYZEd0V1ZURnlWMjVzV21FeWFGaFdNRnBMWTJ4YWNWUnNXbXhoTVhCUlZtMHhlbVZHV25OVWJrNVZZWHBXVkZscmFFTk5SbHB6V1ROb2JHRjZWbGhXVjNoclZrZEZlR05HYUZwaE1WVjRWWHBHVjJOc1ZuSlViV3hwVWxSVmVGZFdhSGRXTWtwSVUyeGtWR0V5ZUZaVVZtUnZaV3haZVdWR2NHeFdiRm94VmtkNFYxVXhTbGxSYkd4WVlURmFjbFpVUm10VFJscHlZVWRvVTAweFNsVldSbHBoWkRKV1YxZHJXbWhUUjFKVFdXeGFTMlZzVlhsa1IwWlhWakJXTmxWWGVHRldNV1JKVVc1d1ZtSkdjSEpXYWtaeVpXMUdTR0pHVGs1U1JsWXpWbXhrTkdGck1WZFRiR1JYWWtkNFUxbFVSbUZXTVZKV1YyMUdXRkpzV25sV01uTXhZa1pLVldKR2FGZE5ibWhvV1ZWVmQyVldWblZXYkdSWFZtNUNVVlpXWTNoVE1sSkhVMjVLYVZKc2NHOVpWRUozWlVaYVZWRnNXbXROUkVaNlZsZDBjMkZIVm5OWGJUbFdZV3RGZUZVeFduTldWbEp6V2tkb1RsWlhkekJXYWtreFpERmtTRk5yYUZaaWEzQm9WbTE0ZDJWc1dYZFdXR2hVVm14d01GbHJWVEZVYkU1R1UxaG9WMVpGYTNoWmVrWkhZekpKZWxwSGFHeGlSbkIyVm0wMWQxVXdOVmRXV0hCb1pXeGFiMVpxUW1GbFZsSnpZVVZPYUdKR2NGbGFWVlpoVmxaYVJtTkZhR0ZXVm5BelZUQmtTMUpXWkhOVmJHUlhVbXhzTTFac1l6RmtNVTE0V2toT2FWTkZOWEJWTUdSdllVWndXR1JGZEZWV2JGcDVWakowYTJFd01YSldhbEphVFVad2RsWXdXbHBsVmxaMFVteFdWMlZyV2pKWFdIQkhZVEZhVjFSdVJsSmlWVnB3Vm14U1JrMVdXblJOUkVacVRXdFdOVlV5ZUd0WFIwWnpWMnhzVm1FeFZYaFdWVnBUVm14a2RWUnNhRmRpUm5BMFZsY3dlR1F5U2tkWFdHeFdZV3MxV0ZWclZuZGpWbkJGVW1zMWEwMXJjRWRWTW5NeFZURmtSMU5yZUZkV2JFcEVWV3BLUzJNeFVuTlhiV2hUWVhwV2VsWnRjRWRaVmxwellraEdVbFpGV2xSVmFrSmhWakZXZEUxRVJsZFNiSEJYVkd4V1QxZEhSbkpUYm5CV1lURndTRll3V25kVFIwNUlZa1prYVZKNmFEVldha1pUVVRKR2NrNVdhRlppUjJoV1ZqQmtORmRHV25GVGJFNVdZa1p3VmxWWGREQlVNVnAwVlc1d1dsWldXbkpXUjNoaFpGWkdjMk5HWkZOTk1FcEZWMVpqZUZZeFdsZFhibFpYWWtkb2NGVnFTbTlXUm1SWVkwVmtVMkpXUmpWVmJYUmhWMGRLUm1ORk9WWk5SbkJNV2tWYVlXUkhWa2hTYkZKT1ZtdHdXRmRyVm1GVE1WSnpVMnhzVm1FelVsZFdhMVpMVTBac2RHVkZPVmRpUmtwNVZUSXhSMVJzU1hwaFJWcFhWbTFOZUZsNlJuTldNWEJHV2taU1dGSXlhR2hXUm1SM1VXMVJlRnBJUmxSaGVteHlWVzE0ZDAxV2EzZGFTR1JXVFd4YU1GcEVUbTlYUm1SSlVXdDRWMkpVUmxSV01GcFRWMWRPUjFkdGJGZE5iV2cxVm14U1ExbFdiRlpPV0U1aFVsWmFWVmxZY0hOamJHeHlZVVZPVkZac2NIcFhhMlF3Vm14YWMyTkZXbFpXZWtGNFZteGFXbVZzUm5KVWJVWlRVbFZ3VlZac1kzaFRiVlpYWTBWYWFsSnJjRTlWYkZwM1RWWmFjVk5xVW1sTmEydzFWVzAxVDJGc1NuUmxSazVhVmpOU1RGVjZSbFprTVZwMVdrZHdUbFl6VVRCWFZsWmhZVEpHVjFOWVpFNVdSbkJZVm01d1YwMHhXa2RhUlhSVFlsVTFTbFpIZUhkVWJGbDVZVVpzV0ZZelVuSldSekZYWXpGYWRWTnNhR2xYUjJoVlZrWldVMVl5Vm5OYVJsWlNZbFJzVjFSWGN6RlRWbFY0WVVoT1ZVMVZjRWhaTUZaaFZqRmFkRlJVUmxwaVdHaFFWbTE0VTJOc1RuUlNhelZUVFRKb1IxWnNXbUZoTWtWNFZHNU9WV0V4Y0hGVk1GVXhZVVpXYzFwSE9WaFNia0pZVjJ0V01HRnNTbkpYYm14WVlURndNMVpxUVhkbFZuQTJVMnhrVG1KdGFFaFhhMUpIVkcxUmVGWnVUbFJpV0VKVVZGUkdTMkl4V25SalJXUnFUV3R3ZWxsclVtRldSMHBJVlc1S1YySlVWa1JWTUZwU1pVZEdSbFJ0YUZkaVIzZDZWbXBKTVZZeFpFaFRhMXBQVjBad1lWUlZaRk5VUmxsM1YydDBhMUpVVmxsVmJYaHJZVWRLV1ZwRVdsZGhhMXBvV1dwR1ZtVldUbGxhUjNoVFZtdHdWRmRYZUc5Uk1rbDRWbTVHVW1KSVFuSlVWbVJUVW14VmVVNVZPV2hTVkVaS1dWVldWMVpzV1hwUmEyaGFWak5PTkZsNlJtdGpWbHB6WTBkc1YxSldjRXBXTW5SWFdWZFJlRmRyYUZOaGJIQlpXVlJHWVZZeFduVmpTRTVXVW14YVZsVXlOVTlWYlVwSVQxUk9XbUV4V2xSV1Z6RkxZMnhPZFZKc1dtbFhSVW8yVjFkd1IyRXlUbk5qUldSVllsaG9XRmx0ZEV0WlZscHlXWHBHYTAxVk5YcFZNblJYVlcxS1ZWWnRSbFZXTTBKSVZqQmFkMVpzY0VkVWJHaFRZa2hCZUZkVVFtdE5SbHBIVTJ4V1UxZEhhRmhVVnpWRFZFWmFjVkZZYUZOaVZrcEhWbGN4UjFVeVZuUmxTR3hYVmtWS2FGVjZRWGRsUjBWNlkwZHdWRkp1UW5sWFZsSlBZVEExVjFadVVrOVdNMUp2VlcxNFdrMXNXblJPVjNSWVlYcEdTVlpYTlhkWGJVcElWV3hvVjJFeFZYaFdNVnByWkVkT1NHSkdaRTVTUmxZMFZteG9kMUl4VW5KTlZscE9WbGRTY1ZWdE1UUmlNVlp5Vm10MFUySkdjRmhYV0hCWFlWZEtSazVXWkZkU00xSk1WMVpWZUdOdFRrZGlSbVJwVmtaWmVsZFdaSHBsUjA1eldraFdWMkpIYUhCVmJGSlhVa1phUlZKc1pHcE5WVFZJVjJ0YWIyRldTbGxSYkZaV1RVWndTRlJyV210WFYwNUdaRVprVG1KR2NGcFdWRWt4VlRGVmVWTnVUbFJpVjJoWVZGVmFTMU5HYkZobFNFNXJVakJ3UjFaSGVGTmhWa3B6WTBWa1dGWXpRa3haVkVwTFVtc3hXVlZ0ZUZOU1ZGWmFWbGQwVjJReFRrZGlSbFpUWW0xU1ZWWnRjekZOUm5CV1draGtWV0Y2UmtaV1ZsSkhWbXN4V0ZWdVJtRlNSVnBQV2tSS1MxSnNWbk5UYkdST1lrVndUVlpzV21GVk1VVjRWV3RrVldKR2NGWlpWRUozWVVaU1ZscEVVbFJpUjFKNVdWVldUMkZGTVZaaVJGWllZVEpOZUZZeU1VZGphelZXVld4d2FFMXNTazFYVkVKclVqRk9WMUp1VW1sU2JWSlBWVzAxUW1WR1duRlRhbEpZWVhwV1dWWldhRzloVmtwMFpVWmtXbUpHU25wV1IzaFhWbFpHY2xwSGRGZGlXRkV4VmtaYVYyUXlSbGhTV0hCV1lrWmFWMVp1Y0Vka2JHeFlUVlprVjJKRk5URlhhMXAzWVZaSmVGTnJiRmhXZWtVd1drUkdXbVF3T1ZkaFJUVlhUVzFvV1ZaR1VrdGlNbFp6VjJ0V1ZHSllRbkpVVmxWNFRURnNjbFpzVGxaaVJtdzFWbGQwTUZac1drWlRhMmhhWWxob1VGWnRlRk5qYkZKMFpVWmthV0V3Y0doV2JYUnFUVmRGZVZKc1drNVhSVnBZV1ZkNGQxZFdiSEpXVkVaU1RWWkdORlp0TlU5V1JscHlUbFJDWVZaWFVqTldNRnBMWXpKT1NXTkdhRmhUUlVwUlZteFNTMVl5VG5SV2EyeFhZa1Z3Y0ZscmFFTmxSbHBIVld0a1UwMXNTbnBYYTJoVFlWWkplbFZ1UWxWV00yaE1WVEo0WVZkRk5WaGtSMmhwVm14dmQxWkVSbE5UTVZwWFUydGFhbEpYYUdoVmExWjNVMFphY2xaVVJsZFdhMW93VlcxNGExUnJNWFJoUkZwWFlXdHdNMVpFUms1bFZrcHlZVVpTYVZKcmNGRldha0poWkRKT1YySklUbUZTVkd4UFdXdGtVMWRXVWxaVmJHUlZZa1ZzTkZadGNFOVdhekYxWVVWU1YyRnJXa3haTVdSTFVqRmtjMXBHVGxOV1YzZDZWbXhqZUU1R1ZYbFZiRnBPVmxkNFdWbHNhRU5VTVd4eVYyNWFiRkpzYkRWYVJXUkhWV3N4Y21KRVZsWk5WMmd6Vm0weFMyTXlUa1psUjBaWFlsZG9lVmRYTVRSVE1VbDRVMjVXV0dKVldrOVZhazV2VW14YVYxZHRkR2hOVlRWNlZXeG9hMVV5U2xWV2JGWlhZa1pWZUZWVVJtdGpWa1oxVkd4T1UyRXhjRnBXTW5SWFpERldjazFWV2xoaWJGcFhWRlphWVZWR1ZsaGxTRnByVFd0d1IxWlhlRXRXTURGelUydDRWMVpzU2tSVmFrcExZekZTYzFkc1ZtaE5TRUp2VmtaV2EwNUdTbGRXYkdSaFVqTlNWVmxyVmxkTk1WVjVUbFYwV0ZKc2NEQlpWVnBUVjJ4YVYyTkZVbGROVjFKUFdsWlZNVll5VGtaT1YyeFhUVzFuZVZacVNqQldNV1J5VGxab1ZXRXlVbkZWYkZwTFdWWndXR1ZJWkZSTlZscDRWVlpTUjJFeVNraFZiR2hhVmxad1VGZFdaRXRXYkdSellrWmtWMkpYYUZGV1ZFbzBVbTFXVjFadVZsTmlSMmhZV1d4a2IxSldXa2RXYlhSVFRWZFNSMVF4V25OV01rVjZWVzVPV21KR1NucGFSbHByVjBkV1NHUkdaRTVpUm05M1ZtdGFiMk14VlhsVGJGWlhZbGRvV0ZSVldrdFNSbkJZWlVVNVYySkZjRnBYYTFwVFZHeEplbUZGV2xkV2JIQnlXVlJHVDJNeFNsbGFSazVwVmtaYVZsWnRlRlpOVmtWNFdraEdVbUpyTlZSVmJYUmhWMVprY2xadVpGWmhla1pIVmpJMVYxWnJNVmRYYkVKV1ZqTm9NbHBFU2t0U2JGWnpVMnhrVG1KRmNFMVdiRnBUVVRGSmVWTnVUbFZpUm5CV1dWUkNkMkZHVWxaYVJGSlRWbXhhV0ZkclpEQldSMHBHVm1wT1ZtSlVRWGhXTUdSTFZsWktkV05HY0d4aE1XOTZWbXBHWVZVeFdsaFRhMmhzVWpOb1dGUldWbk5PYkZsNFYyeGthR0Y2VmxkVVZsWnZWa2RHYzFkdFJtRldNMmd6VlhwR1YyTldUbkZWYXpWVFlsWktXVll5ZEd0TlIwWlhVMjVTWVZKR1dsaFVWM0JYVWtac1YxZHJjR3hTYlZKV1ZtMTRVMVJzV2xkWFdIQlhWMGhDUkZsNlJrdFNNVXB6WVVkR1UxZEZTbFJXUmxaWFdWZFNWMVpZYUZkaGVteFRWRmQ0WVZkR2EzZFhiazVYWWxWYWVWWXlOVWRYYlVwSFUyeFNXbUpZYUhsYVZsVjRWakZ3U0dWSGJGZFdSbHBMVm10U1IySXhXWGxTYmtwT1YwVTFXRmxZY0hOVk1WSllUVlU1VGsxV1dUSlZiVFZyVmtaS2MyTkVRbFZXYkZvelZtdGFTMVp0U2paU2JHaFhZa2hDZUZaR1dsWmxSa2w0WWpOd2FWSlVWbGhVVkVwdlpVWmFSMVZyU2s1V01HdzBWMnRvUjFaSFNraFZiV2hhWWtad1NGUnNXbk5qYkZaeVZHMW9VMkV6UWpSWFYzUnZZVEZrZEZOc1ZsZGlSa3BoV1ZSS1UxVkdjRWRYYlhSclVqQmFTVmxyV2t0VWJVcFlXa1JPVjJGcmJ6Qlpha1pTWlZaYWRWUnRiRk5pVjJodlZsZHdUMkl4VW5OV2JGWlNZVE5TY2xSV1pEUk5SbEp6VjJzNWFGWnJiRE5VYkZKSFZqQXhjVkp1V2xwV2JIQkhXbGQ0ZDFORk5WZGpSVFZvWVRGd1dsWXlkRk5TTWxGNFdrVmtWR0pyV2xOWlZFNXZWMFpXZFdOSVRsWlNiRnBXVlRJeGQyRXdNVlpOVkU1YVlURmFWRlpYZUZwbFZsWnlaRVphYUdFeGIzcFdSbVEwWTIxV1dGTnJXbFZpVlZwdlZGYzFiMU5zWkZoa1J6bFhUVlUxZWxaSGRHRmhiRW8yWWtkR1dtSkdTa2haTW5oelkyeGFjVkZzVWxkaGVsVjNWMnhXYTJReFZYZE5WbVJxVTBad1dWbFVSbUZWUm10NVkzcEdhbUpHV25wVk1qRnpWRzFLVjFOcmVGZFdiRXBFVldwS1MyTXhVbk5YYkZab1RVaENiMVpHVm10T1JrNXpWbXhvVDFkRk5XOVZiWGgyVFd4YWMyRkhkRmRTVkVaSlZrZHdVMWR0UlhsVmF6bGhWak5vVkZwRlpFZFRSa3B5VGxkc1UySkhPVFpXYkdRd1dWWkplVlZ1VG1sTk1sSndWV3hhUzFVeFduRlRiRTVVVFZaYVZsVlhkR3RoVjBwR1RsWmtXbFpXY0ZCWlYzaEtaREpPUjJKR1pHbFNNbWhaVjFaa2VtVkhVbGhTYTJ4VllrZG9jRlZxU205U1JtUllZMFYwVTAxWFVrZFViRnBYVlcxS1ZsZHNiRlppUjAweFZHeGFXbVZHWkhSa1JUVk9ZWHBXU0Zac1pEUlRNa1pXVFZWV1YyRXhXbUZaYTFwM1ZFWnNObEp0ZEd0U01IQkhWa2N4YjFSdFJYaGpSMFpYWVRKTmVGbFVTa2RXTVU1WldrWm9WMUpXY0ZwV1YzUlhaREZPUjJOR2FHeFRSWEJ6Vm1wQ2QxTnNWbGhsU0U1VllsVldORmx1Y0VkWFIwVjRWMnhDV21KVVJsQlZiWE0xVjFaR2MxTnNaRTVpUlhCTlZteGFVMUV4U1hoVldHaFRWMGQ0WVZSVVNsTldWbEpXV2tSU1UxWnNXbGhYYTJRd1ZrZEtSazVWWkZaTmJrSllWako0WVdSR1VsbGhSbFpYVm14c00xWlhkR0ZVTVdSSVUydGFhbEl3V25OWlZFSjNWR3hhY1ZGc1pGWk5WVm93Vm0wMVMxUnNUa2hoU0VaVlZrVTFSRlpFUm5Oak1WWnlXa2RzVjJKV1NrZFdWM2hUVmpGc1dGTnJhR0ZTUmtwV1ZGWmtVMkZHV1hoV1dHaFhWakJhU1ZSc1dsTldNVnBWVm10V1YwMXFSWGRaZWtaTFVqRktjMkZIUmxOWFJVcFVWa1pXVjFsWFVsZFdXR2hYWVhwc1UxbHJZelZOTVd4eVZtMTBWbEpzYkRSWk1GcDNWbFphYzFOdWNGcGlSbkJ5Vld4YVMxWldWblJTYXpWVFRUSm9SMVpzV21wbFJteFhXa1phVGxac1duQlZibkJIVjFaV2NsWnNXazVXYlZJd1dsVmpNV0pHU2xWaVJXeFlZVEZhTTFaWGMzaFNiVTVKVld4a1RsSnJjRWhXUjNoaFpESk5lR0l6Y0doU2EwcFlWRlpvUTFSR1dsZFZhMDVUVFZaR05GVnNhSE5pUmtwR1RsaEtWVlpXU2tkVVYzaGhVMFV4Vm1SR1ZtbFdiSEExVjFSQ1UxRXhaRWRUYkdSb1pXdGFXVmxzYUZObGJGWnlWMnRrV0ZKdVFraFphMVV4VmpGSmVWcEVWbGRXUlZwWVZrUkdSMlJHVGxsYVIyeFRWbXR3YjFaR1kzaFZNVTE0Vm14V1VtRXlVbkJaYTFwTFVteGFTR05GT1ZwV1ZFWkpXbFZXVjFkSFJuSmpTRXBXVFc1b1RGa3haRXRUUlRGWFlVWk9VMVpzVmpOV2FrcDNVakpKZUZOclpGTmlSMmhvVlcweE5GWkdiRmhOVkZKclVteFdORlp0Y3pWVmJVcElUMVJTV0dGck5YWldWVnBQVWpKT1JtUkdXbGRTVlhCSlYydGtORlF4V25OVmJrcFZZbFZhY0ZWcVNsSk5SbHBGVVcxMGFFMVZOWHBWYkdoellURktObFpzVWxaaVdGSm9WRmQ0YTJOV1NuUlBWazVYWVRGd1lWZFVRbFpOVmxKeldrVmFUMUpGY0ZoVmJURlBUVEZ3UlZKdVdtdE5hM0JIVmxjeGIxUnRTbGRUYXpWWFZteEtSRlZxU2t0ak1WSnpWMnhXYUUxSVFtOVdSbVEwWkRGS1YxWnNaR0ZTTTFKWlZtMTBWMDB4Vm5STlJFWlhVbFJHUjFSc1ZsTldWVEZIVjI1d1ZtRXhjRWhaTVdSSFVtMU9SMU5yTldsV2EyOTRWbXhTUjFZeFVYaFNiazVwVFRKb2IxVnNXa3RWVmxaeFUyeE9WRTFXV2xaVlYzUnJZVmRLUms1V1pGZFNlbFpNVjFaVmVGTldWbkpXYkZwWFlsWktlVlpVU2pSU2JWRjRVMjVTVDFZd1dtOVVWVkpYVWtaa1dHTkZUbXBOVlhCSVZXMTRiMWxXU2xsaFJtUlZWbFphZVZSVldsWmxSbHB5VjIxMFRsWlVSVEJYVmxaWFZqRldjMXBGYkZKaGVteFdWbTB4YjFWR1VuUmxSazVYVm1zMVdsZHJaRWRVYkVsNllVVmFWMVp0VWpOWmFrWlBZekZTY21KSFJsTmxiRnBXVm0xNFZrMVdSWGhhU0VaU1ltczFWVlpxUmtkT1ZtUnlWbTVrVm1GNlJrZFpNR2hIVm1zeFYxZHVXbFZXUlZveVdsWmFhMk5zVm5OVGJHUk9Za1Z2ZDFac1dsTlJNVWw1Vlc1T1lWSldXbFJXYTFwaFlVWnNjbHBIZEU5U2JFWXpWMnRrTUZaSFNrWldhazVXWWxSQmVGWnJXbUZXYXpWV1ZXeFdUbEpzY0RaV1ZFWnJWVzFXVjJORldtcFNhM0JQVld4YWQwMVdXbFZTYkdScFRVUkNORmxxVG10aE1VcFlWV3hHVjJGcldqTldNbmgzVmpGd1JWRnRiR2xUUlVvMVZtdGtNRk14V2xoU1dHUlBWMGhDYUZWclZURmpiRnBJVFZaa2FtRjZWbGxaYTFwWFYwWk9SbE5zUmxoaE1WcFlXWHBHUzFJeFNuTmhSMFpUWld0YVZGWkdWbGRqYXpGSFZsaG9WMkY2YkZOWmEyTTFUVEZzY2xac1RsWmlWVm93V1ZWV01GWnNXa1pqU0ZwYVZqTm9VRlp0ZUd0alZsSjBZMFpPVjAweWFFeFdNblJUVXpKRmVGUnVUbE5YUjNodlZXNXdSMWRXVm5KV2JGcE9WbTFTTUZwVll6VlVNVnB5VjJ4c1dHRXhXVEJXYlhONFVteGtkVlpzV2s1V2JIQlJWbFprTkdSdFZsZGFTRXBXWWtWd2IxbHNaRzlVUmxwWFZXdE9VMDFyY0hwV1IzaGhWbGRGZDA1V1JsWmlSMUV3Vld4YVYxZEZNVmhTYkdoWFZrVmFWMWRXVm1wTlZscEhWMnhvWVUwelFsbFpWM1JMVmtaYVdFMVZjR3hXYmtKSVdXdGFUMVV4V2xkaE0yeFhZVEZ3VkZWcVNsZGtSbHAxVTJzMVdGSnJjRkJXVjNCTFZURk5lRlpZWkdoU00xSndXV3RvUTJWV1draGtSWFJhVmxSR1NWcFZWbGRXYkZwMFZXNUtXbUpHY0VkYVJFWlBWbFpXYzFWc1pGZGlWR3N5Vm1wS2QxRXlUWGhUYTJSVFltdGFiMVZzYUVOVk1WSldWbTFHYTFac1ZqUldiWE0xVlcxS1NFOVVUbHBoTVZwVVZsZDRhMUpzVG5Ka1JscE9VakpvZVZkWE1UUlVNVnB6Vlc1S1ZHSlZXazlWYWs1dlV6RmtjbFZyZEdoTmEzQllWV3hvYTFVeVNsVldiRlpYWWtaVmVGVlVSbXRqVms1MFVteE9VMkV4Y0ZwV1JFWlhaREZXY2sxVldsaGliRnBYV2xkMFlWVkdWbFZSVkZaVFlsVndSMVV5Y3pGVk1XUkhVMjFHVjFZelVsaFZha0V4WXpGV2MxWnNUbWxpYTBwNlYxWm9kMUl3TVVkVmJHUmhVakJhV1Zac1VrZFdiR3hXWVVkMFYxSnNjRmRVYkdoaFYwZEtXV0ZJVm1GV1ZsVXhWVEJhZDFKdFRrZFZiRkpUVFZWdmVGWnNhSGRTTVZGNFVtNU9hVTB5YUc5VmJGcExWVEZhY1ZOc1RtdFNiRnBXVlZkMGEyRlhTa2RUYTFwV1lsaENWRmRXWkV0VFJuQkZWV3hXVGxZeFNtOVdhMVpoVm0xUmVGUnNWbFppUmtwWVZteFNWMUpHV1hsalJVNXFUVlZ3U0ZWdE5VZGhSa3BaVVd4V1ZrMUhVbFJhUmxwV1pVWmFjazlXU21sU2VtdDZWMWQwVjJNeVJYZE5XRkpXWVhwR1dGWnJWa3RUUm14MFpVVTVWMkpHU2pCVWJHUkhWRzFLU1ZGcldsZFdiSEJYVkZaYVMxTkdUbkppUjBaVFVsUldWMVpxUW05Uk1WWkhXa1pvYWsweWFGQlphMVV4VFZaYVdHVklUbFpOYTFvd1dsVm9VMVl3TVVkVGEyUlZZa1p3TTFsNlJuWmxiVVpIVVd4U1UySnJTazFXYkZwVFVURk9jazVWWkZaaE1uaHdWV3hXZDJGR1VsWmFSRkpUVm14YVdGbFZWazlYUmxsNFYyeHNZVkpYVFhoV2ExcGhWakpLTmxGc2FHbFhSMmd4VjJ4V1ZrNVdaRWRhU0U1cFVsUldXRlZxVG05TlJscFpZMFZrVlUxVlducFphazVyWVZaS1YxTnNUbGRoYTNCVVZrWmFZV1JIVGtoUFYzUnBVbFJXV0ZaclpEQlRNV3hXVFZWb2JGSldXbGRXYWs1RFpHeGFSMXBHWkZkaVJYQXdWR3hhVTFZeFdsVldhMUpYVFc1Q1NGbHFSazlYUmxaWllrZEdVMVpzY0ZoV2JUVjNZekpTVjFaWWFGZGhlbXhUV1d0ak5VMHhiSEpXYkU1V1lrWnNOVlpYZERCV2JGcEdVMnRvV21KWWFGQldiWGhUWTJ4T2RGSnJOVk5OTW1oSFZteGFZV0V5UlhoVWJrNVRWMGRTVkZsc1VsZFdWbHB6VmxSR1VrMVhVbmhWVnpWUFZURktjbGRzYkZoaE1Wb3pWbGR6ZUZKc1pIVldiRnBPVm14d1VWWldaRFJrYlZGNVUydGFWbUpGY0ZoVVYzaExWRVphVjFWclRsTk5hM0I2VmtkNFlWWlhSWGRqUjJoVlZsZFJNRlZzV2xkV01YQklaRVpTYVZKV1dYcFdWekIzVFZaYVIxZHNXazlXVlRWWldWZDBTMlZzVm5KWGEyUllVbTVDUjFrd1drdFViRXBYWTBaR1YxWnNTa3hVYTFWM1pWWldXVnBGTlZkU2JrSlhWMWQ0VjJReFVYaGpSbWhxWld0YVQxVnRjekZXTVZsNFZXeGtXbFl3Y0VsWGExSlRWbFV4V0ZWdGFGZE5WbFkwVm14a1IxTkZOVmRWYkdSWFlsaE9ORlpxU1hoT1IwcDBWbXRhVUZadGFGbFphMlEwVkRGYWNscEhPV3RXYkZZMFZtMTRkMVF4V25WUmJuQllZV3MxZGxaVldscGxSMDVIWTBaV1YySkZjREpYVnpFMFZERmFjMXBHVmxkaVZWcHdWV3BLVWsxR1drVlNiWFJhVm0xU1YxUldXbGRoUmtvMlZteFdWMkpHY0hsVVZscHJaRWRXU0U1WGVGTldSM2hhVm1wS05HTXhVbk5YYTJob1UwWmFXRlJWV2t0U01WSnpWMjVrYWsxWE9UWlpWVnBEVmpBeFdWRnRSbGRTYkhCVVdYcEtTMVl4VG5KYVJrNXBZbFpLYUZaR1ZsTlNNVXB6VjJ0a2FGTkhVbGxWYWtaaFpWWlNWMVZ0UmxoaVZYQkhWR3hvVjFkSFJuSlRibkJXWVd0Rk1WWXdXbXRqTWtwR1RsWmtVMDF0WjNoV2JHaDNVakZSZVZOdVRtbE5NbEp3Vld4a1UxVldXbkZTYm1SWVlrWktXRlpYTURWaFYwcElWV3RrVjFKNlFYaFhWbFY0VTBkV1JtRkdWazVXTVVwdlZtcEdWbVZHV2xoU2EyaFBWbXhLVDFac1VsZE5WbGw1WTBWT2FrMVZiRE5VTVZwdlYwZEtTR1ZJVGxkaVJscG9Xa1phVjA1c1NuSlBWMnhwVW5wcmVsZFhkRmRoTVZaSFYxaG9hbEp1UWxaV2JYaExaR3hzZEdWRk5XeFNiVko0VmxjeFIyRldTWGxaTTJoWFZteHdjbGxVUms5ak1VNTFVbTFzVTJWcldsZFdWRUpyVkRBd2VGWnFXbE5pVkd4VVZtMTBZVmRzYTNkV1ZFWlZZa2RTUjFSclVrdFdNVXB6VTJ0MFlWWldWVEZWYlRGTFVteFdkRkpyTldsV2EzQk5WbXhhVTFFeFNYbFRiazVWVjBkb2IxVnJXa3RWVmxaeldrUlNVMVp0VW5oVk1qRXdWa2RLUmxacVRsWmlWRUY0VmpCYVMxWnJNVVZTYkZaT1VteHdObFpYZEdGa2JWWlhZMFZhYWxKcmNFOVZiRnAzVFZaYVdXTkZaR2xOUkZaSFZERldZV0ZXU2xkVGJXaFZWbnBHVkZWNlJsZFdWa1p5V2tkMFRsWlVWbGhYVmxaVFZURldSMU5zYUd4U1ZscFpXVmQwZDJOc1ZYbGxSVnByVFZWd01GUnNXbE5VYkZsNVdrUmFWMDF1UWtSWmVrWkxVakZLYzJKR1NtaE5NRXBVVmtaamVGVXlVbGRXV0doWFlYcHNVMWxyV2t0bFZscElUbFU1YUUxRVFqVldWM00xV1ZaWmVsUllhRnBXYkhCVVZqRmtUMUp0VWtoa1JrNU9WMFZLUjFac1dtRmhhelZYV2taYVRsWnNXbkJWYm5CSFYxWlZkMXBFVW14aVJrWXpWMnRrUjFVeFNuSlhiR3hWVFZad2VsWkhlR0ZUUjBaSlZteGFUbFpzY0ZGV1ZtUTBaRzFXVjFwSVNsWmlSWEJZV2xjeE5GbFdXa2RYYkU1cVRXdHdXRmRyVm5OaFZrNUdUbFpHVm1GcldqTlZiRnBYVjBkT1NFOVdVbWxTVmxsNlZsY3dkMDFXYkZoU1dHUlBWbFpLVmxSVlpGTmhSbFp5VjJ0a1dGSlViRmhaYTFVeFZqRkplbUZFUWxkaGEwcDJXWHBLVG1Rd09WWlhiV3hUVm10d1ZGWnRjRXRWTWxKSFZteFdVbUV6UWxCVmJYTXhWakZhU0dSRmRGcFdWRVpJVlRKNFQxZHJNVWhWYkVKWFVqTm9URlZ0YzNoV1ZtUnpXa1UxVGsxRmNGRldNbmhoWVRGTmVGcEdhRlpYUjNob1ZXeG9RMVV4VWxaV2JVWnJWbXhXTkZadGVIZFVNVnAxVVc1c1lWSldjSHBaVkVGNFpFWldjbVJHV21sWFJVbzJWMWQ0WVZSdFZrZFZia3BVWWxWYVQxVnFUbTlUTVdSeVZXdDBhRTFWTlhwVk1qVkhZVlpLTmxKc2JGWmhNVnBYVkZaYWEyUkhVa1ZSYkdoWFRWVlpNVll5ZEdwbFJsWnlUVlZhV0dKc1dsZFVWbHBoWkd4U1ZWSnVXbXhXYlZKNVdXdGtNRlJ0U2xkVGEzaFhWbXhLUkZWcVNrdGpNVkp6VjJ4b1YxSnNjRzlYVmxKUFZURmFWMVpzWkdGU00xSlZXV3RWTVZOc1pISlpla1phVmpCV00xUnNWazlYUjBaeVUyNXdWbFl6VGpSVmJURlRVakpLUjFSc1RsZFdiWFExVm0xMFlWVXhTWGxXYmxKWFltdHdUMVV3WkRSVU1WcHlXa2M1VkUxV1dsWlZNakExWVVkS1JrNVdaRmRTZWtGNFYxWlZlRk5IVmtaV2JGcFhUVEJLTWxaVVNqUlNiVlpYWTBWb1QxWnNTbGhXYkZKWFVrWlplV05GVG1wTlZYQklWVzAxUjJGR1NsbFJiRTVWVm5wR1ZGcEdXbFpsUmxweVQxWkthVko2YTNwWFYzUlhWVEZXZEZKdVVtaFNXRkpYVkZWa2IyTnNiSFJsUlRsWFlrWktlVlpIZUVOVk1WbDZZVVYwV0dKR1dsUlpha1pQWXpGS1dXSkhhRk5OTUVwV1ZtMTRWazFYVWxkYVNFWlNZbXMxVkZWdGRHRlhWbVJ5Vm01a1ZtRjZSa2RaV0hCRFZtc3hWMWR1V2xWV1JWb3lXa1JLUzFKc1ZuTlRiR1JYVW14d1IxWXhaREJpTWtWM1RVaG9WbUpIZUhGVmJGSnpXVlpzV1dORldrNWlSbkJKVkd4YVQyRldXbkpXYWs1V1lsUldjbFpyV21GV01rbDZZMFpvYUdFeGNESldWM0JDVGxaa1IxcElVazVXYTNCUFZXeGFkbVZXV25GUmJFNVRZWHBXV0Zrd2FFOWhSa3BIVjJ4R1YyRnJSWGhhUlZwWFZsWkdjbHBIZEU1V1ZGWllWbXRrTUZNeGJGWk5WV2hzVWxaYVYxWnRNVk5qYkd4elYydGFhMDFWY0RGV01uaHZWVEZLVjFaWWFGZE5ha1YzVkZWYVlWSXhTblZTYldoVFpXdGFWRlpHVmxkWlZUQjRWbGhvVjJKVldrOVVWbU0xVGtac1ZsWnRkRlpTYkd3MFdUQldNRlpzV2taVGEyaGFZbGhvTTFreWVGTmpiRkp6VVd4T1YwMHlhRWRXYkZwaFlUSkZlRk5zWkZkaVIzaFRXV3hvUTFac1duTlhhM1JWVFZoQ1dWcFZaREJVTWtwSFUyeHdXazFIVW5wV01GcFBVMFpXV1dKR1drNVdiSEJSVmxaa05HUnRWa2hTYTFwaFVtdEtXRlJXYUVOVU1XUnpWMjEwYVUxcmNGaFhhMVpYVlRGYVIxZHRhRnBoTWxKeVZHdGFVbVZHY0VoU2JGWlhWa1ZKTWxZeWRGTlRNVnBIVjJ4YVQxWlZOVmxaVjNSTFpXeFdjbGRyWkZoU2JrSkhXVEJhUzFSdFNsaGhSRUpYWVd0S1ZGVnRjekZXTWs1SlZHMUdUazF0YUZKV2JYQkhaREZTVjFkWVpHaFNNMUpQV1d0Vk1WWXhXa2hrUlhSYVZsUkdXVmxWVm05V1ZURllWVzFvVjFKdFVsaFdiWGhMWkVVMVYxVnNaRmRXUmxreVZtcEplRTFGTVVkVGEyUlRZa2RvYUZWc2FFTlZNVnB5Vm10MFZWWnNWalJXYlhNMVZXMUtTRTlVVGxwaE1WcFVWbGQ0V21WV1ZuSmtSbHBYVWxWd1NWZFhNVFJVTVZwelZXNUtWR0pWV2s5VmFrNXZVbXhhVjFkdGRHaE5WVFY2Vld4b2ExVXlTbFZXYkZaWFlrWlZlRlZVUm10alZrWjFWR3hPVTJFeGNGcFdNblJYWkRGV2NrMVZXbGhpYkZwWFZGWmFZVlZHVmxobFNGcHJUV3R3UjFaWGVFdFdNREZ6VTJ0NFYxWnNTa1JWYWtwTFl6RlNjMWRzVm1oTlNFSnZWa1pXYTA1R1NsZFdiR1JoVWpOU1ZWbHJWbGROTVZaMFRVUkdWMUpzY0ZkVWJGWlBWMGRHY2xkdGFGcE5WbkJNVmpGYVlXTnJOVmhoUm1SWFZtNUJlRlpzWkRCWlZrbDVWVzVPVm1KcmNGWlpiWFJMVmxaYWNWTnFVbFJOVjNoWVYydFNRMVpWTVZaV2FsWllWa1UxY2xaclZYaFhWa1p5WWtaa2FWWkZTVEJXVkVvMFV6QTFjMU51VWxCV2JrSllXV3hWZUUweFpGaGpSVTVPVW14d1dWVXhhR3RoYkVwWlVXeE9WVlpXV21oYVJscFdaVVphY2s5V1NtbFNlbXQ2VjFkMFYxVXhWbk5YYkZaWFlURmFZVlp0ZUdGVFJteDBaVVU1VjJKR1NubFdSekYzVlRKS2NsTnFUbGRXYlUxNFZtcEtSMVpyTVVsaFJrNXBWa1phV2xadGRGZGtNbEp6WWtoS1dHSnJjSE5XYWtaTFUxWlplVTFZWkZWaVZYQklXVzV3UjFkSFJYbFVhbEpYWVd0d1dGWnFSblpsYlU1SFZtMW9hRTFJUW05V2JYQkRXVlpPZEZaclpHaE5NMEp3Vlc1d1YyTldWbk5WYms1clZteEtWMVp0Y0VOV1IwcEdWbXBPVm1KVVFYaFdhMXBoVm1zMVZsUnNhR2hoTUhBMlZsZDBZVkl5VWxkalJXaHFVako0V0ZSVVNtdE9SbGw1WkVaa1ZVMXJjREJWYlhocllVWktWMWRzVGxkTlIyaEVWa1JHVTFZeVJrWlBWVGxwVW10d1dWWXhVazlpTVZWNVUyeGFUMVpGV2xkVVYzQlhZVVpzV0UxVlpGZGlSVFY2V1ZWYWExWXhXbk5XYWs1WFRXNUNURlZxUm10V01WWnpZVWRHVTAxdWFGQlhWM1J2VVRBeFIxWllhRmRpV0VKUVZtcEdZVll4YkhKV2JrNVhWakJ3ZVZVeU1XOVdWbGw2VVd4b1dtRnJXbnBaTW5oVFkyeFNkR05HVGs1U1JrWTBWbXhhYTJReFVYaGlSbVJZVjBkU1dWbHRNVFJXYkZaeFUycFNWRTFYZEROV2JYaFBWbTFLVm1KRVZsaGhNVm96VmxkemVGSnNaSFZXYkZwT1ZteHdVVlpXWkRSa2JWRjVVMnRhYVZKc1NuQldNR1J2WlZaYVZWRnRSbHBXVkZaWVdXdG9VMkZXU2xaalIyaFZWbFp3VEZaVVJuTmpWazUwWkVaU2FWSldXWHBXVnpCM1RWWlZlRk51U2xoaGEzQlpXVmQwUzJWc1ZuSlhhMlJZVW01Q1NWVnRlRTlVYlVwMFdUTnNWMDFXU2tSWlZFRXhVMFpLY21GR1pHbFNNVXBTVm0xd1MySXlUbGRWYkdocVpXdGFjbFJXWkRSWFJsbDRWV3hrYUZKcmJETlViRkpIVmpGYWRGUlVSbGRTVm5CWVZteGFSMk50VmtkVmJHUlhWa1phUlZacVNuZFJNazE0Vkd4a1UySnNXbkJWYWtwdlYwWndXR1ZHWkU1TlZsa3lWVmR6TldGdFNrZFRibXhYVW5wV1JGWlhlRnBsVmxaeVpFWmFWMUpWY0UxV1JsSkhZMjFXVmsxV2JGVmlXRkpZVkZaV2QxSnNXWGxqUlRsU1RWVndXRlp0ZUc5VlJsbzJWbXhXVjJKR1ZYaFZWRVpyWTFaT2MxUnNhRmRpUlc5M1YyeFdhMlF5UmxkWGEyUllZbXh3V1ZacVRtOWpiRnAwWlVoYWJGSnJXbnBXVjNoTFlWZEZkMk5JWkZoV2VrVjNWVEl4VjFJeVRrWlhiRlpwVmtaYWRsWnRNSGhpTVVwelZteGthRk5IVWxaWldIQkhWMnhhU0dOSFJsZFdNRlkxVmtkd1UxWnRTbFZTYTNoaFVteHdXRnBGWkZkVFIwNUlZVVprVjFZelpEWldha1poVmpKRmVGZHVUbWxOTW5oWFdWUktiMVpHYkhSTlZGSm9VbXhLV1ZwVlduZGhNREZXVGxob1YxSXpUWGhYVmxWNFZtczFWMkpHVm1sU01tZDZWMVpTUjFOdFVYaGFTRlpYWWtoQ1QxbFhkR0ZUVm1SeVZteGthazFWTlZoV01qVlhZV3hKZDFkc2JGWmlSMmhEV2xWYVdtVkdaSFJqUjNoVFRVaENTVmRXVmxkV01WWnpXa1ZzVW1GNmJGWldiVEZ2VlVaU2RHVkdUbGRXYXpWYVYydGtSMVJzU1hwWk0yeFhVak5TY2xsVVJrOWtSa3B6WVVkMFUxWkhlRlJXUm1ONFRrWkZlRnBJUmxKaWF6VlVWVzEwWVUxV1pISmFTR1JvVm14c05sZHFUbTlYUjBWNFYyeENXbUZyY0V4V2JURkxVMVpTZEdSRk5VNWlSWEJSVmpKNGEyVnJNVmhTYkdSV1lrZDRjVlZxVGxOamJGWjBaVVprVDJKR2NGbFVWbU0xWVVkS1ZtTkljRlppVkVGNFZqSXhWMk50VGtkaFIwWlRZa2hCZWxaVVFtdFRNVTVYVjI1U1UySllhRmhXYkdRd1RrWlplRnBJWkZWTlZtdzFWbTE0WVdGV1NsaGxSbFphWWtkb2Rsa3hXbGRrVjA1SlZHczVWMkpyU2toV2EyUXdWREZTYzFOWVpHbGxhMXBYVm01d1IxVkdXa2hsUlhSVFlYcEdWbFl5ZUd0VWF6QjNVMnhDV0dKR1duSlZla1pyVjBaV2NsWnNUbWxYUlVwUVYxZDBZV1JyTVZkYVJtaE9VMGRvVkZSWGVFdFRSbXQzVjI1T1ZXSkZiRFZhVlZWNFZqRmFjMU5yVWxkU1ZuQlFWbTE0VTJOc1RuUlNhelZUVFRKb1RGWnNXbXBOVjAxNVVtdGtXR0ZzY0ZoV01HUlRWbFpTVmxwR1RscFdiWGhZVjJ0Vk1XSkhTa2RYYWtKYVZsZFNNMWxXWkV0U2JHUlpZVVprVTFZeFNqVldSbFpoWkcxUmVWTnJiRkppVjJoUFZXdGFZVkpzWkZkWGJHUlRUV3R3ZWxaSGVHRldWMFYzWTBaYVdsWkZSWGhhUkVaWFZqRndTR1JHVW1sU1ZsbDZWbFJKTVdFeFpIUlRhMmhXWVRKb1lWbHNhRzlOTVZsNFYyeE9XRkp1UWtoVmJYaGhWR3hLV1ZGdVpGZGhhMncwV1hwR1JtVldUbk5oUmxKWVUwVktWbFp0Y0V0Vk1rWkhZa1prVjJFelVuSlVWbVEwVFVac2NsWnJPV2hOYTNCWFZHdFNSMVpYU2toaFJrSmFWbFp3Y2xWdGN6RlRWbkJIWVVkb1RtSkZiekpXTW5oaFZqQXhSMU51VWxSaE1YQlFWbTEwZDFkR1duRlNhM1JVVW14c00xWlhkRTlYYkZwelYydG9WMVl6VW1oV2JURkdaVWRPUjFwR2NGZGlWa1l6VjFjeE5HTXhXWGhqUldScVVqQmFUMVl3Vmt0Tk1WcElaVWQwVDFJd1dsbFZNbmhyVmtkR2MyTkhhRlpoTVZveldsZDRVMVpzY0VaYVJrNVRZbFJyTVZaRVJsZE5SMHBIVjJ0a1dGZElRbGxXYm5CRFRrWnNXRTFWZEdwaVZscEhWbGQ0UzFZeVZuTlhhemxZVmpOb2RsVlVRWGRsUm5CSlZtMXNVMDB3U25oV1JsWnJUa1pLVjFwR1ZsVmlSMUp2VldwQ2QyVldWWGxPVlRsWVVqQndNRnBWYUVkWGF6RkhWMWhrVjJGclJqUlZiWE14Vm14V2RGSnRlR2hOU0VKUFZteFNSMVl4VVhoU2JrNXBUVEpTY0ZWc1pEUmhSbFYzVm10MGFtSkdXbmhWTWpFd1lWZEtSMk5JYkZoaE1rMHhXV3RhWVdSV1JuTmlSbHBwVmtWV00xWnRNVFJUTURWMFUydFdWR0pJUW05VVZscDNWMVphU0dSSFJtdE5WMUpJVmxjMVIxVXlTbGxWYkZKaFZucEZlbFJXV2xkT2JFWnlUMWR3YVZKNmF6QlhWM1JoWXpGYVYxZFliRlppVjJoWVZGVmtVMlJzYkRaU2JYUlhWbXhLZWxkclZURlZNREZJWkhwS1YxWkZXbFJYVmxwTFZqRmFjMkZHUWxkbGJGcFdWbTE0VmsxV1JYaGFTRVpTWW1zMVZGVnRkR0ZYVm1SeVZtNWtWazFFUmxsVU1WSlRWMGRGZUZkdVdsZGhhM0JZVm1wS1QxSXlTa2RXYkdST1lrVndWRlp0ZUZOUk1VNXlUVWhvWVZORk5XOVZibkJ6WTBaV2RFMVVRazlpUm5Bd1dUQldUMkZHV2xWUmFrNWFZVEZLU0ZZeU1WZGphelZYWVVad1YySldTazFXYWtKclV6RktWMUp1U214U2JFcFVWbXRhWVU1c1dYaFpNMlJzVW14V05Ga3dhRk5WTWtwSVlVVTVWMkZyY0haWlZWcFRWMGRXUjFwSGVHbFNWRlpZVmpGb2QxWXlTa2hTV0hCb1VrVmFWMVp1Y0Vka2JHeFZVbXR3YkZadVFrWlZiWGgzVmpKV2NsSllhRmhXUlVweVZYcEtUMU5HU25KWGJYQlRZa1p3V1ZadGVHRmtNVTV6VjJ4b2JGSnVRbEJXYlhSelRrWmFWMkZIZEdsU2EzQllWako0VTFZeVNsbFZibkJoVmpOb1VGWnRlSGRUVmxKMFpFWk9hVmRIYUdGV2Frb3dZVEExUjFWclpGZFhTRUpvVlc1d1YxZFdXbkpXYm1ScllrZDRWMWRyV2s5Vk1ERkZZa1p3VmxaNlJraFdWM04zWlZaV2RWWnNhR2hOV0VJeVZtdFNTMU14VGtkVmJsWldZWHBzV0ZSWE1XOWtNVnAwWTBWa1YwMXNSalJXVm1oellWWktWazVZUmxaaGEwb3pWakZhVjJSRk1VVlNiSEJYWWtaWmVsWlVTVEZWTVdSMFVtNUtUMVpZVWxsWlYzUmhaVlp3VjFwRlpGUlNNRnBKV2tWYVQyRkhTbGxhTTNCWFlXdHZkMVpFUmtabFZsSnlZVVpTYVdFd2NGUlhWbEpIVXpGYVYxWnVUbGRpVlZwWVdXdGtVMUpzVmxoT1ZUbFdUVlp3ZWxZeFVrZFdiRm8yVVdwU1dsWnNWak5hUkVwTFUwVTFWMk5HWkdsV1ZGRjNWakZhVjFsWFVuUldiR1JZWWtkb2FGVnFTbTlYUm5CWVpVVjBhMVp0VWxoV01qRjNZa1pKZDFkcmFGcGhhelY2Vm1wS1MyUldSblZWYkdSWFlrVndSVlpyVm1GVU1WcHpWVzVLVkdKVldrOVZhazV2VW14YVYxZHRkR2hOVlRWNlZXeG9hMVpIU25OVGJVWmFWak5OZUZWNlJtdGpWa3AxV2tkMFYySklRalJXVm1ONFRVWmtSMU5zYkZKaWJrSlhWRlphWVdOc2JEWlRiRTVYWWxWd1IxbFZXbTloUjBWNFkwaHNWMVpGU21oWFZsVXhWakZ3U1ZSdGFGTldSbHBSVjFaU1IxTXhWWGhpU0VaVVlsaFNWVmxyVmxkTk1WWjBUVVJHVjFKc2NGZFViRlpQVjBkR2NsTnVjRlpoTVhCSVZqQmFkMUp0VGtkVGF6VlRWMFZHTmxacVJtdE9SMFY0VTFoc1ZHSnJOWEZWYlRGVFZWWlpkMWR0UmxwV2JIQXhXVEJXYTJGck1WWk9WbVJYVm0xb2NsZFdWWGhYVmtaeFVteGthVmRGU2tWWFZsSkhZVEZLZEZScmJGVmlTRUp6V1ZSR2MwMHhaRmhsUjNSV1RWZFNXRlp0TlVkVk1rcFpVVzVDVjJKWWFETlpNbmhYWTJ4a2NscEhkR2xTZW10NlYxZDBWMVV4Vm5OWFdHeFdZVE5TVjFaclZrdFRSbXgwWlVVNVYySkdTbmxWTWpGSFZHeEplbUZGV2xkV2JWSXpWVlJLUjJSR1RuVlZiWEJzWVROQ1ZWWlhNVEJaVlRGeldraEdVbUpyTlZSVmJYUmhWMVprY2xadVpGWmhla1pIVmpJMVYxWnJNVmRYYkVKV1ZqTm9NbHBFU2t0U2JGWnpVMnhrVG1KRmNFMVdiRnBUVVRGSmVWTnVUbWhOTW5oUFZtMHhVMk14YkhOV1ZFWlVWbXhHTkZsVldtdGhSMFkyVW01d1YySlVRWGhXYlhoTFkyczFWbFZzY0dsU01VcFZWbXBHWVZZeVRsZFRibEpxVWpKNFdGbHJXbk5PUmxsNFZXdHdiRkpzYkRWV2JUVlRWbTFLU0dGSVRsWmhNVnBNVmtaYVYxWldUbkZSYkZaT1ZsWlpNVmRYZEZkVE1XeFdUVlZvYkZKV1dsZFdiVEZUWTJ4VmVXVkZXbXROVlhBd1ZHeGFVMVl4V2xWV2ExSlhUVzVDUkZsNlJrdFNNVXB6WVVkR1UxZEZTbFJXUmxaWFpEQXdlRmRZYkU1WFJUVlRWRmQ0WVZkR2EzZFhiazVYVmpCd01GWlhOVU5XVmxsNlVXeG9WV0pZYUhKWmVrWlRWbFpLZEdWSGJGZGhNMEpMVm14amVHUXhSWGxTV0doaFVsWndVRlp1Y0VkWFZscHlWbTVLVGxadGVGWlZiVFZyVmpGS2NsZHNiRnBXVm5CSVZtMXplRkpzWkZWU2JHUlRZa1p3VlZaV1pIcE5WMDV6Vm01T1ZHSlhlRTlaYkZwTFZFWmFWMVZyVGxOTmEzQjZWa2Q0WVZaWFJYZGpSMmhWVmxkUk1GVnNXbGRXTVhCSVpFWlNhVkpXV1hwV1Z6QjNUVlphUjFkc1drOVdWVFZaV1ZkMFMyVnNWbkpYYTJSWVVtNUNSMWt3V2xOVk1WcFlUMGhvVjAxV2NHaFpWM040Vm1zeFZsZHRkRk5XTW1oYVZtMXdTMDVHWkhOV2JrcFhZVEpTVUZscldrdFdiRlowVGxoa2FWSXdXVEpWYlhoelZsWmFjMWR0YUZwV2VrWk1XVEl4VDFKV1RuTmpSVFZwWVRCc05WWnFTbmRTTVd4WFZHdG9VMkV5YUhOVmJHaERWa1pzY21GRlRsWk5WbkI1VjJ0b1QxVnJNWEpPVld4WFVqTkNXRlpYTVVkamJFNTFVMnhrVGxKc2IzcFdSbHBoWVRKTmVHTkZaRlJpVlZwUFdWUktNMDFXV25GVFdHUnNVbXhLV1ZWdGVHRmhWazVJVld4U1ZtSllVbWhVVjNoclkxWkdkVlJzVGxOaE1YQmFWakowVjJReFZuSk5WVnBZWW14YVYxUldXbUZWUmxaWVpVaGFhMDFyY0VkV1YzaExZVlprU0dGSWNGZFdNMEpEVkZaa1RtVkhSWHBhUjJoVFlUTkNiMVpHV2xka01XUnpZa1phWVZOSFVtRldiVEZUVWpGVmVHRkhkRmhpUm5Bd1ZrWlNSMWxXU25OWGJuQldUVVp3VEZwR1pFOVNiVTVIVkdzMVYySkdXVEZXYkdRd1dWWkplVlZ1VG1sTk1sSndWV3hhUzFVeFduRlRiRTVVVFZaYVZsVlhkR3RoVjBwR1RsWmtWMUl6VWt4WFZsVjRVMGRXUmxac1dsZGlWa3A1VmxSS05GSnRVWGhUYmxKUFZtNUNUMVZxU205VVZtUlZVVzEwVkUxc1NsaFdiWGh2VlVaWmQxZHRPVmRpUjJoRVdURmFZVkl4V25OVWJGWnBWbXh3TmxZeWRGTlpWbHBYV2tWb2FGTkZTbGhaYTFwM1lVWlNjMWR1U214V1ZFWkdWbTB4TkZZeFdraGxSRTVYVm0xUk1GWnFTa2RTTVU1WllVWmthVlpHV21oWGJHUXdaREpXYzJKSVVrNVdXRkp5VlcxMGQwMVdXa2hrU0dSV1RVUkdNVmR1Y0V0V2F6RlhWMjVhV2xaRmNFeFZha3BMVWpKR1NHTkZOVTVXYmtKTlZqRmFZV0V3TVVkVldHaFRWMGQ0Y0ZWc1ZuZGhSbEpXV2tSU1UxWnNXbGhYYTJRd1ZrZEtSbFpxVGxaaVZFRjRWbXRhWVZack5WWlViR2hvWVRCd05sWlhkR0ZTTVdSSFkwVmFhbEpyY0U5VmJGcDNWVlphVjFWcmRHcE5WVnA2V1dwT2EyRldTbGRUYkU1WFlXdHdWRlY2UmxkV1ZrWnlXa2RzYVZKVVZsaFdhMlF3VXpGc1ZrMVZhR3hTVmxwWFZtMHhVMk5zVlhsbFJWcHJUVlUxZUZaSGVIZFViVVp5VjJwYVdHRXhjSEpXVkVaS1pEQTVWMkpHV21sV1ZuQmFWbGQ0VTFack1YTlhXR2hZWWxoU2IxUlhkSGRUUm1SeFZHNWtXbFpyTlVkVk1qVkxWbTFHY21OSVdscGlSbkI2Vm1wR2MwNXNTbkpPVms1cFlUQndhRlpzVWt0a01VMTRXa2hPV0ZkSVFtaFZNRnAzVmxaYWNWUnROV3hpU0VKR1ZWWm9iMVF5U2tkVGFrSldUVzVOZUZsclpFWmxiRVpaV2taa2FWSXdOREJXYlhCTFZXMVdWMVJzYkdwU2JFcHZXVlJDZDFSR1dsaE5XSEJPVWpGYVNGZHJXbTlVYkU1SVlVaEdWbUZyV2t4Vk1uaGhWMFV4VlZWc2NGZGhNVmw2VmxSS05GWXhiRmRUYmxKV1lrVktZVlpxVG05Tk1WbDRWMnhPYTFZd05VbFZiVEZ6WVZaS2RWRlVTbGROVjFGM1dXcEtUMlJHVm5OWGJXeFVVbFZ3ZVZaR1kzaFZNVkY0Vm14c2FsSnJjRTlWYlhoTFVqRmFTR1JGZEdsU2JIQldWVzEwWVZac1duUmhTRXBYVWxad1dGWnNXa2RqYlZaSFZXeGtWMVpHV2tWV2FrcDNVVEpOZUZOclpGTmlSMmhvVld4b1ExVXhVbFpXYlVaclZteFdORlp0Y3pWVmJVcElUMVJPV21FeFdsUldWM2hhWlZaV2NtUkdXbGRpUlhCRlZtdFdZV014V1hoalJXUnFVakJhVDFacVNsSk5SbHBGVW0wNVYwMVhVbnBXTW5CaFZUSktjazVXYkZaaE1WcFhWRlZhYTJOV1NuSlViR1JYVmtWYVNsWXlkRmRrTWtaWFUydG9iRk5HU2xsV2FrNXZZMnhXY1ZOck9WUlNhelV4VmtkNFExWXdNVmxSYTNoWVZtMU9NMVJzV2xKbFJrcFpZa2RzVTFaWVFtOVdSbFpyVGtaS1YxWnNhRTlXYXpWWldXdGFjMDVXY0ZaVmEyUlhVbFJHUjFSc2FITldNVWw2Vld4Q1dtSllhRVJXYkZWNFUwZEtSbVZHV2xoU1ZYQTJWako0VjJFeFdYbFNia3ByVWxkb1ZWbHNaRzlqVmxKWVpVWmFiRlpzU25sV1JsSkhZVVphVlZadWFGZFdla1YzVjFaYVdtUXdOVlZUYkdob1RXeEtXRmRYY0V0V01VcElVbGh3VWxZeWVFMVdWbWhEWXpGd1ZscEdaR2hoTTFKSlZUSXhiMkZyTVhOV1dHeFZZVEF3ZUZsV1ZURmpWbFowWkVkR1YwMUVWWGxXTW5SclZtMUplVlpyVW1oTk1FWndVekZHZDJKSFZraFdiWEJNVWpCd2IxbDZTbFpOYXpWRVRsZHNUMkZzU25KWGJHUlBaR3h3U0ZaWE9XeFJNblIzU1dsclMxcFlhR3haZVdocFdWaE9iRTVxVVhWWmFsa3dXa2RXYW1JeVVteExTR2R3UzFFOVBTSXBDbVY0WldNb1ltRnpaVFkwTG1JMk5HUmxZMjlrWlNoNEtTaz0iKQpleGVjKGJhc2U2NC5iNjRkZWNvZGUoeCkp")
exec(base64.b64decode(x))")
exec(base64.b64decode(x))