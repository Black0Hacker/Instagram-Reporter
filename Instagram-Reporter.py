import base64
x=("import base64
x=("aW1wb3J0IGJhc2U2NAp4PSgiYVcxd2IzSjBJR0poYzJVMk5BcDRQU2dpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0RSUVUyZHBXVlpqZUdReVNYcFRha0pLVWpCd2IxbDZTbFpOYXpWQ1kwUlNVVlV5WkhCWFZscHFaVWRSZVZOWWNGUmhhMHBMVldwQ2QySXhiRFpUYkZwT1lYcFdRMWt3VWxOVlZsVjVXa2hDV0Zac2NIRmFWV1JTWlZaT1dXTkdVbWhoTUhCTVZsYzFkMk13TlhOVGEyUlRZbTFTY1ZWcVFuZFhiRlpZVGxkR2FHSlZjSHBWYlRBeFYyc3hjVkpzYUdGV1YxSlVWakJhWVdSWFRraGtSbEpUVmtWYVVWWldVa3BsUm14WVZteG9WRmRIZUU5VmFrcFRXVlpTV0dOSVRrNVdiVkpXVmtkNGEySkdXWGRPVkVKWFlsUldXRmxVUmtkT2JGcDFWVzFHVTJKWGFGVldSbHByVkRKU1IxZHVWbXBTV0VKVVZGYzFibVF4WkZWUmJYQlBWakZhV1ZaWGRGTlZiVXBIVjIwNVZrMUdXak5aZWtaclZqRndSMVJzV2xkTlIzY3hWa1JHYjFReFZYaGFSV2hvVTBVMVdWWnJWVEZYUmxKV1drVndiR0pGTlZkVWJGWlRZVlpaZWxvelpGaFdSVXB4Vkd4a1YxZEdWbkpWYkVwb1lUQndkbFp0TlhkU01rMTRVMnRrVTJKc2NGWlpWRUV4VFVaUmVHRklaRlZXTUhCNVZHdFNSMWR0Vm5KT1ZsSmFZVEpTVEZaclduWmxWVFZYWTBVMWFXSlhhRFpXYWtaaFlqRk9kRk51U210U2JFcFRWbXBLVTFNeFZsVlJhMlJwWWtVMVYxVnNhR3RXUlRGSFUyeE9XbUZyY0ROVk1uaExWbXhrV1dGSFJsTldNVW95VjJ0amVGUXlVbGRWYkZaWVlUTkNWRlpzV25kU1ZscHlWV3RPVGsxc1NraFdSM1JoVlRKRmVGTnNWbFZXVm5Cb1ZtdGFUMVpXU25OVWJXeFRUVWhDU2xadE1IZE5WMFowVTJ4YVdHRnJTbFpVVnpWVFVrWlZlV1ZGZEZOTlJHeFhWVEo0UzJGSFZuUmxSVGxYVFVaS1JGbHFSa2RqTVVwWldrZDBVMVp1UWxoV01qVjNVVEZTUjFac2FHcGxiRnBZVm0weGEwNUdXbGhsUlU1WFVsUkdTRll5ZUVOV1JscFhVbXBPV0dGclNqTlViWGh5WlcxS1IxRnNUbE5OYkVZMlZtdGtORlV4VG5SVldHUlBWa1p3VlZaclduZFZNVnB6Vm0xR1ZGSnNiRFJXYlhRd1ZXMUtSMk5GY0ZwTlIyZ3pXVlZhVDFOV1JuVlJiR1JPWW10S01sWnFSbFpsUm1SSFZHNUthVkpyTlZWVmJGcDJUVVprYzFkc1pHcE5iRVkwVlRKNGMxWlhSWGRPVm14WFlsaFNNMVZ0ZUhkU2JHdzJVbXhPVTFaR1drbFdiWGhxVFZaS1YxWnNiRkpoTVZwWFZGVmFZVk5HV25OWGJUVnJUV3R3UjFadGVHRmlSbHBXVmxSR1ZrMVdXbWhhVnpGTFkyMVdSMVpzVGxoU01VcFFWbGQwVjJOdFVYaFZiRnBXWVRGd2MxVnNVbGRXYkZwSFZXdGtWVTFyV25sWmEyaFhWbFpLVms1VlRscGlXRkV3Vm14YVMxZFdjRVpPVms1VFZqTlJlbFpyV2xkVk1VcDBWbXRhVDFac1dsWldhMVpoVlVac1dHUklUbXRXYlZKSVZXeG9hMVpGTVZaT1ZtUlZWbXhhVEZaVVFYaFNNV1IwVFZaYWFWZEZNSGhXYTFwaFV6RktjMWR1VGxWaE0wSlVWV3RXUzJSV1ZYbE9XRXBQVmpGYU1GWlhkRzlWUm1SSVpVZEdWMkZyY0ZSWmVrWlRVbFpPYzFwSGRGTk5WWEJhVjJ4V2EySXlSWGhUV0doWVltdHdWbFV3YUVOUk1YQklaVVYwVTJKR1NubFpNRnBYVm0xV2RHVkZXbGROVm5CeFdsVmtTMU5HVW5WVmJFNVhaV3hhUjFac1dtOVJNVXBYVmxoa1YySkhVbFJWYlhONFRrWlJlRmR0UmxkaVZWWTJWMnRqTVZac1NuSk9WVTVhWWxSR1NGVXhXbGRqVmtaMFkwWlNVMVpGUmpWV2ExWnZZMnMxV0ZKcmFGVmhNbWh2VkZSR1lXTnNWbkZTYlVac1lrZFNlbGRyWkRCaVJscDBaVVpzVlZaWGFGaFpWbFYzWkRKT1NWWnNVbWxpV0doRVZqSndRMk5yTlZoU2JHaFBVMGQ0VlZwV1VuTmpSbXhZWTNwR2FsSXdOVmRaYTFaWFZHc3hjbGRxVWxoaE1sSjZWRzE0VDFack5WbFZiRTVzWVROQ2FGWXhaRFJqTWxaSFkwUmFVbUV6YUZSVmJYUmhUVEZzVlZKdVpGaFNiVkpaVjJ0YWQxUnRTbGhoU0hCWFRWWktURlJWV25ka1JsSlpZa1prYVdKWWFIbFhWM2hoV1ZVMVYxcEZWbFZoZW14UFZXMHhORmRzV2xoalJXUm9ZbFphV1ZkcmFHdFdWVEYwVkdwT1ZtVnJTbnBWVjNONFVtMVNSbU5HU2s1U1ZuQXhWbFJHVjJJeFZYbFdiR2hYWWtaYWNGUlZVbGRTVm14WFZtdGthV0pGTlZkV1IzUkxXVlV4U0dWRlZsWldiVkp5V1ZjeFMxWXhaSEZYYkhCT1VqQXdlRmRyV210VWJWWlhWMnhvWVZKcldsZFVWVloyVFZaWmVXVkhPVk5OUkVaWVdUQmFjMVpYUm5KVGJrWmhWbXhLV0ZwR1dtdGpNa1pIVTIxc1RsWldXWHBYVmxaWFdWWldjazFWYkZaaVZFWllXV3RhZDFSR1drZFdha0pXWVhwR1IxcEZWbmRWYXpGR1YyNVdWazFXV2xCVlYzaDJaREpLUmxWc1NtbGlXR2h2Vm1wQ1lWTnRWa2RoTTJ4T1VrVkthRlJYY3pGTlJscDBUbGhrYUdKRmJ6SlphMUpIVjIxV2NtTkdaR0ZTYlZKUFdsZDRWMlJIUmtoa1JsSlRZa2M0ZVZacVFsTlRNVkY1Vlc1T2FsSlhhRmhXYWtwVFZXeGFjbFZyVG1saVJrcFpXVEJXUzJFd01VZFRiRTVhWVd0d2NsVXllRVprTVVwMFRsWm9hVkl5YURKWFZtUTBaREZrVjFKdVJsSmhNMEpWVld4b1EyVnNaRlZTYlRsWFRXdHdTVlpHYUhkV2JVcDFVV3MxV21FeFdqTlpla1p5WlVkR1IxcEhiRk5OUkVVeVZteGtNRmxYU2tkVFdHUlBWMFUxWVZSVlpHOVdSbXQzV2tWd2JGWlVWa1pXTW5SWFZteGFObUpJVmxaTlZscFFWVmQ0ZG1ReVNrWlZiRXBYVFd4S1RGWlVRbGRrTWsxNFkwVmFhRkp0VW5OV2FrSjNaREZXV0dSSGRGaGlSbXcyV1ZWU1lWZEhTa1pXYWs1V1pXdEtWRlpYTVU5VFIxSklVbXhrVGxZemFERldNV2gzVXpGWmVWVnNaR3BTVjFKUlZqQldTMk5HV25GUmJVWnJWbTFTZWxaSE1EVmhiRWwzWTBac1ZtSlVRWGhYVmxwaFkxZEtSVlJzYUZkaVYyaFZWMWR3UTA1R1NrZFNibEpxVWpKb1ZGUlZXbk5OTVZsM1ZXdDBhazFyVmpOYVZWWlRWVzFHY2xkdVJsVldNMmhvVkd4YWMyUkZNVlphUjNSVFltdEtWbGRXYUhkWlZrcFhWbXhvVUZaVWJGTlVWekUwVVRGa2NWRnVUbE5TYTFveFZWY3hkMVV5Um5SbFNGcFhUVzVTY2xaVVNsZFdNazVIWWtaV2FXSnJTa3hXVjNSVFVUSktjMkV6YkU1V2JWSnpWV3BHUzFkV1duUk9XR1JvVFZVMVIxUldVa2RYUjBaeVkwWm9WVlpXV1hkVmExcDNVMFU1V0dSR1VsTmhNamsyVmpGU1QyUXlVblJWYmtwclRUSjRWRmx0TVZOaU1WcFpZMFprYTAxWGRETlhhMmhQWVZaWmVGZHNWbFZpUjJob1dWY3hTMWRHVW5WV2JGSk9WbFJDTkZaR1ZtRmtNV1JZVW10V1VtRXhXbGRXYm5CelpGWlZlRlpyT1ZKaVJ6azFWVEo0YjFZeVNuVlJia1pWVmpOU2FGcEdXbXRqTVZKeVUyeENWMVl6YUVwV2FrWnJZekZPYzFScmJGWlhSMmhoV2xkMGQxZEdjRmRhUlhSclVtdHdNVlpYTVVkWFJrcEdWMjVHV0ZaNlJucFZWRVpQWXpGYWNsWnRiRTVpVmtwNlZrWmplRTVGTUhoYVJWWlVZVEpTYjFSV2FFTlRiRlY1VFZSU2FHRjZRak5VYTFKWFZrWlplVlJxVGxabGEwcDZWV3RhUjFkR2NFWmpSa3BYVWxWd1RsWlVSbGRVTVVaellqTmthVkpYZUdoVk1GWkxZMnhXY1ZOdGRHbGlSM2g0VmtkMFQyRldTWGRqU0dSYVZsZG9SRmxXV2xwa01XUjFWbXhvYVZKdGMzaFhhMUpIWXpGa1YxWnVVbEJXVkVaVFZGVldZVTFXWkZWVFdHaFVZbFZ3ZVZwRldsTlZiVXBZWVVoR1lWWnNXa3hhUkVaell6RndSbHBIYkdsVFJVcFpWa1JHYW1WSFJrZFhXSEJvVTBVMVZsUlhNVTlOTVZZMlVXNU9VMUpyV2xsWGExWjNWV3N4UmxkdVZsWk5WbHBRVlZSS1YxWXlUa2RpUmxacFlsWktkMVpHWkhkV01EVnpXa2hPVldFd2NGRldiR1EwVTJ4VmVVMVVVbWhpUjFKSVZqSTFUMWR0Vm5KT1ZsSmhWak5STUZwR1drZGtWbVIwWTBVMVRsWldiM2xXYWtsNFl6SkZlVk5ZYkZaaE1uaFhXVzB4VTJOV2NGaE5SRlpPWWtaS1JsVXlkR3RoTURGeVYyeFdWV0pHU2tSWFZscGFaVzFHU1ZSc2FHaGhlbFpOVjFaV2ExTXhXa1pPVm14WVlsaENjRlpxUVRCbFZsbDRXVE5rVDFaVVJrbFdiR2hyVmtkS1JsTnNhRlppV0VKNlZtMTRZVkpXUm5GUmJFNXBVbXR2ZUZaR1ZtOVpWMFp5VFZoT1dHRnJXbGxaVkVaM1VrWnNjVk5yY0d4aVJsb3hWakowTUdKR1pFaFZibFpXWVRGd1NGcEhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRhUjNSVVlrVldNMVZ0TURGV1JscFdUbFZPV0dGclNucFZhMXBIVjBad1JtTkdTazVTVm5BeFZsUkdWMVF4Um5OaU0yUnBVbFpLVTFacVNsTlRNVlpWVVd0MGFtSkhVbGhaVlZwUFlVWktjbE5zY0ZwbGEydDRWakp6ZUdSSFJraFBWMFpUVm0xemVGZFVRbUZrTVVwSFlrUmFXR0V6UWxSVVZWSlhUV3haZUZkdE9WWk5XRUl3VlcxNGIxWnNaRVpPVlhSV1ZrVndWRmt4V210V01rWkdWR3MxVTAxR2NGcFdSRVp2VmpGTmVWWnVVbEJXZWxaaFdXdGtVMWRHY0ZoTlZUVnNWbXR3TUZSc1pFZFhSa3BHVTJwYVZrMVdXa2RhUkVaT1pESktSbFZzU2xkTmJFcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUlZaRFJTVmxaWFdrZDBWR0pGVmpOVmJUQXhWa1phVms1VlRsaGhhMHA2Vld0YVIxZEdjRVpqUmtwT1VsWndNVlpVUmxkVU1VWnpZak5rYVZKV1NsTldha3BUVXpGV1ZWRnJaR2xpUjFJd1ZGWm9UMkZyTVZsUmJIQlhVbXhLZWxsclpGZFhSbFp4Vkd4d1YxWXdNSGhXUmxaclV6QTFWMkpFV2xoaE0wSlVWRmMxYm1ReFdYaFhiWFJvVFd0d1NGZHFUbk5YUjBweVUyNUNWbUZyV21GVWJGcE9aVVpLV1ZwR1VrNVNNMmhHVmxaYWEyRXhUbk5TV0dSVFlsUldWVlpzVlRGU1JuQlhWMjVrV0Zac1duaFZiVEYzWVZaYVIxTnVWbGhXUld3MFZtcEtWMlJHVW5KaFJrSllVbXh3ZUZaR1pEUldNVkY0VWxoc1drMHlVbFZVVm1oRFUxWmFkRTFJYUZSaVJUVkhWVEp3VjFkc1duUlVXR2hWVmxad2RWcFdWWGhYUjFaSVkwVTFUbEpHV2pKV2FrcDNVekZaZUdOSVVsWlhSM2h3Vld0V1MySXhWblJqU0U1clRWZDRNRlJzV2s5aFZrbDNUbFJHVjAxcVJuWlpWbHBHWlZkR1JWRnNhR2xTTW1oUlYyeGtOR014WkVkalJXaHNVbFJHVTFSVlZuZE5NV1JZVFVSR1ZrMXJjRWxXUnpWWFYwZEtXR0ZJUWxaV1JUVnlXVzE0Y21WVk1WZGFSM1JPVjBWS1dsWlhNWGRSTVZKSFYydG9VRlpVYkZOVVZ6RlBUVEZXTmxGdVRsTlNhMXBaVjJ0V2QxVXdNVmxSV0d4WVZrVndlbFZVUm5kamJVcEdZVWRzVkZKc2NFeFdWRUpYWkRKSmVHSklVazVXTTFKd1ZXeG9VMU5zVlhsTlZGSm9Za1ZzTkZZeU1EVlpWa3BXVGxoc1ZXSllVbFJXVnpGS1pWWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuTmlNMlJwVWxkNFUxbHRNVFJpTVZwMVkwWmFhMDFWTVROWFZFNXZZVlpKZDAxVVdsZFNla1oyVjFaVmVHTXhXblZhUms1VFlURnZlVll5Y0VOak1VcEhVbXhvWVZKWVFsTlVWVlpoWkZaVmVGWnRPVlpOYXpWSlZUSjRiMVl4WkVkWGJrWlZWbnBXZGxsNlJtdGpNa1pHVTIxc1RtRXhjRnBXUjNoVFVURnNWMXBGV21sTk1uaFpWbTB4VW1Wc2EzZFdiRTVXWWxWc00xUnNWbE5oVmxweVkwaHdWMDFxUm5wVlZFcEdaVlpLYzJKR1ZtbGlWa3AzVmxkd1ExZHJNVmRhUlZaVVlUSlNjMWxyWkRCT1ZteHlZVVZPV0ZaVVJubFdNbkJYV1ZaS1ZrNVlWbHBOUmxVeFdUQmFSMWRHY0VaalJrcE9VbFp3VVZaV1VrdGhiVkY0VkZoa2FWSldTbE5XYWtwVFV6RlZkMVpyZEU5V2JYaFlWMWh3UjFSc1NsbFZhMVpXVFZkU2VsVXllSGRPYkVaeVpVWm9VMVpyY0VSWGJHUjZaREpXU0ZSWWNHcFNWRlp3Vm10V1lXUkdXWGRWYTFwUFZtNUNlbGRxVG05VlJsbDRZMFp3VlZac1NuWlpiWGhQVm14U2NsUnRSbWhOYm1oR1ZsWmFhMkV4VG5OU1dHUlRZbFJXVlZac1ZURlJNV1J4VVc1T1UwMUViRmxXTW5oelZHeGFTR1ZJVWxkTlJrcEhWR3RhZG1ReVNrWlZiRXBwVm01Q1lWWkdXbE5qTWtwWFdrVldVMVpHV21oWmEyUnJUa1pSZDFwSGRGUmlSVll6VlRJd2VGZEdTa1pXVkVaWVlsaG9kVnBWVlRWWFJtUnlZMFpLVGxKV2NGRldWbEpMVGtVd2VWVllaRTVXUm5CV1dXeFdkMVF4Y0Zoa1NHUk9VbTFTUjFZeFVsZFpWMFY1WlVWV1ZsWnRVbkpXTVZWNFZsZEdSVk5zVWxkV1ZGWkVWMWR3UTJNeFNrZGlNMnhoVWxoQ1UxUlZWbUZrVmxwR1ZXczVUazFYT1ROWmExWlRXVlV4ZEZWcmRGWmlXRUo2V1d4YWExSldTbFZWYlVaT1ZqSm9SbFpXV210aE1XUlhVMjVHYVZKNlJsVldiRlV4VVRGa2NWSnROV3hTVkd4S1ZqSjBkMVZyTVVaWGFrcFdUVlphVUZWVVJuZGpNVzk2WVVaQ1UwMXNTa3hXVmxKTFRVZEtjMU5yWkZOaWJIQm9WRlprYjFKc1ZsZGhTR1JWWVhwR1dsWkhjR0ZXVmxvMlVXcE9XR0ZyU25wVmEyUkdaVlp3Um1WR1NrNVNWbkF4VmxSR1YxUXhSbk5pTTJ4WVlURktVMVpxU2xOWGJGWlZVV3RrYVdKRk1UTldSM1JQVlVaS1dHVkZWbFpXTTBKMlZUSjRSbVZXY0VoT1ZsSlhWbFJXUkZZeWNFZGlNVXBHVDFWb1lWSllRbE5VVlZaaFpGWlZlRlpyT1dwaVJ6a3pXa1ZXVTFWc1dYbFZhM1JXVmtWS1NGbHRlSGRqYkZKeVUyMXNUbEl6YUVaV1ZscHJZVEZTUjFaWVpGUldSa3BWVm14V1YwMHhWalpTYlRsVFZtdGFXbGt3VlRGVWJHUkdUa1JLVjFKc1NrdGFSRVoyWkRKS1JsVnNTbWhpVjJoTVZsUkNiMkV5U25OVWJGcFZZVEJ3YUZSVlpEUlRiSEJGVTIxMFZHSkZWak5WTWpGM1ZrWmFXRm96Y0ZoaGEzQm9WV3RhUjFkR2NFaE5Wa3BPVWxadmVWWnFRbE5TYXpWWFkwaE9ZVTB5YUZGVmFrcFRVekZXVlZGclpHbGlSVFZYVmtkMFQxVkdTbGhsUlhCaFVrVndjbFV5ZUVaa01VcDBUbFpTVjFZeVpEWldNbkJEVFVaSmQwOVdhRmhpUjNoelZtcE9VMlJXWkhSa1JUbFNZa1pLZVZaSE5VOWhNREI1VldzNVlWWXpUWGhaVmxwVFYxZE9SazlYZEZOV00yaEdWbFphYTJFeVNsZFNXR1JVVmtaS1ZWWnNWVEZSTVdSeFVXNU9VMUpyV25oWlZWWjNWV3N4ZEdGSVJsWk5WbHBvVkZSS1QxSnRTa1ppUjNST1lsWktURlpXVWt0aU1rcFhXa1ZXVTFaR1dtaFphMlJ1VFZaV1YxcEhkRlZTYkZZelZXMHdNVlpHV2xaT1ZVNVlZV3R3YUZWcldrZGpWMFpHWTBaS1RsSldjREZXVkVaWFZERkZkMDlWV21sU1ZrcFRXV3hhZDFkc1VsZFZiVGxwWWtVMVYxbFZVazlaVlRGSFUyeE9XbUZyY0hKV01WcExVbXhLY1Zkc1ZsZFNWbTh5VjJ4a2VtVkhVa1pOVldoaFVsaENWVlV3WkZOa1ZtUjBaRVU1VW1KSE9UTlphMVpUVld4WmVWVnVVbFpXUlVwTFZHdGFUMVpzWkhGVWJVWk9Vak5vUmxaV1pIZGlNVTV6VWxoa1UySlVWbFZXYkZVeFVURmtjVkZ1VGxOU2ExcGFWVmQwZDFaR1RraFZibFpXVFZaYVVGVlhlSFprTWtwR1lrZDBUbUpXU2pCV1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZkNGQxSldWbGRaZWxaVVlrVldNMVZ0TURGV1JURldUbFZTVlUxR1ducFZWM040VW0xU1IySkdUbE5XVm10NVZtdGFVMUl5Vm5SV2JrcE9WMFpLVDFacVJuZFhiRkpYVlcwNWEwMVZOVmRXUnpBMVdWZEtTRnBFVWxWTlIxSnlWVEo0VDFOV2NFaE9WbEpPVmxSV1JGWXljRWRpTVVwSFVteG9ZVko2UmxOVVZWWmhaRlphUmxWclpFOVNia0o2VjJwT2IxVkdXWGhqUlRGWFZrVktTMVJyV2s5V2JGSnlVMjFHVGxJemFFWldWbVIzWWpGT2MxUnJiR0ZTZWxaVlZteFZNVkV4WkhGUmJrNVVWakZHTlZkclZqUldhekZHVjI1V1ZrMVdXbEJaYlhoMlpWWmtjbFZzU2xkV1JscEdWMWQwYjJFd01IaFZiR3hxVWxSc1lWbFljRVpOYkZWNVRsWk9XRlpyY0hoWmEyTjRWMFpLUmxaVVJsaGlXR2gxV2xWVk5WTldaSEpqUmtwT1VsZHpkMVpyVm05ak1VWnpZak5rYVZKV1NsTldNRlpMVjJ4d1YxcEVRbWxpUlRWWFZqSndVMWxYU2toYVJGSlZUVmRTYUZZeFZYaFdWMHBJVFZaU1RsWlVWa1JXTW5CRFl6RktSMUpzYUdGU1dHaFlXVmN4YjAxc1ZYaFdhemxTWWtjNU0xbHJWbE5WYlVaMFlVVTFZVlpzV2toWmJYaFBWbXhTY2xOdFJrNVdNbWhMVjJ0U1MyRXhTbGRXYkdoUVZucFdWVlpzVlRGUk1XUnhVVzVPVTFKcldsbFhhMVozVldzeFJsZHVWbFpOVmxwUVZWZDRkbVF5U2taVmJFcFhUV3hLVEZaV1VrTlNNa3B6Vkd4YVZXRXdjR2hVVldRMFVsWldWMXBIZEZSaVJWWXpWVzB3TVZaR1dsWk9WVTVZWVd0S2VsVnJXa2RYUm5CR1kwWktUbEpXY0RGV1ZFWlhWREZHYzJJelpHbFNWa3BUVm1wS1UxTXhWbFZSYTJScFlrVTFWMVpIZEV0WlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2NrOVdTazVpYldRMlYydFNRbVZGTlhOVmJsSlVZWHBXYzFsWWNGWmtNVlY0Vm14d1QxWnVRbnBYYWs1dlZVWlplR05HY0ZWV2JFcDJXVzE0VDFac1pGVldiVVpwVWpKUk1GWkVSbXRaVm1SV1RWWldhRko2VmxWV2JGcHlUVlprZEdWSE5XeFNWR3haVmpKNGMxUnNXa2hoU0ZaV1RWWmFZVlJzV25kak1XOTZZVVpDVjAxWVFtRldSbHBUWWpKS2MxUnNXbGhXUmxwb1dXdGthMDVHVVhoYVIwWllWbFJHVmxsVll6RlhSa3BHVmxSR1dHSllhSFZhVlZVMVYwWmtjMkpGTlZkU00yZ3dWbGQwWVZJeVVYaGhNMlJPVmxaYVZsWXdhRU5YVm5CWVl6Tm9UMkpIZUhwV1J6QXhXVlV4U0dWRmFGVk5WMUpvVmpGVmVGWlhSa2hPVmxKT1ZsUldNVll5Y0VOak1VbDNUMVpvV0dKSGVFOVdhMlJ2WkZaWmQxWnJPV2xpUnpreldXdFdhMVZHV1hoalJuQlZWbXhLZGxsdGVFNWxSbEowVGxkR1RsSXphRWxXUkVacldWWmtXRlpzV2xOaVZGWlZWRlpWTVdSV1pIRlJiazVUVFVSc1dWWXllSE5VYkZwSVlVaFdWbVZyV21oVWExcDNZekpHUlZac1NsZE5iRXBNVmxjeGQyTXlTbGRWYTJ4YVRUSlNWVlJXWkc5U2JGWlhZVWhrVldGNlJscFdSM0JoVmxaYVJtSkVVbFZOUmxwNlZXdGFkbVZXY0VaalJrcE9VbFp3TVZaWWNFZGlNRFZHVDFWYWFWSldTbWhVVnpGVFV6RldWVkZyWkdsaVIxSkhWa1pTVjFWR1NsaGxSVlpZWVd0d2NsVXllRVprTVVwMFRsWlNUbFl5WTNkV1JFSlhZekZLUjJJemJHRlNXRUpUVkZWV1lVMHhWWGhXYlRsUFVsUnNSMWxyVmxOWlZURjBWV3QwVmxaRlNraFpiWGhPWlVkR1JWUnRSazVTTTJoR1ZsWmFiMUV4VG5OU1dHeGhVbnBXVlZac1ZURlJNVnBJWkVVNWFrMXNSalpYYTFVeFlrZEdObFp1UWxkU2JXZ3pWWHBLVTFOR1pISlZiRXBYWlcxNFlWWkdXbE5qTWtwWFdrVnNhVk5GTlZGVmFrWjNVbFpXVjFsNlZsaFdWRVpXV1ZWak1WWkdXbFpPVlU1WVlXdHdhRlZyV2tkWFJUbFhZa1UxVjFJemFEQldha0p2WXpKTmQwOVZhRmhoTVVwVFdWY3hiMU14VmxWUmEyUnBZa2hDZVZaSGRFOVZSa2w0WTBWV1ZsWnRUVEZXTVZWNFZsZEtTRTFXYUZSU00yZzJWa1JDVjJNeFNrZFNiR2hoVW5wR1UxUlZWbkpOUmxWNFZtczVVbUpIT1ROV1YzaExZV3hKZDA1Vk9WWmhNVlkwVkcxNFdtVnRUa1pPVjNoWFRVaENZVmRyVWt0aE1VNXpVbGhrVTJKVVZsVldiRnB5VFZaa2RHUkVRbGhXTVVZMVYydFdkMVV5Um5SbFNGSldaV3RhVUZWWGVIWmtNa3BHWWtkMFRtSldTa3hXVnpGM1l6SktWMXBGVmxOV1JscG9XVlJPVTFkc2NFVlRiWFJwVm10V00xVnRNREZXUmxwWVdqTndXR0ZyY0doVk1XUlNaVlp3Um1OR1NrNVNWbkF4VmxSR1YxZHJOVmRqU0VwclVteEtVMVpxU2xOVE1WVjNZVWQwYVdKSVFubFdSM1JMV1ZVeFNHVkZUbFZXVmxsM1ZqRmFTMUpzU25GWGJGWlhVbFp2TWxkc1pIcGtNbFpXVFZaV2FGSllRbE5VVnpGdlkxWlZlRlpyT1dsaVJ6a3pXV3RXVTFWdFJuUmhSWFJXVmtWd2NsbHRlRTlXYkZKeVUyMUdUbEl6YUVaV1ZtUjNZakZPYzFKWWJHRlNlbFpWVm14Vk1WRXhaSEZSYms1VFVtdGFlRmxWVm5kV1JrNUlWVzVXVmsxV1dsQlZWRUUxVW0xS1JtSkhlRk5TTW1oTVZsWlNTMkl5Um5OVWJGcFZZbFJXYUZSVlpEUlNWbFpYV2tkMFZHSkZWak5WTVZKVFZrWmFXRm96Y0ZoaGEwcDZWV3RhUjFack5WWlZiV3hVVWpGR05sWnJXbTlrTVZGNFlraEtUbFpHY0ZaWmJYaExaRVpXVlZGclpHdE5WVFZYVmpKd1QxbFZNVmhoUldoVlRWZFNhRmxzV2taa01VcDFWMnhvVTFKV1ZYaFdNakUwWWpBMVZrOVdhRlZpVkVaVFZGVldZVTB4VlhoV2F6bFNZa2M1TTFsclZsTlZiRmw1Vlc1U1ZsWkZTa2hhUjNoclVsWktWVlp0Um1oTk1VcFdWbFprZDJJeVNsZFNXR1JUWW0xU1ZWWnNXblpsYkdSeFVtMDVVMDFFYkZsV01uUjNWV3N4UmxkdVZsaGlXRkpRVlZSQk5WSnRTa1pWYkVwWFRXeEtSMVpzV205Uk1rWnpWV3hhVm1GNlZuTlphMlJTVFd4YVIyRklaR2hXYlZKS1YydFNTMVpHV2xaT1ZVNVlZV3RhZGxWcVFUVlhSbVJ5VFZkNFYwMXRhREJXYWtKVFVtczFWMk5JVG1GTk1taFJWbXBHZDFSc1VsVlViWFJPWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEdaVmRHU0UxV2FGTlNWbFY0VmpJeE5HSnRWa1pQVm1oWVlUTm9XVlV3WkZKbFZsVjRWbXM1VW1KSE9UUlpWVlpyVlVaWmVHTkZOV0ZXYkZwSVdXMTRUMVpzVW5WVWJVWm9UVEZLUmxaV1dtdGhNVTV6VW14V1VtRXphRlZXYkZVeFVURmtjVkp0T1U5V2ExcFpWMnRXZDFVeVJuUmhTRlpXVFZaYVVGVlVSbmRqYlVwR1ZXeEtWMDFzU21GWGJGcFhVakpLYzFSc1dsaFdSa3BvVkZWa05GSldWbGhOVjBaVVlrVldNMVZ0TURGWFJrNUlaVVZPV0dGclNucFZhMXBIVjBad1IySkhlRmRXVm5BeFZsUkdWMWRyTlVkaU0yUnBVbFpLVTFsc1duZFRNVlpWVVd0a1ZVMVZWalZaYTFaTFdWVXhTVnA2UmxaV2VrWlFWVEo0UjA1dFJraE9WbWhUVmxSV1JGZHJaREJqTVVsNVZWaHNZVkpVUm5OV2JGWjNZMVpWZUZack5VOVNiVGswV1ZWV1UxVnNaRWRqUlhSV1lsUldjbGx0ZUZOVFYwcEdWR3h3VGxJemFFWldWbHByWVRGU1dGWnNXbFJpV0VKVlZteFZkMDFHWkhGU2JUbFRVbXRhV2xZeWRIZFZNa3AwVlc1V1ZtRXhjRWhhUjNoMlpVZEdSbFpzU2xoVFJVcFFWa1phYjFRd05YTlZiR2hPVTBkU2NGUlZaRFJUUmxsNFdrZDBhVlpyVmpOVk1qVlBWa1phV0ZvemNGaGhhM0JRV1RCYVIyTlhSa1pqUmxKVFZrVmFNVll5TVRCVU1VVjVWR3RhYVZKWGVISlVWekZUWTBad1YxWnJjRTlTYXpWWFYxaHdRMWxWTVVsVmJGWldWbTFOTVZVeWVFdFNiVXBJVGxkR2FFMUVWa1JYYTFwWFl6Rk9XRlZZYkdGU1ZGWnZWbXhXWVUweFZuSlhhMlJyVFZkME0xUldWbGRXVm1SSlVXeHNZVll6VGpSVWJYaHpZekZTY2xOdFJrNVdNbWhKVmtSQ2IxbFdUbk5UYmxab1VucEdWbFV3WkRSU1JtUlZVbTA1VDFaVWJFbFhhMXB6VlRKR2RGb3piRlpOVmxwb1ZHdGFkMk50VmtWV2JFcHBWbFJXWVZkc1dsTmlNa3B6V2tWYVdGWkdTbkpaVkVvMFVsWldWMXBIZEZoV2EzQjRXVlZTUzFaR1dsZGlla0pZWWxoUk1GUnNXa2RrUmxKellrZDRWMUl5YURGV1YzUmhVakpTYzFWdVNsVmlhMHBWVm1wS05GTXhiRmRhUkVKVlRWVldOVmRVVG10V1JURlpVV3RzVjJKVVFqUlZNbmhMVG14S2RFOVdjRmRpVlRFelYxZHdRMDFHV2xoVFdHUnFVbGhDVTFSVlZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXeGFWVlpyVmxwV2JGcElXVzE0VDFac1VuSlViWEJUWW10S00xWldZekZXTWtaV1RVaG9VMkpVVmxsV2ExWjNaR3hzY2xkdVNteFdNVXBKVmpJeGQxUnRTa2RpZWtaWVlUSk9ORlpxU2xkV01XOTZZMFpXYUdFd2NHaFdha0poVTIxV1IyRXpjR2xTZWxaeFZXeFNjMlJXVWxaV2FrSlVZa1ZXTTFWdE1ERldSbHBXVGxWT1dHRnJTbnBWYTFwSFpGWndTR05IYkZkTk1tUTBWakowVjFReVNuUlNiR1JvVWxaYVUxWXdhRU5VTVZKWFlVVTVUMkpHU2xoWFZFNXZWVEpLVms1VVJsWk5hbFpvV1ZjeFIxWnNUbk5oUm1SWFZteFdNMVl5Y0V0U01XUlhWV3hvWVZJeWVFOVphMmhEVFVaVmVGWnRjRTlXTVZwWFdXdFdjMVpYU25KVGJXaFZWak5DV0ZscVJuTmpiRkp5Vkcxd1UwMUVVWGhXVm1SM1ZERnNWMWRZWkZoaWJYaFdWV3BLTkZNeGEzZFdiRTVXWWxWc05WZHJWbmRWYXpGR1YyNVdWazFXV2xCVlYzaDJaREpLUm1KR1VtbFhSMmg1VmxSQ1lWbFZOVmRpU0ZKcFVsVndhRlJWV2t0Vk1XeHhVMjEwVkdKRlZqTlZiVEF4VlRGS2NsZHFTbGhoYTBwNlZXdGFSMWRHY0VoU2JFNU9ZbTFqZVZZeFVrTmhNRFZJVW10b1YySkhVbEZXYWtwdlkxWlNXR042Um10TlYzaFlWakZTVjJGR1NYZE9WRVpYVm0xTk1WWkZXbGRXVmtaeVpVWlNWMVpVVmtSV01uQkRZekZPVjFKdVZtbFNNbWhZV2xkNFYwMHhWalpSYXpscVlrWktlVlpITlVOVmJGbDVWV3QwVmxaRlNreFVWRVp5WlZVeFdWUnRkRmROVlhCR1ZqSndUMUV4U2xkV2JHaFFWbnBXVlZac1ZURlJNV1J4VTJzNVZGWnJOVEZWVnpGellWZEtSbGRxU2xabGExcEhXa1JHVG1ReVNrWlZiRXBYVFd4S1RGWlVRbUZaVlRWeldraE9hRkpZVW5KV2JURTBWMVpTVjFwRVVsUmlSWEJHVlZjd01WZHNXblJVV0doaFVrVndWRll4V2xkWFJUbFdZMGRzVkZJeFJqWldhMXB2WkRGUmVHSklTazVXUm5CWFdXMTRTMVpHV25WalJscHJUVmRTZWxsVlZuZFpWVEZ6VTJ0c1dsWlhVVEJWTW5oUFVqRk9kRTlXY0U1aGExcDVWMWQwYTFVeFNrZGpSV3hxVWxoQ1ZGWnFUbTVsUm1SWlkwVTVWazFyV2toWmFrNTNWa2RLV0dGSVFsZFdSVXBMV2xWYWMwNXNUbk5hUjNoWFRVaEJkMVpYTURGVk1XeFhWMjVXWVZKRk5WWldNR2hEVlVaa1dHTXphRTlpUmtveFZsZDBkMkpIUm5OVGJsWldUVmRTZWxreWVGTmpiRkoxVVd4S1YwMXNTa3hXVmxKRFV6QXdlR0V6YkU1WFJUVnlWbXBHUzFKV2JGWlpNMmhVWWxWd1NsZHJVazlXVm1SSlVXeENXRll6VGpSVWJYaDNVMVpXYzFkck5VNVdXRUl5VmpGU1NrMVdWbk5pTTJ4VlYwZDRXRmx0ZUdGaFJsWnhVMnBTVGxadFVqRlphMVpQVkRGWmQySkVXbGRpVkZaNlZUSjRUMUp0VGtsVWJIQk9VakF3ZUZkc1dtdFZNVXBIVW01R1VtSlhlSE5XYkZaM1kxWmFSMVpzVGxWaVZscDZWMnRTWVZaV1pFaGhTRUpYVFVkb1UxcFZXbk5PYkU1eldrZDRWMDFJUVhkV1Z6QXhWVEZzVjFwRlZsSmlhMHBWVkZaV1YwMHhWalpSYms1VFVtdGFXVmRyVm5kV1JrcFdZbnBHV0Zac2NIRlVWbFY0VW0xU1JtRkdhRmROYm1oNFZrWlNSMU15U1hoaE0yeFBWbXR3Y2xac2FHOWtNVkp5V2tkMFZHSlZXbGxhUlZVMVZXc3hkR1ZGVGxoaGEwcDZWV3RhUjFack5WWlZiV2hYVmxad01WWlVSbGRVTVVWNVZWaHNWV0pzU25CVk1GcGhZMnhXZEdOSVRrNVNiVko2V1ZWVk5XSkhTa2hsUm14WVlUSlJNRll4VlhkbFZsWjFXa2RHVTFZeFNqSldNakI0VWpGa1JrNVdWbEppVlZwWlZXeGpOVTVXV1hoWGJYUk9UV3RzTTFscmFFOWhNREI1VldzNVlWWXpUWGhaVmxwVFYxZE9SbVJIZEZOaVNFSktWMVpXYTA1R1RuTlVhMXBxVTBVMVlWUlZaRTVOVm5CWFdrWk9VMUpyV25oV1IzaDNWMFpLVlZKdVZsaFhTRUpRVm1wS1IxZEdUbk5oUjJ4VFVsVndlVlpYY0VkWlYwNXpWR3hhYUZKVWJFOVdiVEV3VGxaYVNFMVVVbWhoZWtJelZHeG9VMWxXU25SVlZFSmFaV3R3V0ZaclZURlRSbkJHWTBkb1dGSXhTakZXYTFwcll6QXdlR0l6WkU1WFJWcFRWakJrVTFReFZsVlRha0pWVFZWV05WbHJWa3RaVlRGSVpVVldWbFpzVlhoVmEyUkhWbXhLZEU1V1VsZFdWRlpGVjFSQ2ExTXhaRWRUYmxKUFZqQmFXVlZzVWtka1ZscFdWMnM1VWsxWGVIcFpNR2hEVlcxS1ZWSnVRbFZXUlVwNldXMTRhMlJIU2taVWJYQlRUVWhDTTFaV1l6RlpWMFowVm14V1YySnVRbUZXYlRGdlZVWlNWbGR1WkZSU01IQktXV3RXTkZVeFdYcGhSa0pYVm14d1dGbFVSa3RqTVc5NldrWm9hVkpWY0ZkV1YzaGhVekZKZUZkc2FHbFRSWEJvVkZkMFlWZFdXWGhhUjNSYVZqQmFWbFp0TlU5WGJVcFZVbXhTWVZaNlJsTmFWbVJMVWxaR2RHRkdTazVpVmtsNVZsUkpNV05yTVZoVldHeFVZbXhLWVZSWGNGZFViRlpWVVd0a2ExWnNTa2xVVm1ocllUQXhXVkZVUmxoV1JUVlFWVEo0Um1WV1VuRlNiSEJYWld4YVJWZFhkR0ZrTURWWFlUTndVbUV6YUZoWlYzUkxWVVpXVlZOdGNHdE5WVEV6V1d0V1UxVnNXWGxWYTNSV1RVZFNWRnBFUm5kU2JIQklUbGRHVGxadVFrcFhWbFp2WXpGc1YxZFlaRmhpYTNCWVZteGtUazFXY0VoTlZYUlRZa1p3ZUZaWE1VZFdNREZGVldwU1dHRXhXbkZVYkdSWFZtMVNSbFZ0YUU1aVZrcG9WbXBDVm1WSFNuTmFTRTVvVW5wc2NGVnRNVEJPYkZwMFkwVk9hRlpVUWpOWldIQkxWVEZLY2xkcVNsaGhhMHA2Vld0YVIxZEdjRVpqUmtwT1VsWndNVlpVUmxkaE1XeFdUVlpvVm1FeWVGaFpiVEUwWVVaWmQxWllhR2xpUmxwSVZrZDBUMVF3TVZsUmJIQmFWbGRSTUZZeWMzZGxSbVJaV2tad2FHRjZWa3hYYTFwclZHMVdjMWR1VW1sU01uaFlWRmMxYTAweFZqWlJiVGxWVFd0d1NWVXlOVk5XYlVwWFkwYzVWMkp1UWtoWmFrWnJZMVpPYzFkdGNFNVNNMmhLVmtSR2IyUXhVbGhUYmtwVVlsUnNhRlZzWkZOa1ZuQkhXa1ZrYTFKVWJGcFZWekZ6WVVaWmVXRkZlRmRoTVhCWVZXcEdUMUl4VG5OYVJrSlhWakZLVjFaR1ZtOWlNVXB6Vm01T1dHRXpRbkZVVldRMFUxWnNjbUZHVGxoaVJtdzFWbGMxVDFaRk1WWk9TSEJZWVd0YWVWcFdaRWRUUjBaSVpFWk9hR0pZWjNwV2Frb3dWREF3ZUdJemJGWmlSM2hXV1d4b2IyTldiSE5WYkdScFRWZDRlbGRyV21GaGJFcFZZa2hrVmxaNlZrUlpWbHBhWkRGa2RWWnNhR2xTVkZaRlYxZDRhMU50Vm5OVWJHaGhVbTVDVDFsc1pHOWtiR1J5Vm14d1QxWXdOVWhaTUZaVFZXMUtjbE51UWxwV2JGcE1WV3hhVm1ReFduSmFSbVJYWWxkUmVsZFhkRmRXTVZwMFZteGFWR0pzU21GWlYzTXhVekZrY1ZOclpGaFNWRVpaV1ZWa1IxUnRTa2RYYmxaWVZteHdjVlJWV25abFZrcHpZVVUxVjAxdGFHOVdSbVEwV1ZVMWMyTklUbE5YUjFKVlZGVmtORkpXVmxkYVIzUlVZa1ZXTTFWdE1ERldSbHBXVGxWU1dtSkhVa3RhVjNoUFYwWndTRkp0YkdsU2JYZDZWakowWVdJeFRYbFRhMXBwVWxkb2NGVXdXbUZUTVZaeFVtNWFiRkp1UWtkWlZWcHJZa1phZFZGc2NGZFNiRXBvVld4YVYxZEZPVmhPVmxKWFZsUldSRll5Y0VOak1VcEhVbXhvWVZKWVFsTlVWVlpoWkZaVmVGWnJPVkpOYXpWSlZUSjRiMVV5U2xWV2JXaFhZbGhDZWxSV1dtdFdNV3Q2WVVkc1UxWXphRWRXUmxacllURnNXRk51VGxoWFIxSm9WVzB4YjFSR2JISmFSVFZzVWpGS1NWUldaREJYUmtweVlrUlNXRlpGYkRSV2FrWjNVbXhXYzFOdGJFNWlWa3BNVmxaU1ExSXlTbk5VYkZwVllUQndhRlJWWkRSU1ZsWlhXa2QwVkdKRlZqTlZNV2hyVjJzeGNWWnViRlZpV0ZKVVZsY3hTbVZXY0VaalJrcE9VbFp3TVZaVVJsZFVNVVp6WWpOa2FWSldTbE5XYWtwVFV6RldWVkZyWkdsaVJUVlhWa2QwUzFsVk1YSk9WRUpYWWxSV00xbFhlRXRPYlVwRlVteHdiR0V6UWxoV01uQkhVVEZhUjFKdVVrNVdNMUpaVlcxMGMwNUdaRlZUV0doWFlsWktXVlpITlZOV01rcDFVVzVLVjJGck5YVmFSRVpPWkRGU2RWTnNWbWhOUkZZelZsWmFhMkV4VG5OU1dHUlRZbFJXVlZac1ZURlJNV1J4VVc1T1UxSnJXbGxYYTFaM1ZXc3hSbGR1VmxaTlZscFFWVlJLVDFJeVRrbFJiRXBwWWxob2IxWnFRbFpOVlRCNFlraEdWRlpGV25OWmEyaERWbFpTYzJGSVpHaE5WV3d6VmpGb2ExbFdTblJoUmtKWVlsaG9lVnBXVlRWWFIxSklVbXhhVGxKV2NESldiRlpoVkRGR2RGWnNXazVXVmxwVFZtdGFkMUpzV2xkWmVsWnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXVWxkV1ZGWkVWakp3UTJNeFNrZFNiR2hoVWxoQ1UxUlZWbUZrVmxWNFZtMDVVazFzV2xsVmJYaHZWREZhUmxOck1WWmhhMXA2V1RCYWExSnNWbkpUYlhob1pXdEpNRmRZY0U5a01WSnpWMnBhVTJFeVVtRlVWM0JYVkVad1NFMVZPV3BXTUd3MVYydGFhMVV3TVhSaFNIQldUVlphYUZkV1dsZFdNVloxVVd4S2FXRXdjSGhYYkZwWFUyMVJlR05GWkdoU1dGSnlWbTAxUTFkV1dsZGFSM1JvVmxSR2Vsa3dhRk5XVmtsNVpVVjBXazFHV2xSV1Z6RktaVlp3Um1OR1NrNVNWbkF4VmxSR1YxUXhSbk5pTTJScFVsWktVMVpxU2xOVE1WWlZVV3QwYWsxWVFsZFhhMVUxWVZaSmQwNVZjRmRXYlZKeVZsUkdhMU5IUmtsU2JHaHBVakpvUlZaR1ZtdFNNV1JHVDFac1YyRXpRbFJVVlZwMlRXeFZlRlp0ZEZkaGVsWjVWbGQ0UzJGVk1YUlZhM1JXVmtWS1NGbHRlRTlXYkZKeVUyMUdUbEl6YUVaV1ZscHJZVEZPYzFKWVpGTmlWRlpWVm14Vk1WRXhaSEZUYXpsVVZtczFNVlZYTVhOaFYwcEdWMnBLVjAxcVJucFZla1p5WkRBeFZsWnNWbGhUUlVwYVYyeGtlbVZGTlVkaVNFNVhZa2RTYzFacVFURk5SbEY0WVVoT1ZsSXdXbGRWTW5oaFYyeGFXRlZzWkZoaGEzQlBXbFprUzFORk5WaGlSMnhYVm01Qk1sWlVSbGRoTWsxNVZtNUthVkpYZUdoVmFrNXZXVlphY1ZSck9VNVdhelZaV1d0b1MxWlhSWGRPV0dSV1ZtMVNjbFV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNZa1pLZVZaSE5WTmhWa28yVW10MFZtSllRbnBaYkZwelpFVXhWbHBIZEZOaWEwcFpWa1JHYTFsV1RuTlRhMVpTVmtaYVZWWnNWVEZVUm1SMFpVYzFiRlpVUmxsWlZXUnZWakpXYzFkdVVsZE5SMmg2VlRKek1XTnNWbk5UYld4T1lsWktURlpXVWtOU01rcHpZa2hPWVZKWFVuRlZha0ozWkRGa2NWUnJUbE5XYkZwWlZEQlNjMU50Umxoa1JYaFlZa2RvZGxsclduTk9WMFpJWWtad1dGSlVWbnBXUnpGM1ZXMVNWMkpJUmxoV1JVcG9WV3BHWVdOV2JIRlRiRTVwVWxoU1NsZHFUa05VUmxaVlRVUnNTbUZYZEV4WGJHaHZZa1pzTldGSGJGcFhSVFZ6Vkcxd1VtUldiSEZYVkVKaFVqRmFjVmxxU2xOaVJYUkpXak5DVEZWVU1EbEphV3RMV2xob2JGbDVhR2xaV0U1c1RtcFJkVmxxV1RCYVIxWnFZakpTYkV0SVozQkxVVDA5SWlrS1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLSGdwS1E9PSIpCmV4ZWMoYmFzZTY0LmI2NGRlY29kZSh4KSk=")
exec(base64.b64decode(x))")
exec(base64.b64decode(x))