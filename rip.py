import base64
x=("import base64
x=("aW1wb3J0IGJhc2U2NAp4PSgiYVcxd2IzSjBJR0poYzJVMk5BcDRQU2dpWVZjeGQySXpTakJKUjBwb1l6SlZNazVCY0RSUVUyZHBXVlpqZUdReVNYcFRha0pLVWpCd2IxbDZTbFpOYXpWQ1kwUlNVVlV5WkhCWFZscHFaVWRSZVZOWWNGUmhhMHBMVldwQ2QySXhiRFpUYkZwT1lYcFdRMWt3VWxOVlZsVjVXa2hDV0Zac2NIRmFWV1JTWlZaT1dXTkdVbWhoTUhCTVZsZHdRMlF5U1hoaVJGcFVZa1p3VDFsWWNGZFJNV3QzVld4T1ZsWnNWalZYYTJoRFYwWmFjMk5JUm1GV1YxSlRXbFphVDFkWFRrZFZiV2hvVFVoQ1RWWnNaSGRSTWxGNVUxaG9hVkpHY0ZWWmExcDNWREZzV1dOR1pGSk5WM1F6VmxkNFQxWnNXbk5XYWxaWVlUSm9SRll3V21Gak1rNUpVbTFHVjFZeFNsUlhiRnBoVkRGa1dGUnJaRlppVjJodlZGVm9RMVJXV25OYVNHUlNUV3hHTlZVeGFHOWhWa3BIWTBaV1dtRXhjRE5XUkVaelYxZE9SMXBHU2s1V00xRjZWbXhrTkZReFduTlhiazVYWVd4YVdWbFVTbTlTUmxsM1YyMUdhazFyTlVwVmJURkhWakZaZUZOc1VsaGlSbkJvVmtSR2ExZEdVbkphUmxwcFZqSm9kbFpHVm05Uk1WSlhWMjVPV21WclduSlVWM040VFRGU2MyRkZPVmRTTUZZMVZsZDRVMWR0U2xWU2JGSmFUVlp3V0ZreFdrZGtWbkJIWVVkc1UySklRbUZXYTJRMFlURkplVkpyYUZSaVJuQnhWVEJvUTFZeGJITlZhMHBzVW14c05WbDZUbTloYkZweVkwaHdXbFpYVWtoV2FrWmFaVVpPYzFac1pHaGhNSEJ2VmpGYWExVXhaRWRWYmtwb1VqTlNWRmxyVm5kV1ZscDBaRVprV2xac1dsaFdNbmhyVm0xRmVsRnVUbFppVkVVd1ZqRmFZV1JIVmtoUFZtUlRZbFpLU2xkc1ZsWk9WbHAwVW01S2FsSnNTbGxXYlhoM1ZrWlpkMXBGT1ZSV2JFcDVWR3hhYTJGV1duSmpSbWhYWWxoU2NsUnJaRVpsVms1eVdrWm9XRkl4U2xGV2JYUlhVekZrUjJKSVRsWmlSMUpaVlcweE5GWnNWblJrUjNSVlRXdHdTRmt3VWtkV01WbzJVbXRvVjFaRmNFeFdNR1JIVWpGYWMxcEdUbWxUUlVvMVZtMTBVMU14VlhoVFdHaGhVMFphV0Zsc2FFTldSbGwzVm10MFYxWnNjRWhYV0hCSFlWZEtWMUpxVWxoaE1YQllWbGN4UzFkV1JuTlJiR1JvWVRGd2IxWnFSbUZaVm1SSVZXdGtWV0pHY0hCV2JHaERVMVphY1ZOWVpFOVdiSEI1VkZaV2ExZEhSbkpPVjBaaFZqTlNhRmt5ZUdGalZrcDFXa1pPVGxacmNEWldha28wWVRGU2MxTlljRnBOTW1oWVdWUkdTMU5HYkhGU2JFcHNVbXh3V2xsVlpFZFZNVmw1WVVoYVYxWkZTbGRVVmxwclZqRmtkVk5zWkZkU1ZuQmFWbGN4TkZNeFdYaGFTRXBYWW0xU2NGVnFRbmRTTVZKelYyMTBWMVl3Y0VoV01uaFRWMnhhYzJOSFJtRldNMmd5V2xkNGQxSXlSa2RhUms1WFYwVkpNRlp0ZEd0T1IwVjRWMWhvWVZKWFVsaFpiWFIzVmpGc2NsWnVaR2xOVjNoV1ZWYzFhMkV5U2tkalJFSlZZa2RvY2xaVVFYaGphekZWVld4YVRtSnNTbmxXYkZKTFV6Sk5lVlJyWkZoaVNFSllWV3hXVjA1R1drZFdiVVpXWWxaYVNWVnRkSE5aVmtwelYyeG9WVlpYYUVSVWJGcGhVMGRTUjFSc1RrNVdNVWwzVm0wd01WTXhVWGhYYms1VVlsVmFZVlpyVm5kV1JscEdWMjFHYW1KSFVqRldNakUwVmpGYVIxZHNiRmhXUlVwWFZGWmtSMWRHVG5OaFIyaFRVbTVDV1ZkV1pEQlpWMFpIWWtoR1UyRjZiSEpWYlhNeFRWWlZlVTFVUWxaTmEzQkhXVEJhVTFZeVNsbFJhM2hYVmtWYVQxcFZXbUZqTVZwelUyMW9UbUpGY0ROV01XUXdWbXN4VjFkWWFGZGlhelZ2VldwT1UxZEdWbk5WYTJSVVVteFdOVnBWVlRWWFIwcFdWMjVzV2sxR1NsQldiWE40WkZkR1JtVkdaR2xYUjJoNVZtcEdhMUl4VGtkVGJrNVZZa2RTVDFac1l6Vk9WbHB4VTJwQ2FHSldXa2hXVm1oelZtMUtTRlZzWkZwaE1YQm9WakZhYzFaV1VuSlViR1JUWWtoQ05sWnFTVEZoTVZWNFYyNU9hbE5IZUZoV2FrNVRWVVphU0dNemFHcE5WVFY1V1ZWYWExVXdNSGhUYlRsWFlrWktURlZ0TVZkU01WSjFWR3hrYVZKc2NGbFdiVEF4VVRKSmVGZHVVbXRTTUZwV1ZGWmFkMWRHVlhsT1ZUbFhWakJ3V1ZwVldsTldWbHBZWVVWU1ZrMXVhR2hhUlZWNFUxWndSazVXWkU1U2JUa3pWbXhTUzA1R2JGZGFSV2hUWW10d1ZWbHJXbmRXYkZwMVkwWmtWMUpzV25sV01uaGhZa1paZUZkclpHRlNWbkJRVmtkNFMxTkhWa2RoUm1SWFVsYzRkMVpZY0V0U01VNUhWMjVXVm1KWWFGUldhMlEwVjFaYVIxWnRSbFJOVlhCSVdXdG9SMVV5UlhsVmJrWlZWbXhhTTFZeWVHdGpiSEJGVVd4YVRsWnVRWGhXVm1RMFlqRlpkMDFZUmxkaGF6VlhWbXRXWVZaR1ZuRlNiVVpxVFd0YVNWa3daRFJoVmtwMVVXeHdWMkpVUWpOYVZXUkdaREExVmxwR2FHbFNNbWg2VmxkNFZrMVdaRWRXYms1V1lUSlNWVlZ0ZUhOT1ZuQldWbXM1VjAxVmNIcFpNRnB2Vm0xS1dWRnNRbGROUjFKSVdUSjRUMk5XVW5OV2JXeFlVakprTlZZeWVHdE9SMUY0VTI1S1QxWnRhSE5WYWtvMFYwWlNWbFZzU214U2JIQXdXa1ZrTUZSc1NuTldhbFpXVFdwV1ZGWnFTa3RTTWs1R1QxWmthRTFZUVhwWFZsWmhaREZrU0ZacmJHRlNiSEJQVm0wMVEwNXNXblJOU0doVFRWWndTRlV5TlZOaVJrNUpVV3hvVjJGck5WTmFSRVpoWXpGa2NtTkhkRTVoZWxaSlZtcEtORmxYUmxkWGEyUllZVEo0V0ZsclpGSk5SbGw1VFZaS2EwMUVWbGhYYTFwUFlWWktkVkZzUWxkaVZFRjRWVlJLUjFJeFpISmhSM1JUVFVad1dWWkdaSHBOVm1SSFYyeG9UMVp0VWxsVmFrSjNVMVphV0U1VlRsZE5hMXA1Vkd4b1lWWnJNWFZoUjBaaFZtMVNWRlZxUmxOak1XUnlUbFprVjJKclJYbFdiVEIzWkRBeFYxUlliRk5YUjJoVldWUkdkMWRXYkhKYVJGSlhUVmQ0VmxVeWVFdFViRXB6WTBWc1lWWlhhRkJXYWtwTFUwWldjVkZzV21sV1JWbDZWbXhTUzFNeFdsaFNhbHBUWWtkU2IxUldhRU5sUmxwSFYyMUdWRTFXYkRSV01qVlBZVlpLY21OSE9WVldiSEF6VmpCYVlWSXhXblJTYkhCWFlYcFdTVlpxU1RGVU1XUklVMnhXVjJKcmNGWldhazVUVFRGV2NWSnRSbXRTTVZwSlZXMHhjMVV5U2tsUmJHaFhZbGhvVkZWcVJtRmphekZYV2tab2FWWXlhRzlXYlRWM1VqRlNSMkV6YkU1V2JWSlVWRlphZDJWc1draGxSemxXVFVSR1Yxa3dXa2RXTWtwSVZWaGtWMkZyY0ZCYVJWcFhWMWRHUjFkdGJGTk5iV2cwVm14U1ExWXlVWGhWV0doWVltczFWMWxyWkZOV1JteHlXa1pPVGxadGRETldNakV3VmpGWmQyTkdaRmROYmtKRVZqQmtSbVZYUmtkaFJtUk9VbTVDVFZkVVNqUlpWMDVYVlc1T1dHSllhRzlVVm1oRFZXeGFkRTFJYUd4aVZscElWakkxVDFaWFNuSk9WbHBhVjBoQ1dGWnJXbk5qYlVaR1ZHczFVMkpJUWpaV01WSlBZakpLU0ZKcVdsZGlSMmhZVm1wT2IyTnNXbkphUlZwc1VqQTFTRmxWV25kaFJURlhWbXBTVjFkSVFraFdha3BQWXpGYWRWTnNWbWxXTTJoM1ZsZDRVMVp0VmtkYVJtUm9VMGRTV0ZSWGRIZFRWbFY1WlVkMFYxSXdWalZhVlZwaFZsWmFkRlZ1V21GV00yaGhXbFprVjFJeVRraGxSbVJwVW0wNU5GWnRkR3RPUmxsNFZsaG9WR0pIZUZOWmEyUTBWMVpzVlZKdFJtcGlSbkJXVlcweE1GWkdTbk5qU0d4YVZsZFNkbFpVUVhkbFJrNXpWbXhrVTJKSVFtOVhhMUpMVmpGWmVGcElTbGhpVjJoVlZXcEdTMVpHWkZobFIwWlVUV3hhZWxac2FITmhNVWwzVjJ4b1YyRnJTbGhVYlhoWFYwZFdTRkpzWkU1V01VcExWbFpqTVdReFduUlRhMlJxVTBWd1dGbFhkR0ZsVm5CWVRWVmtWRkl3Y0VoV1IzTXhWVEZLYzFkWWNGZGlXR2h5Vkd0a1IyTnJNVmRhUmxKcFVqRktXVmRYZEd0aU1WWlhWMjVPVm1Kck5WZFVWbHBMVjFacmQxWnRkRmROVlhBd1dsVm9jMVl3TVhGV2JrcGFWak5vVEZreWVHdGpWa3B6WTBVMVUwMVZjRXBXYlRGM1V6RlplVlJZYUdGVFJscHdWVzB4VTFReFZuUmtTR1JWVm0xU1dsa3dWakJXYXpGV1lrUldWazF1VW5KWlZWcEtaREZrYzFWc1ZsZFNXRUl5Vm10a05GbFdaRWhVYTFwclVsUnNWRlpyVm1GVFZsbDVaRWRHYUUxWGVGaFZNV2gzVm0xS2NsTnNaRnBpUmtwSVdUSjRVMlJIVmtkYVJtaFRWa1ZhV2xaRVJtdGlNVkp6VjJ4b2EyVnJXbGhVVnpWVFpHeHdSVkp0UmxOTlYxSjZXVlZhWVdGV1NsWmpSMmhZVm0xUmQxZFdaRmRqTVdSWllVWm9hVkl4U25sV1Z6QjRWVEF4UjJKR1dsaGlXRkpXV1d0YWQxZEdiSFZqUlhSWFRWWndSMVl5ZUc5WGJVWnlWMjFHWVZac2NHaGFSbHBUWkVkT1IxUnRiRmhTTW1oWVZtcEdhbVZGTlVkaVJtUnBVbTFTV1ZsdGVHRmpWbFp6V2taT2FsWnNTbGhXYkdodlZERktjMk5HYkZWaVIxSklWbXBHV21ReFduRlViRlpwVWpKb2VWWnRNVFJaVjFKSFZtNVdWR0pHY0U5WmJURnZVMFprY2xWclpGVk5iRXBZV1RCV2EyRnNTbFZXYkZKYVlrZG9VRlJyV2xwbFJtUnpXa1p3VjAxVldUQldhMlF3WVRGWmVWTnVUbGhpYTBwWFdWZDBTMkZHV1hoWGJHUnFUVlphZWxZeWN6RmhWa3B6VjFSQ1YySlVSVEJWZWtwR1pEQXhWMkZHUWxkU2JIQlpWbGMxZDFZeFdrZFhia1pVWVROU2NsVnFRbUZUYkZWNVpVZDBhRkl3VmpSWk1HTTFWakZLTmxKVVFtRlNSVnBNV2tWYVMyTnNaSEpQVm1ST1RWVndXbFl4WkRSVk1rNXlUVlprV0dKc1NrOVdNR1JUVlRGU1YxZHJkRlJTYkZwNldWVm9UMVl5U2xaalNIQmFUVWRTZGxadE1VdFRSbFoxVjJ4a2FFMVlRWHBXVjNoaFZESk9jazlXV2xCV01uaFlWbXBPYW1WV1duUmpSWFJzWWxaYVNGWlhOVk5WTVdSSVlVaENWVlpGTlVSV01WcGhaRWRXU1ZwR1ZrNVdhM0JaVmpKMFZrNVdXa2RUYms1VVltMTRZVlpzWkZObGJGcFZVMnhrYW1KSFVqRlpNRnByWVZaSmVWb3pjRmRpV0VKRFdsVmtUbVZXU2xsalIyeFRWa1phV1ZaR1VrTlRNbEY0V2taa1ZtRjZiRmRVVmxwM1YwWmFXRTVWT1ZkaVZWWXpWR3hrUjFZeVNsVlNiRkpXVFZad2Nsa3hXbE5rUjFKSFYyczFWMWRGU1RGV2JYQkxaREZOZUZwRmFGTmlhM0JWV1cwMVExWXhiRlZTYm1SVVVteHNNMVl5Tld0V1JrbDNZMFZvV0dFeFZYaFdha3BMVmxkR1JWWnNaR2hoTVhBeVYydFNSMVJ0VmtkVWJHeHBVbXhLY0ZsWWNGZGxSbHBZVFZSU1ZFMVdWalJXTWpWTFdWWktSMU5zVmxWV2JIQm9XbFZhVjJSRk5WWlBWMmhwVWxoQ05WWkhlR0ZoTVdSelYyeGtWR0V4U2xoVmFrNXZXVlp3UlZGWWFGZFdiSEI2VjJ0a2MxWXhTbk5pZWtwWFRWWndhRmxVUms1bFJtUjFWRzFHVkZKV2NGUlhWM1JyWWpKT1IxWnVSbFJpUlhCUFZXMTRjMDVHV2xoa1JFSlhVbFJHZVZSc1ZtOVdiVXBWVm10NFdsWXphRXhaZWtwUFVqRldjMWR0YkdsaE1HOHlWakowWVZsWFJYbFVXR2hYWW10d2NsVnFUa05VTVd4eVZteHdUbEpzYkRWWk1GVTFZV3N4VjFacVZsWk5ibWg2Vm0weFMxZEhSa2RhUmxaWFZtNUNiMVpHVWtkak1EVnpVMjVXVldGNmJIQlZiWFIzVGxaYVJWSnRSbEpOVm13MFZqRm9kMkZHU2taWGJHaFdZbGhvYUZZd1dsTldiR1J5VDFkd1RsWllRbUZXTW5SaFZESkdWMWRyWkZoaVJuQllXV3hvYjFkR1duRlJXR1JzVW14d2VGWXllRXRoVjBZMlZteFdWMVo2UlhkWFZscHJWakZ3U1ZOc1pHbGlWa3BaVmxjeE1HTXdOVWRXV0d4cVVsUnNXVlZxUWxkT1JsbDVUbFYwV0dKVmNGcFpWVkpMV1ZaYWMyTkdRbGROVjFKUVZXcEdUMlJIU2tkaFJrNU9ZbGRrTmxadGNFZFpWbXhZVWxoc1ZGZEhlRmRXTUdSdlkwWlZkMVpVUm1oU2JGcDZWMnRhVDJGc1NuUmxTR3hhVmxaYVVGWXdXa3RqTVVweFZXeHdWMVl4UmpOV2FrSnJVekZPUjFadVNtaFNiSEJQV1ZkNFlXSXhXblJsUjBaVVRWWndlVlJzV21GV1YwcEpVVzVDVjJFeFdtaFdWbHByWTJ4YWRGSnNWazVXTVVwSVZrZDRZVmxYU2tkVGJrNXFVbFJzVjFsclpHOVNSbEpZWlVad2JGSnNXbmxVTVdSM1ZHeGFWMWRVUmxkaE1sRjNXV3BHWVZOR1RuSmhSMmhUWWtWd2FGZFhkR0ZUTVdSSFlrWmFXR0pWV25KVmFrRXhVMnhhU0UxVVFsWk5hM0JhV1ZWYWMxWXdNWFZWYkZKWFZrVndTRlpxUms5ak1WcDBZa1pTVTJKSVFsaFdiVEUwV1Zaa2RGVllhRmRYUjNoelZXeGFkMk5zVWxkV2JtUk9VbXhLZWxZeWVFOVdNREZYWTBaYVYySllVbFJXYWtGNFpGWkdjbFZzY0d4aE1YQk5WbGR3UjFNeVVsZFhibEpwVW1zMVQxVnROVU5aVmxweldrUlNWazFXY0RCV2JUVlBXVlpLZEdGSVJsWmlSMmhFVmtSR1lXTldTblJTYlhocFVqTlJlbFpxU2pSVU1WcDBVMnRrYWxKWGVHaFdiRnBhWkRGYWRHTXphRk5OVjFKNFZrZDRkMkpIUlhoalJGWllZa1phY2xWcVJrcGxSMDVHWVVkc1UyRjZWbEJXVjNSWFZtMVdWMWR1VW14U00wSlBWbXBHUjA1R1dsaGxSemxYVWpCd2VWa3dXbGRYYkZsNlZXcE9XRlpzY0ROV01HUlBUbXhLYzFkck5WZE5NbWN3Vm14amQwMVhSWGxTYms1VVlteGFVMWxVU2pSV2JGSlhXa1pLYTAxV2NIbFdNblF3WVcxS1ZtSkVXbHBOUm5CMlZtcEdTMVpXV2xsalJtaG9UV3MwTUZac1VrdFVNbEpIVm14c2FsSXllRlJaV0hCWFpERmtXR1ZIUmxSTmJFcDZWakkxVDJGR1RraFZiR2hhWWtad1NGUnJXbXRqYlVaR1QxWndWMkV6UWtsV1ZFa3hVVEZhZEZOc1ZsSldSVnBXV1d4b2IxWXhjRmRXV0doWVVsUnNXVmxWV210aFZrcDBaRVJXVjJKVVFqUmFSRVpPWlVad1NWTnJOVmhTVm5CVlYxY3hNRmxYUmtkV2JrWlZZbFJzYzFscmFFTlNNVnB6Vld4a1YwMVdjSGxXTW5CRFdWWmFWMVpZYUZkV1JWcHlWVzE0VDJNeFVuTmFSMnhYVWxaWmVsWnRjRXRsYXpGWFYxaG9ZVk5GTldoVmJYaDNWMVpXY1ZKcmRHeFdiSEJaV2xWa1IyRXdNVmRqU0hCYVlUSm9WRmxYZUV0V2F6VldUMVp3YUUxc1JqWldSbVEwVm0xV1dGWnJhR3RTTW1oUFZtMDFRbVZHV2xkYVJFSnBUVlp3ZWxZeWNHRlZiRnBHVjIxR1YySllhRmhVVkVaM1ZteGtjazlYY0ZkaGVsWTJWbXhqZUdNeVJsZGFSV2hXVmtWd1dGbFhkSGROTVZaVlVteGFiRkpzY0RGV1YzaFRWMFpKZW1GSE9WZFdNMmgyVlZSR1ZtVkdWbk5YYkdScFZsWndlVlp0TVRSV01EVkhWMjVTYW1Wc1dsZFpiRlozVTFaUmVGVnJPVmhpVlZZMFZqSjRVMVl4V1hwaFIwWmhWbXh3V0ZreU1WTlNNV1J6V2taT1YxZEZTa3RXYWtacVpVVTFSMVZZYUZoaWF6VlhXVzEwZDFaV2JITldiVVpWVFZaYWVGWkhNRFZWTWtwSFkwWm9WMDFxUlhkWlZWVjRWbXMxV1dOR1dtbFNNbWg1Vm14U1MxTXhXbGRYYms1WFlrZFNjRlZ0ZUZkT1JscFhWV3RrYUUxck5WaFZiVFZYVmxkS1JrNVdVbHBXUlZvelZqSjRXbVZYVWtkYVIzUk9WbXh3TlZaR1dsZFpWbVJJVTI1T1dHSkhVbFpXYlhoM1lVWmFWbGRzWkZkV2F6VjVWakl4TkZVd01VbFJhMnhZVmpOU2FGZFdaRWRXTVdSWllrZG9VMkY2VmxsWFZtUXdVekpTYzFkclZsUmlSVFZZVkZab1ExTkdXblJsUms1b1ZteHdTVnBWYUdGV01WbDZVV3RvVm1WcldsQlZha1pYVjFkR1NHRkdUbGRXUmxwdlZtMHdlRTFHV1hkT1ZtUllZVEpTVjFsVVRsTlhSbFowWlVoa1dGWnNjRmxhVlZaUFYwZEtWbGR1YkZkTmFsWXpWbXBCZUZZeVRrZGhSMFpUVm01Q2VWZHJWbXRTTVVsNFkwVmFUMVp0VWxoWmJGSnZUbFphZEdWR1RsTk5WbXcwVmxab2MxVXhaRWhsUmxKYVlsaE5lRmt3V2xka1JURlZWV3hhVGxZemFGcFhhMVpYVFVkR1ZrMVdaR3BTUlZwaFZGVmtiMVZHV2tobFIwWnFZWHBXVmxWdGVIZFViRWw1WVVjNVYwMVdjRmRhVldSUFpFWlNjbHBIYkZOaVZrcDNWbTEwWVZkdFZuTmFSbVJoVTBoQ2MxVnFRVEZsYkdSeVlVWmtWMDFyY0VsWlZXaERWbTFHY21OR1RtRldNMmh5VmpGa1QxSnNVblJqUlRWWFZtNUJNVlpyV21GV01XeFlVbGhvVkdKSGVGTlphMVV4Vm14YWMxZHRSbWhTYmtKSVZqSjRZV0pHU25OalNHeFZUVlp3VEZsV1drdE9iVVY2WTBab1YwMHhTbGxXYkZKSFZqSk5lRnBHYkdsU2JIQnZWRlJHUzFkR1duUmtSbVJVVFZVMVNGbHJhRk5pUmtwVllrWm9XbUV4Y0V4YVZscFdaVlV4VmxwR1ZtbFNWM2N5VjFaV1YxbFdXWGhYYms1cVUwVndZVlpyVm1GVlJtdzJVbXQwV0ZadVFraFdSekZ6VmpGS2MyTkdaRmRpVkVVd1ZtMXplRll4U2xsaFIwWlVVbFp3VkZkWE1YcE5WbHBIVm01U2ExSXdXbGxXYlRGVFpWWmFkRTVYZEZkaVZWa3lWVzEwYTFZd01YRldiR2hYWWxoT05GWnFSbXRqTVVaelYyeGtUazF0WkRWV01uaFhZVEZSZUZSc1pGZGliRXB3VlcxNFMxWkdXbkpYYlVacllrWndNRmt3Vms5V01rcFhVbXBPVldKR2NISlpWM2hMWkVkV1NWRnNXbWhoZWxaVlYxUktORlV4WkVoVmEyaFRZa1pLV0ZsclZscE5SbHB6V2tSQ1ZVMXJXa2hXTVdodlYwZEtTR1ZHYUZaaVdHaE1Wa1ZhWVdOc1pIUlNiR2hUWWtadmVGZFVRbXRTTVZWNFYyNVdVbUZzY0ZoWlYzUkxZVVp3UlZKck9WUlNiSEI1VjJ0a2MxVXhXa2RYYm1SWFZrVktXRlV5TVZkak1XUlpZVWRHVTFKVmNIWldSbHBoWXpBd2VGVllhRmhpVlZwdlZGWldkMlZXYTNkV1ZGWlhZbFZ3U1ZsVldsTldiVlp5VjJ4b1YySkdjRWhaTW5oM1UwZEtTR0pHVGxkU2JIQmFWbTB4TUdFd01VZFVXR2hwVW14d1QxWnNaRzlqTVZaelYyMUdWMDFXY0RGWk1GcHJZa2RLU0ZWc2FGZE5ha1YzVmxSQmVGWnJOVmRqUm5CWFZtNUJlbFpyWTNoU01rNXpVMjVHVldKSFVrOVpiWFJMVkZaYWNsVnJkRlpOVld3MFYydG9WMVl5U2xsUmJGSlZWa1ZLVEZac1dtdGpNV3Q2WVVVMVRtSkdjRWxXTW5SaFl6SkdjMU5zYkZaaVIyaGhXVlJHZDFSR2NGZFhiVVpVVWxSR1JsVnRlRmRoVmtwWlVXMUdWMkpIVGpSWmFrWmhaRVpLZFZOc2FHbFdNbWh2VmxkNFlXUXhWa2RYYmxKT1ZsZFNWRmxyV2t0TlJuQldWMjEwVldKRmNERlZWekZIVmpKRmVWVlVRbGRXUlZwSFdsVmFkMUl4WkhKT1ZtaFRWbTVDVmxZeFkzaGxhekZYWWtaa2FsSnRhSEZhVjNSaFZqRldkRTFVVWxkTlZtdzFWR3hrUjJGV1NuTmpTSEJhVFVaS1JGWnFRWGhqVmtwWldrWmtVMlZyV2sxV2FrWmhaREZLVjFWdVRtaFNiVkp3VlcwMVEySXhXbkphUkZKb1RWWkdORlpIZEd0V1YwcHpWMnhvV21FeGNETlpNRnBhWkRGd1NFOVhlRk5pVmtwYVZrWmFVMVV5UlhkTldFcHBVa1pLWVZsVVNtOVVSbHB6V2tWMFYxWXdjRXBWTW5oaFlWWmFSMWRyVmxkaGEyOHdWMVphVDFKck5WZGlSMFpUWWxkb2QxWlhNSGhOTURGWFYyNU9XbVZyV2xaVVZscDNWMFpWZVdWSFJsVk5WbkJZVlRJeFIxWldXbGhWYkZKWFVsWndNMVZxUm10ak1YQklaRVpPVGxadVFrdFdNVkpEWVRKTmVWSnNaRlZoTVhCVldWZDBkMWRHVWxkYVJrcHJUVlp3UmxWV2FHdGlSa2wzWWtSYVdtRXhjRmhaVm1STFVtMU9SMkpHYUZkbGEwa3dWbXhTUzFJeFNYaGFTRlpUWWtWd2NGVXdWa3RsVmxwSFYyeGFiRkpVVmtoV01uaHZWREZaZDFkc2FGZGhhMHBZVkZSR1UyTXlSa2hrUm1ScFVtNUJkMVpzWXpGVE1WcHlUVmhXYUZKWFVtaFZhMVpoVlVad1IxZHNaR3BOYXpWSldWVmtiMkpIU2tkalJUVlhZbGhDVEZwRVJrcGxWazVaV2tVNVYySldTbFZYVnpFMFdWWlZlR0pJVG1GU1JrcHdWRlphZDJWc1duUk9WMFpWWWtad2VsbHJVbE5XTURGeFVtcE9WMUl6YUdGYVJFcFBVMWRPUjJORk5WTmlhMHBXVmpGYVYxbFdVWGhVYTJoWFlUSm9iMVZ0TVZOVU1WWjBaVWhrVlZadFVscFpNRlpyWVVVeFYySkVWbFppV0ZKeVZtdGtTMWRXUm5OVmJHUm9UV3hGZDFaR1dtRlpWa2w0VjI1T1lWSlVWbFJaV0hCWFRteGFXR1ZIT1doTlZsWTFWVEo0VjFZeVNrZFhiR2hhWVRGd1YxcFZXbGRXVmtwMFpFZHdWMkV4YjNoV2EyUTBWREZWZVZKWWFHbE5NbWhZVkZjMVUyTnNjRVZUYTJSWFRWZFNXbGt3WkVkVWF6RjBZVVp3V0Zac1NraFhWbHBYVWpKS1NWSnNVbWxTVkZaVlZrWmtlazFXVGtkaVNFcFlZa2RTYjFacVFuZGxWbFY1VFZjNVYwMXJjRnBWVjNRMFZqRmFSbU5GT1dGV1ZuQlVWakZrUjFJeFVuTmhSazVPVmxoQ1dGWnRkR0ZXTWtWM1RsVmtWR0pIVWxoWmEyUlRZVVpXY1ZSc1RsZFdiWGg1Vm0xNGExUnJNVmRYYWtKVlZsWktTRlpxUmt0ak1rNUhXa1pXYVZKc2NGVldiWGhoV1Zaa1IxWnVTbWhTYlZKUFZXMTRXazFHV25GUmJYUlhUVlZ3ZVZSV1dtOWhWa2w1WVVoT1dtRXhjSGxhVmxwaFpFZE9SbVJGT1ZOTlJsa3dWbXBHYjJNeFduTmFSV2hXWW10d1YxbHJaRk5rYkd0M1YyeGFhMDFYVWpCVmJURjNZVlpLYzJORVVsZFdla0kwVldwR1VtVkdaSFZXYkVwb1RXNW9WMVp0TVRSWlYwNXpZa1pvYWsweWFGVldiWGhoWld4YVNHVkdaRmROVm5CNldXdFNUMVl4V1hwaFIyaFhZV3RhY2xacVJrdGtWbHB6Vlcxc1UwMXRhRE5XYkdSM1VqRk5lVkpyWkZoWFIzaHhWV3hrVTJOc1VsZFdWRVpVVm14V05WcEZhRTloUjBwR1lrUmFWbFl6YUZSV2JGcGhVbTFPU1ZkdFJsTk5NbWg1VjFod1IyRXlUWGxVYTFwUVZtMVNUMVZ0TlVOVE1WcDBaRWRHYVUxck1UUldNbmh2VmtkS2NtTkdWbHBpUmtwNlZqQmFjMk15UmtaVWJYaHBVak5vTkZaWE1ERlRNa3BIVjJ4V1YySkhhRmRVVjNCSFpXeGFTR1ZGT1ZOTlZUVjZWMnRhYjFZd01IZFRhekZZVm14S1NGWkVTazVsUms1ellrZEdVMkY2Vm5kV2JYUmhXVlphVjFkc2FFNVdSVXBoVm14U1IyVnNaSEpoUldSV1lsVndlVlJzV2xOV2JVcFpWVzFvVjAxV2NISlpNbmgzVTFad1IxcEdUbWhOTUVwb1ZteGFhMlF4VVhoYVJXUllZV3h3VTFZd1pHOVhSbHAxWTBWa1ZFMVlRa1pWTW5Rd1ZrWmFjbGR1Y0ZkV00yaHlWa2N4UzJSSFJrWmhSbVJwVjBkb2IxZFhjRWRTYlZaWFUyNVdWV0pHY0hCVmJUVkRWMFprVjJGSVpGZE5hekUwV1d0b1MxbFdTbkpqUlRsYVlURndNMVV3V25OV2JVWkdUMWRvVTJKSVFqWldha28wV1ZaYWMxZFljRlpXUlVwWVdWUkdkMkZHV25Sak0yaFVWakJhU0ZkclpHOVViRnAxVVZSS1YySkhVWGRYVmxwS1pVWndSbHBIY0ZOV2JrSlFWbTF3UzA1R1drZFhia3BZWWxWYVQxVnRlSE5PUm14V1lVZDBWazFFUmxoVmJYQlRWakF4ZFZWdVdsZGlSMUpJV1hwR2EyTXhVbk5hUjJob1RUQktWbFpzYUhkU01WbDRWMnhrVTJKcmNHaFZha28wWTBaV2MxVnNaRmhTYlZKWVZtMTRZVlF4V25OaVJGSldUV3BXVUZacVNrZGpNazVIWVVaYWFWWkZXbFZYVkVvMFZtMVdXRlpyV2xCV2F6VnZXbGQ0WVZsV1dsVlRhbEpvVFZac05GVXllR3RoYkVweVYyeG9WVll6UWtkVVZWcGhaRVV4VjFwR1RrNVdiRzk0Vm10a05GbFhSbGRUYmxaU1lrVktXRmxzYUc5V1JscHhVbTFHYWsxWFVscFpWVnAzWWtkRmVHTkdaRmhXTTFKeFZHeFZkMlZIU2tsVGJHUnBVbFJXV0ZkWGRHdFZNVTVIVjFoc2JGSXpVbGhXYlhoM1pXeFZlVTVZWkZkTmEzQklXVEJrYjFZeVNrZGpSWGhhVFc1Tk1WWXdaRmRUUjBaR1RsZHNhVll5YUVsV2JURTBXVlpzV0ZKWWJGTlhSMmhXV1cxek1WWkdXWGRhUms1WFVtMTRlbFpYZUd0V01WcHpZMGh3VjJKR1NraFdWM040VjBaV2RXRkdXbGRsYkZwUlZteFNSMU15VG5OYVNFNXBVbTFvYjFSV1duWmxiRnB6V2tod2JGSnJjSHBYYTJoWFZqSktSMk5GT1ZkaVdHZ3pWbFphWVZZeGNFVlZiWFJwVm10Wk1WWlVTakJaVmxwMFUydGFhbEp0YUZaV2FrNXZWRVphUmxkdFJsZE5WbHA1VmtkNFQxUnRSWHBSYWxwWFlUSlJNRmRXV21GWFJrcFpXa2R3VTAxdGFGZFdiWGhyVldzeFIxWnVUbGhpUjFKWVZGWm9RMU5XY0VaWGJFNW9WbXR3V0ZZeGFIZFdNVm8yVVdwT1ZWWnNjR2hWYWtacll6RmtjazlXWkZkV1JscGhWakZhYTAxR1RYbFdiazVYWW10d1dWbFVTbE5YVmxaMFRsVk9VMDFYZEROV01uUXdWbGRLUm1OR2FGcE5Sa3BJVm1wR1lWSnNaSE5oUm1SVFVsWndTVmRZY0V0VGJWWnpZMFZvYVZKck5WaFdNRlpMVlZaYWMxcEVVbWxOVmxZMFZsYzFUMkZXVGtaalJtaFhZVEZhYUZZd1dtRmtSMDQyVW14a1RsWnVRa3BYYTFaWFRVZEdSazFXWkdwVFNFSllXV3hvUTFaR1duRlNhM0JzVmpGR05sZHJXbXRVYkVwMVVXMDVXRlpGY0RaYVZWcHJWakZXZFZSc1dtbFdNMmhWVmtaYVYyUXhVbGRYYmtaVVltMVNVMVJYYzNoT1JsVjVaRWQwVmsxcmNFbFpWV1J2Vm0xR2NsTnRhRmRXUlZwVVZtcEdhMlJHU25SbFIyeFRZbXRKTWxadGVHdE5SMFY0Vm01U1ZHRXlhRkZXYTFVeFdWWnNWVkp0Um1waVIzaFlWakowTUdGck1WWk9XSEJZWVRGd1dGWnFTa3RTTVZweFZHeG9WMUpYT0hkV01WcGhZVEZrUjFSdVNtRlNNRnBVV1d4YVMxWldaRmhrUjBaWVlYcEdTRll5TlV0WlZrcEhVMnhrVlZac2NETmFWbHBUVmpGa2RGSnNXazVoTTBKWFZtMHhORll4V1hsVGEyUlhZV3MxYUZac1duZGhSbXQ1WlVkMGFrMVhVakJhVldSdllrZEtSMk5HY0ZkaVdHaHlWR3RhYzFZeFZuVlViR2hwVW14d1dWZFhkR0ZrTVdSSFlraEtZVko2YkhOWmExcGhWMVp3Vm1GSFJtaE5SRVo1V1RCV2ExWXhXWHBoUlhoWFlXdEdORmw2Ums5amJWWkhXa1prYVZKWVFrWldiR1IzVXpGTmVWUllhRlppYXpWWldXdGFZV0l4VWxaaFJVNXBUVlp3U0ZadE1UQlVNVXB5WTBab1YySllhSEpYVmxwS1pXeFdjMVpzY0doTlZuQlpWa1pTUjFZeVVrWk5WVlpUWWtkU1ZGbHJhRU5YUmxwSVpVWmtWVTFYVWtsVmJUVkxWa2RLZFZGc1pGcFdSVm96VlRCYVdtUXhaSFZhUms1cFZsUldTVlpVU25wTlZsVjRWMjVXVWxkSGFGaFphMXBMVTBaYWNWSnNTbXhTYTNBeFZrY3hjMVJyTVhOVGJtUlhWak5vYUZWNlJsWmxSbVIxVW14U2FWSlVWbFpXUmxwaFdWWmFjMVpzYUd0U00xSnZWbXBDZDFJeFVuTlhiWFJYVFZWc05sWlhkRFJYUmxwelZtcFNWazFIVWxoVmJYaGhZekZrYzFwSGJGZGhNMEV4Vm0xNFUxTXdOVWRUYmxKV1YwZG9WVmx0ZUV0VlJscDBaVVYwV0ZKc2NIcFdNbmgzWWtkS1IyTkdjRnBOUmxweVZtcEJlRkpXV25OaFJtUk9ZV3hhVVZadE1IaFNiVlp6VW01T1ZXSkdXbGhXYlhoMlpXeGFkRTFVVWxkaVZscFpWbTEwYjFVeVNrZFhia0pXWW01Q2VWcFhlR3RYUjFKSFdrWmFUbFpzYjNkV1ZFbzBZakZhZEZOcmFGWmlWMmhZV1d4b2IwMHhiRlpYYmtwclRWZFNlVlF4V210aFZrcHlZMFJXVjJFeVRqUlpha1pUWXpGU2NsZHNVbWxTTTJoWlYxWlNSMlF5VGxkVmJHUllZWHBzY1ZSV1ZuZFhiR1J5VjJzNWFGWnNjRWhXTW5oaFZqSktXV0ZHWkZWV2JIQkhXbFZhZDFOV1NuTlRiV3hvWld4YVZsWnNZM2hOUm14WFdrWmtZVk5GY0ZsWmJGWmhZMFpXZEdWSVpHeGlSM1F6VmpJeFIxWXlSalpTYkdoWFRXNW9SRlp0ZUZwbGJVWkZVMjFHVTFKWVFrMVdWekUwVmpKTmVGUnVUbUZTVkZad1ZXeG9RMVJzV25SbFIzQnNVakZhTUZadGRHOVdWbVJJWVVac1dtRXlVVEJaTUZwWFl6RmFkVnBIYUZOaVJYQllWakowVTFVeFdrZFRiazVxVWxkNGFGWnNXbmRWUmxweFUydGtUMkpGY0hwWGExcFhWakpLVmsxVVVsZGlXRkpvVjFaYVlXTnJOVmRYYkZacFVqSm9kbGRXVWtOa01EVnpWMnhvYTFJd1dsUlVWbVJUVTBacmQxWnRSbWhpUlhCNVdUQlZOVlp0U2tkalJFNVZWbXh3YUZac1drdGpNWEJIVm1zMVYxWnVRVEpXTVdSM1ZESkZlVkpzWkZSaVIxSlZXV3RWTVZkR2JGaGtTR1JYVW14Wk1sVnRlR3RXTVZweVYyNXNXR0V5VW5wWlZscExWbFphYzJGR1pHaE5iRVl6Vmxod1IyTXhXbkpOVmxwb1VqTm9WRlp0ZUhkWFJscDBUVWhvVmsxck5YcFdiR2h6WWtaS1YyTklTbFZXYkZvelZGVmFVMk14WkhOVWJHUk9WbTVDVjFadE1UQlZNVmwzVFZoV1VtRXhTbUZhVjNSaFZFWldjVkpyZEdwTmExcEpWVzE0VDFkR1NsWmpSbFpYWVRGd1dGWnFSbk5YUmxaeldrWmtXRkl5YUZsWFZtaDNZekZWZUdKSVNscGxiRnBQVkZaa05HVldXblJsUlRsWFlsVndTRmxyVWxkV01WbDZWVmhrVjJKWWFHaFpla1pQWTJ4V2MxcEdUbGRpYTBwMlZtMXdSMkV4VFhoVFdHaHFVbGRTYUZWdGN6RlhSbEpWVTIwNVUwMVdjSHBXTWpFd1ZERktjMVpxVWxkU2JXaDJWakJrUzJOdFRrWlBWbVJwWW10S1dWWnRlR0ZaVjAxNFYyeFdVMkpGY0U5V2FrWkxUa1phV0UxVVVtaE5Wa1kwVmpJMVQyRnNUa2xSYkdoWFlXczFWRlJVUm1GWFIwMTZZVVpPYVZaVVZrbFdha28wV1ZaU2RGTnVVbWhTUlhCWVZXMTRTMU5HY0VoTlZrcHNWbXMxZVZZeWVHRmhWa3BaVVd4c1YxSnRVVEJWZWtaVFVqRmtjMXBHV21oTlJGWlZWa1prTUdReVZuTlhhMmhzVWpCYVdGWnFRbGROTVd0M1drYzVWMVpzY0hwWk1HUkhWbFphYzJOSGFHRlNWMUpZVldwR1UyTXhWblJpUms1WFlrZDNNbFp0ZUdwa01sRjNUVlprV0dFeVVsbFphMXAzVlVaYWMxWlVSbGhXYlhoWldrVldNR0pIU2tkWGJtaFdZbGhvVUZZd1drcGxSbVJ5WVVaa1RtRnJWWGRXYlhCSFdWWlplVlJyVmxOaVIxSllWV3hhZDFkV1duSlZhMlJUWWxaYVNGZHJhRXRYUjBwWlVXeFNXbUpHY0V4V2FrWmhaRWRPUm1SR1drNVdWRVV3Vm0weE5GWXhWblJTV0d4V1ltdEtZVmxVUmxabFJscHhVbTFHVkZJeFNrZGFSVnAzVmpGYVJsZHJjRmhpUmxwWVZtcEdZV014WkhWVmJGcHBZVE5DV0ZaR1l6RmlNVWw0WTBWV1UyRXpVbkpWYkZKWFYwWmFXR1ZIZEZkTlZuQklWakowVjFZeVJuSmpSRTVXVmtWd1QxcFZXazlqYkhCSFZHMXNVMDF0YUhaV2JHUTBZakZGZUZaWWFGWmlSbkJZV1d4V1lXTnNXblJsUm1SUFVteHdNRmt6Y0ZkV2JVcFdZMFZzVlUxV1NsQldNakZHWlVaa2MxVnNaRmROTW1ob1YyeGFZVll5VG5SVmEyUllZa2RTVkZac2FFTlRiRmw0V1ROb1QxSnNSalJXTWpWUFZtMUtjbU5HVmxwaVJscG9Wa1JHVjJOV1VuUlBWazVwVW01Q1dWWnFTWGhOUjBaR1RWWmFUMWRJUWxkWmEyUnZZMnhhVlZOcmRGZFdiSEI2Vm0xNGEyRldTbk5XYWxKWFZteEtTRmxVU2s5V01VcDFWbXhXYVZKWVFuWlhiR1F3V1ZaT1IxcElTbGRpVlZwaFZtcENkMU5HV1hsT1ZtUldZbFZ3U0Zrd1dtdFdWbHB6WTBkb1YxWldjRmhXYkZwTFpFWktjMVJ0YkZkV1JscEtWbXBLTUZsV1dYaFhXR1JPVjBVMVZWbFVUbTlYUmxwMFpVVjBVMUpzV25oVk1uUXdZV3N4V0ZWdWNGcGhNbEo2VmxSQmVGSXlUa2RpUm1SWFRUSm9lVlpIZEdGVE1WbDRWMjVPYUZJemFGUlpXSEJYVm14YVIxcEVRbXROVld3MFZsZDRhMWR0Vm5KWGJHaFdZbGhvTTFacVJsTmpNVnB5VDFab1UwMUdjRFZXVkVreFpERmFkRkpZYUdwU1YyaFlWRlZhZDAweFZuUk5WVGxUVFZVMWVWUnNXazlXTWtweVVtcFNWMkpVUWpSVWEyUktaVlpTV1dGSGJGTmlWa3BhVjFaU1IyUXlUa2RXYms1WVlUTlNWMVJXV25kbFJsVjVaVVU1VjFKVVJsaFdNbmhoVm14WmVsVnVTbHBXYlZKTVZXMXpNVll4Y0VkYVJUVnBZWHBGTUZZeFdtRlpWazE1VkZob1lWSnNXbFJaYTFwM1YwWlNWVk50T1ZkV2JIQXdWRlpvZDJKR1NuTmpTR3hWWWtad2NsWnFTa3RTTVU1MVVXeGFhVlpHV2tWV2JGWmhWMjFXV0ZScldsVmlXRUpQVm14b1ExTldXbGhOVkZKcFRWZDRXRlV5ZUhOVmJVcEdUbFphVjJKR2NHaFpWVnAzVWpGa2MxZHRlRk5pU0VJMVZrUkdZVk15UmxkVGFscG9UVE5DV1ZacVRsTlhSbHBWVW14a2FrMVhVbHBaYTFwaFlVVXdlRk5zYUZkaVdGSllWWHBHVDFJeVNrbFZiWGhUVmtkNFdWZFhkR0ZUTWxaWFZsaHNUbFpYVWxaWmExWnpUbXhzVmxadFJsZE5WbkI2V1RCb1MxZHNXa1pYYkVKYVpXdGFURll4V25kU01WSjBZa1prVTJKSVFsaFdiVEI0VGtaYWNrMVdaRk5YUjJob1ZUQldZVlV4YkhSamVrWlhVbXhhTUZwRlpFZFhSbHAwVlc1c1YySlVWbkpXYlRGSFRteEtjbHBHWkU1aGJGcFpWbTB4ZW1WR1dYaGFTRTVTWWtad1dGUlVTbTVsVm1SeVZXdDBWRTFWY0hwV2JUVlBWa2RLU0ZWck9WcGhNVm96VmtaYVlXTXhaSE5VYkVwT1ZsZDNNVlpVU1RGVU1WcFlVMnRrYWxKc1NsaFVWV1JUVmtaYWMxZHNUbGROVjFKNldUQlZNVll5U2toa2VrWllZa1phYUZaRVJtRlRSazV5VjJ4a2FHRjZWbGhXUm1NeFlqRmtSMWR1U21GU1dGSlpWbXBDWVZJeFVYaFhiVGxvVWpCV00xa3dVbUZXTVZsNlZXMW9WbUZyV25KVmFrcFBVbXh3UjJGSGJGaFNNbWhhVmpGamVFMUdUWGhYV0doWVlrWmFWRmxyWkZOV2JGSlhWbXhrVDFKdFVubFpWVll3WVVkS1JrNVZaRlZpUm5Cb1ZqSXhTMVpXV25KVmJGcHNZVEZ3V1ZadGVHRlNNazV6WTBWb2FWSXllRlJXYTFwaFYxWmFkR1JIZEU1U2F6RTBXV3RhWVZSc1dsaGhTRTVXWWtad2FGWnFSbUZrUlRGWFZHMXdhVkp1UVhkV1JscGhZVEZaZDAxWVNrOVdWMmhZV1d4b2IxWkdXbkZTYlVaWFZteHdlVlpYZUd0VWJVcHlVMnRXV0ZkSVFraFZla1pLWlVaT2RWUnRhRk5OUm5CVlZtcENWMU14V2xkYVJtUm9VMGRTVkZSVlVrZFRSbGw1VGxVNWFGSnJOVWRVYkZwUFYyMUZlVlJVUmxWaE1YQm9XWHBLUjFORk9WZGFSbVJPVTBWS1NsWnNVa3ROUlRWSFYxaHNWR0pIZUZaWlYzaExXVlpzYzJGSE9WWlNiSEF3V2xWYVQyRnRTa1pPVkVKV1lsaE5lRlpVUVhkbFYwWkdXa1prYVZKdVFtOVhWbEpMVW0xV1IxVnVWbFZpUlRWWlZXcEdTMVpXWkZobFJrNVhUVlp3V0ZZeU5VOVdNVnBHVjJ4T1ZWWnRVbFJhVlZwWFYwVTFWazlXV2s1V1dFSTFWbXBLTkdNeFpFaFNXR2hZWVdzMVdGWnFUazlPUmxaMFpVZDBhMVpzY0hwV01uTXhWakpLU1ZGc1NsZGlSbkJ5Vkd0a1UyUkdWbGxpUmxKb1RWaENXRmRYZEZka01XUkhWV3hvYkZKWVVsWlZiWGgzVjBaYVdHUkZPVlpOUkVaNVdUQm9kMVl4U1hwaFIyaFhZa2RTUjFwRVNrOVRSMFpIVm14a1YwMVZWak5XYkdRMFdWWlplRmRZYUdwU1YyaHlWVzE0UzJOR1ZuTlhiSEJzWWtad1dWUlZhR3RVYkZwelkwVm9WMDF1YUdoV1JFWmhWbXMxVjJKR2NGZE5NVXBOVjJ4a05GWXlUbk5hU0VwaFVtMW9WRmx0ZEV0VFJtUlZVVzFHVkUxV2JEUlZNbmhoWVd4S1ZWWnNhRnBpUjJoMldrZDRjMDVzU25WVWJHUk9WakZLTlZacVNYaGpNVlY0VjI1S2FsSnNTbGxXYWs1VFlVWldObEpzVGxOTmEzQktWVEo0YTFkR1NYbGhTR1JZVmpOU1YxUldXbHBsUm1SeVlVZDBVMWRHU21oV2JYaFRVakZrUjFkWWFGWmhNbEpZVkZWU1IwMVdiRlpYYkU1WFlYcEdNVmxWVm10WlZrcEdWMnhDWVZKV1ZYaFdha1ozVWpKR1IxUnJOVTVpVjJneVZtMXdSMkV3TlVkaVJtUllWMGRTVUZadE1WTldSbXh5V2tjNWFGSnNXbnBaVlZaUFZtc3hWMU5zWkZkaVZFWklXVlJHWVdNeFduRlZiR1JwVjBVd2VGWnNZM2hUTVU1R1QxWldWbUpIVW5CV01GWkxWMVphY1ZGdGRGUk5WV3cwVmtjMVMyRXhTbk5qUm1oV1lrWmFNMVV4V210WFJURlZWV3hXVGxadVFqWldiR014VXpGYVNGTnNXbGhoZW14WFdWZHpNV1JzVlhoWGJVWnFZa2RTTUZrd1pEUlZNa3BKVVZoa1YySlVSVEJYVmxwV1pWWk9jMVpzWkdsU2JIQlpWMWQwWVZadFZrZFdia3BZWWxWYWNWbHJXbmROVm1SeVdraGtWV0pHY0hsWk1GcDNWakF4ZFZWc2FHRlNSVnBZV1RKemVGWnNaSE5oUjJ4cFVtNUNXVlpyV21GWlZteFhWbXRrVjJKSGFITlZNRnAzWTJ4U1dHUklaRk5OVm5CWldsVldNRll3TVVWU2JuQldUVzVSTUZacVJtRmpNVTV5Vld4YWFHRXpRazFYV0hCSFZUSk5lRnBJVGxkaVYyaFBWVEJXUzJSc1duSlhiR1JvVFVSV1NGVXllR3RXTWtwSVZXMW9WbUZyTlZSV2JGcHpZMnhhYzFwRk5VNVdiRzkzVmtaV1UxSXhXWGhUYms1cVVtMVNWbGxyV21GVlJsbDNXa1ZrYW1KRk5URlpNRnBoWVVVeFdWRnJiRmRoYTBwb1drUkdTMlJHVW5KYVJsSm9aV3hhVlZadE1ERlJiVlpIVjI1T1ZtRXlVbGhVVmxwSFRrWldkRTVWT1doV1ZFSTFWbGMxUTFadFNrZGpSWGhYVmtWYWFGa3hXazlqTVZKelZXczFWMkpJUWxoV2JGcHJUVWRGZVZKc2FGUmhNWEJRVm0weFUxZEdWbkZVYkU1VlVtMVNXRlpzYUc5V1JrbDRWMnRrVjFJemFGaFdha1poWXpKS1JWUnNaR2xXUlVrd1ZtMXdSMWR0VmxkVmJrcGhVbTFTY0ZWdGRIZFhWbHAwWlVaT1YwMVZjRmhXTWpWVFlURktkRlZ1U2xWV00wNDBWR3RhWVZkSFZraFBWbkJYWVROQ1lWWldaRFJVTVZwWFYyeGtXR0pYYUdoVmJYaDNZVVpzTmxOclpGUldiRXA2V1RCYWEyRldUa1pUYTJ4WFRWZFJkMVpxUmxabFJscDFWR3hvV0ZJemFGaFhWbEpQVlRGWmVHSkdhR3RTV0ZKV1ZXMTRkMlZzV1hsamVrWnBVbXhzTkZZeWRHdFdWMHBJVld0b1YxSXphRXRhVnpGSFVteGtjMXBHWkdsVFJVbzFWakZhVTFJeFVYbFVXR2hVWWtkNGFGVnRjekZqUmxweVYyMUdXRlpzY0hoVlZ6RXdWREZKZDFkcmFGZE5hbFpNVm1wS1MyTnJOVmRWYkZwcFYwWktiMVpxUm1GaE1rNXpWMjVXWVZKc2NHOWFWM1JoVTBaYWNWTlVSbGROVm5CNVZGWmFhMWRIU2xoaFJtaFdZbTVDU0ZaRldtRmpWa3AwVW0xd1YySklRalpXVkVvMFlURlNkRk5yV21wU1ZFWllXV3RhZDFaR1ZsVlNhelZzVW0xU2VsZHJXbGRoVjBwR1kwaHdWMVl6YUZSV2FrcEhVakZXYzFkdFJsTlNhM0JWVm0weE5GbFdaRWRhU0VwaFVrVktXRlZxUW5kU01WcDBZMFU1VjJKVmNGWlZWbWh2VmpKRmVHTkhhRmRpV0UxNFZtMTRVMk15UmtoaFIyaE9VMFZGZVZadGVHdE5SbXhYVTFob1lWSlhVbkZWYkZwM1kxWldkR1JJWkZWTlZscDZWakkxYTFSc1duTmpSbHBXWWxob2NsWnNWWGhXYkdSMVkwWndhR0Y2Vm5sWFZscGhVekZaZUZSdVRsVmlSMUp2V1ZST1ExWldXbGxqUldSWFRWWndXRlZ0TlV0WlZrbDVaVWhDVm1KR1NsaFdNRnBoWTJ4d1JWRnNVazVXTTJoWVZrWmFWMkl5U2tkVGJHUllZa2RTV0Zsc1VrZFdSbXQ1WlVaYWJGWXhXa2RXTWpFd1ZHeGFXVkZZWkZkU00yaG9WbFJHV21WR1pITldiR1JvVFZWd1dWWkdZekZSTVVwSFlrUmFVMkV6VWxSVVZsWjNaV3hzVmxwRlpGWk5WMUpIVlRKNFUxWXhTbk5YYkdoWVZtMVNWRlpxUm1GWFYwWkhXa2RvVGxkRlNqVldhMXBoVm0xV1JrNVZaRmhpYkVweFZXMHhVMkl4YkhKV2JtUnNZa1pXTlZwRlVrTldNa3BIWTBWa1ZrMXVVVEJXYWtwTFVqSk9SazlYUmxkaVZrcFpWbGN4ZWsxV1pFZFRia3BQVm1zMVQxUlhNVzlUUmxwMFpVZEdXbFl3VmpWVmJHaHZWMGRLYzFOc2FGcGhNbEV3VmxSR2MyTnNaSFJTYkdSWFlraENObFp0ZUZOU01WWnlUVlpvVm1KdGFGZFdibkJYVlVaYVZWSnJkR3BpUjFKNFZXMTRhMVV3TUhoU1dHUllWbXh3YUZWNlJtRldNVTUxVm14a2FWSnVRbEJXYlRFMFpERldWMWRzWkdGU1JrcHlXV3hhUjA1V1ZYbGtSMFpYWWxWd1Ixa3dXbTlXVmxsNllVVjRWMDFHY0hKWmVrWnJaRVU1VjFOck5WZGlhMHBhVm0xMGEwNUdiRmRYYkdoVFYwZFNjVlZxU205V2JGcHpXa1pLVGxKc1ducFdNbmhyVmpBeFdWRnJiR0ZTVm5CVVdWWmFTMWRXUm5GV2JHUlRZa2hDTWxkWGNFZFhiVlpIWTBWYWFGSXphRlJXYkZKWFYyeGtWMXBFUWxSTmJGcDZWbTAxUzFkSFJYbFZia1pWVm14d2FGcFdXbmRTYkhCSlZHeGFUbFp1UWtoV2FrcDNVakZaZUZkcldsaGlSMmhZVld0V1lWTkdiRFpUYTNCc1lraENTVmxyV2s5V01rVjZVV3hXVjJKVVJqTlZla1pXWlVaU1dXRkdaR2xTYkhCVVYxWlNTMVV5VGtkaVNFcFhWa1ZhV0ZSV1duZFRWbkJHVm1wQ1dHSkdjRlpWYlhSeldWWmFWMWRzYUZkaVdHaG9Xa1ZhVjJSV1RuTlhhelZwWWxkb1NWWXlkRk5TTVUxNVZXdGFUMVp0VWxkWmEyUlRWMFphY2xkdFJsTldiSEI0VlRJMWExVnJNWEpOVkZKV1RXNVNjbFpVU2t0VFIwWklZVVphYVZJeWFFVldiRkpIVlRGYWMxZHVVbE5pV0ZKWVdXdGFXazFHV25STldIQlBWbXhhTUZVeWRHOVZSbHBHVGxkR1dsWkZXbWhXYTFwaFYwZFdSMk5IZUZkaVJuQTFWMnRXWVZsV1dYaFRiRnBxVWxkNFdWWnVjRVpOUmxwRlVtMUdhazFXV2pGVk1uaFRZVlphVjJOR1FsZFdNMEpRV1dwR1MyTXhaSE5hUm1ocFYwWktkbFpHV2xaTlYxWnpWbTVTYkZKdFVsZFpiRlpYVG14c1ZsZHRPVmROUkVaSlZsWlNRMVpXV2taWGJXaGFUVzVvYUZwR1dsTmpNVkp6Vkcxb1RsZEZSWGxXYlRFMFlUQXhSazVWYUZOaVIxSlZXV3RhWVZaR2JIUmxSMFpYVFZaS1dGWXlNVWRXYkVwelYyeHNZVlpYYUdoWmExcExZekpPU1dGR1pHbFdSVmw2Vm14U1MxTXhTblJVYTFwc1VtMVNXRmxyVm5kU1ZscFlZMFYwVkUxck1UUldWelZQVjBkS1IxZHNhRlppUm5BelZqRmFZVmRIVmtoUFZscE9Za1p3TmxadE1UUmhNV3hYVTFod1ZtSkdXbUZaVkVaaFYwWlNWVkpzWkd0U1ZFWkdWVzE0YTFVeVNrbFJiR2hYVWpOb1dGWkVSbXRUUmtwMVUyeG9hVkl5YUZkWFYzUnJWVEZXUjFadVJsTmlSMUp4V1d4Vk1WTkdWWGxqZWtaV1RWWndNVlZXYUc5V01rcEhVMnRvVjJGcldsTmFWVnBMWkZaU2RHSkZOVTVpUlhBelZteGtOR0V4VlhoWGJrNVlWMGRTV0Zsc1ZtRlhSbEpYWVVWT1dGSnNjREJhUldRd1lVWlpkMk5GWkZWaVJuQnlWbXBHU21Wc1ZuTlJiR1JvWVRGd1RWWnFSbUZXTWxKWVZHdGtZVkpyTlhCV2JYUjNUbFphYzFWcmRFOVNhM0F3Vmxab2IxWkhTbk5UYkVKWFlsaG9URll3V21Gak1WWnpXa1pPVTJKSGR6RlhWRUpYVkRKR2NrMVdXbXBTVjJoWFdXeG9iMlJzWkZkWGEzUllWbXRhZWxaSGVGZFdNVnB6WTBjNVdHRXhjR2hXYlRGWFVqRmtkVk5zUWxkaE0wSjNWbGMxZDJOdFZuTmFSbWhyVW0xU1YxUldXbUZsYkZsNFlVaE9WMkpWVmpaV1YzaHJWakpGZUZkcmVGWk5SbkI2V2tWa1YxSnJPVmRhUjJ4VFlUTkJNVlpzVWtwbFJrbDRWVzVPVkZkSVFtOVZiRnAzVjBaYWRHVklaR3BpUjNoV1ZXMXpOV0ZyTVZaalJuQllZVEZ3VUZsV1dtRlNNV1J6VjJ4a2FWZEhhRmhXUmxwaFVtMVdSMk5GYkZOaVJYQndXVmh3VjFaV1dsaE5WRUphVm0xU1dGZHJhRXRXTWtwMFZXeGtXbGRJUWtoVmFrWmFaVlUxVjFwR1pHaGxhMXBaVm1wS05GRXhXbk5YV0hCb1VrVndhRlZyVm5kVVJsWjBaVVU1YW1GNlZsaFdSM2h2VlRKRmVsRnNjRmRoYTI4d1YxWmtTbVZHU2xsaFJtaHBVakZLVjFkWGRHRmtNVnB6WWtaV1VsWkZXbGxWYlhoaFpXeHNWbGRyT1dsU01IQklXVEJXYjFkSFJYbFZXR1JYWVRKU1RGVnRlR0ZqVmxKelYyMXNWMUpWV1RCV2JURjNVakpGZUZScmFGZGhNVnBXV1d0a1UySXhVbGRYYm1SUFlrWndXVnBGWkVkVk1ERnpVMnhzVjFJelVuSldNR1JIVG14YWMyRkdaR2hOVm5Cb1ZrWldZVmxYVWtoV2EyaFFWak5DVDFac1duZE9iR1JZWTBVNWFFMXJXbGhWTW5oclZrZEtSazVXYUZwV00xSXpWbXRhVjA1c1NuTmFSbVJYWVRGd05WWXlkR3RqTWtaWFUyNVdVbUpWV2xsV2FrNVRaR3hzVlZKc2NHeFNhelY2V1ZWa05GVXhXbk5qUm1oWFlsUkNORlpVU2s5ak1WcFpZa2Q0VTFadVFubFdSbHBYWkRBeFIxVnVUbGhpUlRWWVZGWmFkMDFXVmxobFJVNVlVbXh3UjFZeU1XOVdNa1p5VWxob1YyRnJXa3haZWtwSFUwWktjMVJzYUZOV1dFSldWbTEwWVZZeFdYbFZXR2hZWW1zMVdGbFhlSGRXVm14WVpVVjBWMkpIZUhsWFdIQlhWR3N4V0dWSWJGZGlXR2hRVm0weFMxSXlTa1ZXYkdSWFRURkdNMVp0TVRSWlZrcHpWRzVLYUZKdVFuQldNR1J2VlZaYWRFMVVVbFpOYXpWNlZrYzFVMVV5UmpaV2JGSlZWa1Z3ZGxWcVJtRmpNV1IwVW0xb1RtRXhXVEJXYTJNeFZERlZlRnBGYUZaaVJrcGhXV3RhUzFkR1duTlhiVVpxVFZad1ZsVnRlRXRVYkZsNFUycFNWMVp0VFhoV1JFWldaVVpPZFZOc2FHbFNNMmhhVjFaU1IxbFZNSGhYYkdocVRUSm9WRmxyWkZOTlZscDBaVWRHVldKR2NIcFpNRnBIVmpGYWRGVlVRbUZTZWtaVFdsWmFUMk5zWkhOWGJXeFRWMFZLV2xacldtdE9SazE0Vld0a1dHSkhVbGRaVkVFeFZrWlNXR1JJWkd4aVJuQkpXbFZrUjFZeFdYZFdhazVhVFVkU2RsWnNXbUZYUmxaVlVXeGFhVkp1UWxsV2JYQkhaREZPU0ZWclpGWmlWM2hVVm0xNGMwNXNXbk5aTTJSclRVUkdXRll5ZEd0WFIwcEhZMFpvV2xZelRYaFdha1ozVjBkU1NGSnNhRk5pUlhBMlZqSjBWazVXVlhkTlZtUllZbTE0WVZSVlduZFVSbHBJWlVWMFdGWnJXbnBYYTFwclYwWk9SbE5yTVZkU00xSm9WbFJLVG1WV1RsbGpSMFpUVFc1b1ZWWnRNVEJrTVZwSFYyNVNhbEpZVWxkVVZscHpUa1phV0dWSGRGZE5WbkJIVmpKNGIxWXlTbGxVV0doWFlXdGFhRlV3WkZOU2F6bFhZVVpPVGxORlNrcFdiVEI0WkRGVmVGZFlhRlJpYkVwV1ZqQmtiMVl4VWxoT1Z6bFRUVmhDUmxWdGREQmhNVXBWVm14b1YxWXphSEpXYWtaaFVqRmtjbFpzWkdoaE0wRjZWbFpTUzFSdFZrZFVia3BoVW1zMWNGVnFTbTlpTVZwWVRWUlNhMDFyTVRSV01XaHJWakpGZWxWc2FGcGhNWEJZVkd0YVlXUkhUalpXYkZwcFZsaENTbFpFUmxOVU1XUjBVbGhvV0dKR1NsaFdhazV2V1Zad1YxZHNaR3BpVmtwSVZqSXhjMWRHU2xWU1ZFSlhZbFJGTUZkV1duTldNWEJIWVVaU2FFMVlRbFpYVjNoWFdWWlJlRlp1UmxWaVZHeFVXV3RhZDFkR1pISlZiRTVYWVhwR1dGVXlkSE5XYXpGMVZXMW9WMUl6YUdoVWJYaGhZekZhYzFwSGJGTmlSbGt3Vm14YVUxSXlSWGxVYkdSVFlteGFWbGxyVlRGV1JteFZVbTVrV0dKR2JEVmFSVnByWVRBeFYxZHViRlZXYkZwb1ZqQmtTMk14WkhOYVJsWlhZa2hDYjFac1ZtRldNV1JJVm10c1dHSllVazlaVkU1RFUwWmFjMXBFVWxSTlZtd3pWRlpvVDFaSFJYcGhSbWhYWWxob1RGVnJXbGRqVms1eVpFZHdUbFpyY0RaV2FrbzBWakpHUmsxVmJGSmlWR3hZVlcxNFlXTnNVbkpYYTNSWFRWWndlbGRyWkVkVk1EQjRVMnhhV0ZZelVsaFdha0YzWlVaYWRWVnJOVk5TVm5CWlZsY3hOR1F4V1hoVmJrNVhZWHBzV1ZWcVFtRmxWbFY1VGxoa1YySlZWalJaTUZadlZqQXhSMk5FVGxaaVZFWlFWV3BHVDJOck5WZFViR1JwWVRCWk1GWnRNVFJWTVVsNFYxaG9WbGRIYUZSWmJYTXhZMFpTVlZOc1RtcFNiRnA2VmpKME1GWnJNVmRqU0doV1RXNW9VRlpyVlhoV01XUnpZVVprVjAweFNsRldiWGhoVXpKTmVWUnJaRmhpUm5Cd1ZqQmFTMVJXV1hoWGJGcHNVbXMxU1ZadGRHRldNa3BIWTBab1ZWWkZjSFpXYkZwaFpFVXhWVlZzVG1sV2Exa3dWbFJKTVZVeFVYaFhiazVVWWtkb1dGbHJXa3RYUmxaeVYyeHdiRll3TlVkV1J6RjNWR3hhV1ZGcmJGZFdla1V3V1dwR2MxWXhUbk5pUmtwcFVsUldWMVp0ZUdGWlYwWkhZMFZrV0dKR2NITlZiWGgzWlZaUmVGZHJkR2hXYTI4eVdWUk9kMWRHV1hwVmJHaFhWa1ZhV0ZsNlJtdFhWMHBIVjIxb1RrMVZjRmxXYlRFd1ZqRk5lRlJyWkdsVFJrcHpWV3hTYzFkR2JISlhhM1JzVm14V05WUldWbXRXVjBwSFkwaHdWMDFXU2tSV2FrWmhZekpPU1ZOc2NGZFNWbkJSVjFod1IxTXhaRmRqUldSVllsZDRXRlZ0ZUhkV01WcDBUVlJTVjJGNlJsaFZiR2h2V1ZaT1JsZHNUbHBpV0UxNFZtdGFWMlJIVWtoU2JHaFhZbFpLTlZadE1ERmhNVnAwVW1wYVUyRXlVbGhVVjNCWFYwWmFkR016YUZkTlYxSjZWVmQ0WVZZeFNsZGpSemxYVmpOQ1NGZFdaRTlqTVZwMVZHeFNhVkl4U2xCWFYzUlhaREZTVjFkdVRsaGlSVFZUVkZaV2MwNVdWWGxPVlRsWFZqQndTRmt3V21GWGJGcEdVMnBPV2xaV2NGUldiWGgzVWxaV2MxUnNaR2xTYmtKYVZtcEtNR0V3TVVkWGEyaFVZVEZ3V0ZsWGN6RldNV3h6Vld0S2JGSnNjSGxXTWpGSFZqSkdObFpzWkZkU00yaDJXVlZrUm1ReVRrVlhiR1JYVFRGS2IxWlhjRWRoTVVsNVZHdGFXR0pZUWxSWlZFNURWVVphV0dWSFJtdE5SRVpZVmpKNFYxVXlTa2hWYkZwVlZteGFhRnBYZUhOalZsSjBaRWRvVjJFelFsbFdWRW8wVkRGWmVWSnVTbXBTYkVwWFdsZDBZVmRHV25OWGEyUnFZa2hDU1ZsclpITlZNVnBIVjJ4c1YySllVbkpVVlZwT1pVZEtSMWRyTlZkV01taDZWbGQ0WVZsV1dYaFhibEpPVm1zMWNWbHJXbGRPVm5CV1ZtMUdhRTFFUmxkWk1GSkRWbGRLUjJOR1VsZGhhMXBvVm14YVlXTnNWbk5hUlRWcFlUQndSbFl4YUhkU01VbDVWRzVLVGxac2NGbFpiR2hUVmtac2MxcEhPVmhTYkhCSVZtMTRhMWRzV1hoVGJHaFhZa2RvZGxacVNrZE9iVXBIVkd4V1YySldTbFZYYkZwaFl6Sk9jMWR1VGxWaVJuQndWVzB4TTAxV1duTmFSRUpPVW14d2VsWXlkR0ZXUjBWNVlVZEdXbUpIYUhaV1ZWcGhaRWRXUjFSdGNHbFNWRlYzVmxjeGVrMVdWWGROU0d4b1VsZFNXRmxyV25kaFJteFZVMnRhYkZKc1NqRldSM2hQVjBaSmVGTnNWbGhXTTJoVVZtcEdZVll4WkhWVWJHUlhVbFp3VkZaR1dtdFZNbFpIVm14b1QxWlViRmRVVmxaM1pWWlplV1ZJVGxoU01GWTBWakp3VDFZeFdYcFVhbEpXWWxob2NscEdXbUZqTVhCSVlVZG9UbGRGU2xOV2JYaGhZVEExU0ZWdVVsWlhSM2hWV1ZSR2QxWXhiSEpXYm1SWVVteEtXVnBWVmpCV1ZrcHpZMFpvVjFZelVsQldWRUY0WTIxT1NXTkdaRk5OTW1odlZtMTRhMUp0VVhsVWEyaG9VbXhhV0ZacVJrWmtNVnBZWlVkR1YwMVdiRFJaTUZadllURktjMU51UWxaaVJuQmhXbGQ0WVZaV1RsbGhSazVPVm01Q1NWWnFTalJaVmxGNFYyeGFUMVp0ZUdGV2FrNVRWRVp3V0dWR1pHcGlSMUo1VjJ0YWIxVXlTbkpUYTJoWVZrVkthRlY2UmxOak1VNXpXa2R3VTFKV2NGbFdiWFJYV1Zaa1IxZHJWbE5oTWxKeFZGZDBjMDVzWkhKYVNFNVdUVlp3ZVZrd1dsTldNa3BaVVd0NFYxWkZXazlhVlZwaFl6RmFjMU50YUU1aVJYQXpWakZrTUZack1WZFhXR2hZWVRKb2NsVnNhRk5aVmxwelZXdGtWRlp1UWxkV2JYaHJWakpLUjJORVFsZFdlbFpNVm0xemVHUlhSa1phUjBaVFVsWndUVmRyVmxaTlZsbDRWbTVPWVZKdFVsaFZiWGgzVW14YWRHTkZkR3ROVlZZMVZrWm9iMVpIUlhsVmJGSmFZVEpTZGxsVldsZGpNa1pHVkd4YVRsWnJjRmhXYlRCNFVqSkZlRmR1VGxkaGJFcFlXV3hvVGsxV1dsaE5WWFJVVWxSc1ZsWkhlSGRoUlRGWFkwWldWMkpIVVRCV01qRlhWakZhZFZOdGRGTmlTRUpaVmxkNFYyUXhUbGRhUm1oT1ZrWktWbFJXV25kbGJGVjVaVWhPV2xacmNIcFZNbk0xVmpKR2NtTklXbFpoYTFwb1ZtcEdhMlJGT1Zoa1JUVlhZVE5CTVZacldtRlpWMDE0VjJ4b1UySnJOWEZWYlhoM1YwWnNkRTVWVGxOU2JFcFdWVzB4TUdGc1duSlhha1pYVWpOb1VGWlVTa1psUjA1SFkwWmtUbUpzU2xsWGExSkhWakpPY2sxV1dsaGlSMmh3V1d0YWQxZEdXa2RYYlVaYVZteGFTRlp0ZUc5aVJrNUhZMGhLVlZZelVqTlZha1poVjBkV1JtUkdaRTVTUlZvMlZsUktNRTVHV1hoWGJrNVVZVEZLVjFsWGRIZFVSbXcyVW14T2FrMVhVbnBXYlRGdlZHeE9SbE51V2xkaE1YQllXVlJCTVZJeFRuTmFSbVJwVWpGS2IxWlhjRTlWTVZwWFlraEtWMkpIVWs5VVZscGhUVVpTVmxWclpGZE5WWEI2V1RCYWExWlhTa2RYYkVKWFRVZFNTRmt5ZUU5a1YwNUhWMjFvVGxkRlNrcFdiWEJEV1ZkUmVGTnVVbFZoTWxKVldWaHdWMVpHV25ST1ZVcHNVbXh3ZWxaWGRHdFdNREZYVW1wU1ZtSlVWbEJaVmxWM1pWWldkVkZzV21sU2JrSk5WbXhTUjFsWFRsZFViazVWWWtaS1QxWnRlSGRXTVZwWFdrUkNhRTFyV2xsVk1uUmhWREZhZEZWc2FGWmhhelZVVmtWYWExWXhXbGxoUmxKVFRWWndTRlp0TVRSWlZsbDVVMnhrVkdKdGVGaFdhMVoyVFVaV2RFMVdTbXhTYXpVeFZsZHpOVll5U2taalJteFhZbGhvVkZacVJrdFNNV1JaWWtkd1UxWlVWbmhXUmxwWFpERk9SMVp1VW14U2VteGhWbTEwZDFkc1ZsaGxSVGxYVm14d1dGWXlNVzlaVmtwelkwWmtZVlpXY0doWk1uTTFWakZPZEdKR1RteGlXRkV5Vm1wR2EwMUdXWGhXV0doWFltczFXVll3WkRSV01XeFZWR3hPVjAxV2NIbFdiWFF3VmtaS2RHVkVRbUZXVmxVeFZtcEtTMUl4VG5WaVJscE9ZV3RhU1ZaclpEUlRiVlowVW10YVdHSkhVbGhaYTJoRFpWWmtWMVZyWkZWTmF6RTBWVEo0YzFsV1NuSk9XRUpYWVRGd2FGWnRlR0ZrUjFaSFYyczFWMkV4V1RCV01uUnZVakZXZEZOdVNrOVdiRXBYV1d4b1UyRkdXWGhYYlhScVlrWndNVmRyV21GaFIxWnlWMnRvVjJGcmEzaFdha1poWTJzeFYxcEdhR2xTVlhCWVZtMXdUMkl3TVhOalJWWlVZVE5TVkZscldtRmxiRlY1WlVkMFZXSlZjRWRaTUZadlZqSktXV0ZIYUZwV00wMTRWakJhVDJSV1VuTlhiV2hPWWxkb05sWnNaRFJWTWsxNVVtdGthVk5GTlZoV01HUnZWVVpXZEdWSVpGUldia0pYVmpKek5XRkdTWGRqUm1oWFRXNW9jbFp0TVV0V1ZrWlpZVVprYUUxWVFtOVdiVEY2VFZaYWMxVnVUbWhTTW1odlZGVm9RazFzV25OVmEyUmFWbXhXTlZaR2FHOVdNa3B5VGxac1dsZElRbGhXUkVaWFkyeGFkRkpyTlZkaVNFSlhWbGN4TkdFeFdsWk5WbHBZWVd0S1dGWnFUbTlqYkZweFVtMTBWRkl3V2toVmJYaHJWR3hKZVdGRlZsZGlXRUpJVmxSR1dtVkdaSE5XYkU1b1pXMTRkMVpYZUZOV01XUkhWMjVLWVZKRlNsVlVWbVEwVmpGU1YxWnRPV2xTYTNCWVZqSjRhMVl5U2xWU2JGSmFUVzVvZWxZd1pFNWxiVVpIV2tkb2JHSkdjRnBXYlRCNFRrZFJlVk5yYUZOWFIyaFlWakJrYjFkV2JISmFSa3BPVW14d01GUldXbXRWTURGWFYycEdWMkpVUmpOV1ZFWnJVbXhPYzFWc1pGTmlSbkJaVmpGYWExVXhXWGhYYkd4b1VtMVNiMXBYTVRSV1JtUllaVWRHVkUxWFVraFdNalZQWVVaS05tSkdaRlppVkVaVVZUSjRWMWRIVmtoa1JtUlhZa2hDTmxadGVHOWlNVnBZVTJ4c2FGSnJTbGhaYkdodlZrWnJlV1ZGT1d0U2EzQjVWR3hhVDFSck1YUmhSVEZYWWxSRmQxbFhNVmRTYXpGV1drWm9hV0V6UWxCV2JURTBaREZXUjFkdVZtcFNWMUpaVlcxNGQyVldXblJOVldSWFlrVndlbGt3YUhOV01ERjFZVWRvV21FeGNFeFpla1pQWkZkT1IxcEdaRTVOYldRMlZqRmFZV0V4U1hkT1dFNVVZbXhhV0ZsclduZFVNVnAwWlVoa1ZsWnNjRmhYYTFKVFlUSktWMWRzYUZkV00yaDZXVlZhUzJNeFpIVlJiRnBwVjBaSmVsZHNWbUZoTWsxNFdraE9ZVkpyTlU5WlZFNURUbXhhY2xwRVVscFdiSEJZVmpKMFlWZEhTa2hoUm1SYVlrWktTRmt5ZUZOa1IxWklVbXhTVTAxV2NFbFdhMlEwWVRKR1NGWnVTbFJYU0VKWVZXMTRkMk5XVWxkWGJVWlRUVmRTZWxZeWN6VldNVnBWVm14d1dGWnRVWGRWZWtaaFVqRmtjMkZGTlZkWFJVcDZWMWQwWVdReVZuTlhXR3hxWld0YVdGUldXbmRUUmxWNVkwWmtWMDFyY0ZwVlYzUnZWMFphYzJOR1VtRlNWbkJRV1RKNGEyUkhUa2RVYld4WFRXMW9XRlp0TUhoa01VMTRWbGhvVlZkSGFGaFphMXBoVlRGc1ZWTnNUbXBTYlhoNVYydGFUMkpHV25OalJXeGhWbGRTU0ZsVldtRmpiVTVKWTBaa2FWZEZTbFZXYlRFMFdWZFNSMVp1VmxSaVJuQlBXVzB4YjFOV1draE5WRkphVmpBeE5GWXlOVTlaVmtwMFZXeFNWMkV4V2t0VVZWcGhaRWRPUm1SRk9WTmlSM2Q2VmtkNFlXRXhaRWhUYTJob1UwVTFWMWxzVWxkU1JteHhVbTFHYWsxV2NEQlZiVEV3VmpKS1IxZFVRbGRpVkVZMlZHeGFWMk5yTVZsVGJHUm9ZWHBXYUZaR1ZtRmtNVnBIVjI1R1ZHRXpVbFJVVmxVeFpXeGtjbGR0UmxWaVJYQjVXVEJhYzFZd01WZGpSMmhZVm14d2NsWXdXazlqYkhCSFlVZHNWMDB5YUZaV01XUTBZakpKZDAxSWFGaGlSMUpaV1d4b1UySXhVbGRXVkVac1lrWmFNRmt3WkVkV01ERnlZMFZvVjAxdWFIWldha3BHWlVaYWNWUnRSbGRXYmtKb1YyeGFhMVl4U1hoalJWcFFWbTFTY0ZVd1ZrdFpWbGw1WlVaa1dsWXhSalZWYlhSclYwZEtSMk5HYkZwaVdHaG9WbXBHVTFZeFpIUlNiV2hUWWxoamVWWlhNSGhTTVZWM1RWWmthbEp1UW1GV2JGcDNWMFpzVmxkdGRGTk5WVFY2V1ZWYWIyRldTblZSYlRsWFRWWndhRmRXV2xwbFJuQkpWR3hrYVZKVVZuWlhiR040VGtaa1YxZHNhRTVXUmtwWVZGVlNWMU5HV25SbFIzUmFWbXRzTmxaWGVGZFhiVVY0VjJ4b1ZWWkZXbGRhVmxVeFZtMVNSMXBHVGs1VFJVcEpWbXRrTkZsWFNYaFhXR3hUVjBkb2NWVnRNVzlXTVd4VlVtNWtWRkpzYkROV01qVnJWVEpHTmxKc2JGcGhNWEJRVm1wR1MyTXlUa2RoUm1Sb1lUSjNlbGRzVmxaTlZrNUhWV3hzYUZKdGFHOVVWbWhEWlVaYVdFMVVVbFJOVjFKSVdXdG9UMWxXU2tkVGJGWlZWbXh3YUZadGVGZFhSMUpJWkVkb1YwMUlRa2hYVkVKWFlqRmFkRk5zVmxkaWEzQllXVmQwWVZSR1dYaFhhMlJxVFd0YVNGZHJXazloVmxweVkwUldWMkpHU2t4VWExcExaRVpXV1dGR1ZtbGlSWEJSVm0wd2VGVXhaRmRXYmtaVllsUnNXVlp0TVZOWFJsbDVaVWQwYUdGNlJsZFpNRlp2Vm0xS1ZWWnNVbHBXUlZwTVZqRmFWMk15UmtkalJtaFVVbFZ3U2xacldtRlpWbHAwVm10a1dHSnJjRkZXYlhSM1kwWldkV05JU214aVIxSlpXa1ZhYTJGRk1WZGpSbWhYVFZkb00xbFZXa3RrUmxaMFlVWmthVmRIYUc5V1ZFSmhZekpTU0ZacldsQldiVkp3VlRCV1MxTkdXbkphUkZKb1RWWldORmRyVm1GV1IwcEpVV3hvVjJFeFdtaFpNbmh6VmxaS2NrOVhjRTVXVkZaaFYxWldZVlF5UmxoU2FscFhZa2Q0V0ZsWGRFdGpiRkp5V2tVNVYwMVlRa3BWYlhoTFlWZEdObFpzVmxkV2VrVjNWMVphYTFZeGNFbFRiR1JwWWxaS1dGWkdWbE5TTVVsNFlUTmtXR0pWV2xoWldIQkhUVlpzVm1GRmRGZGhla1l4V1ZWU1MxbFdTa1pqUlhoV1lsaG9NMVZxUm1Gak1YQkdUbFUxYVZZeWFHRldiWEJMVGtac1YxZFlhRlJYUjNoVldXMXpNVlpzYkhKWGJtUm9VbXhhZWxac1VrZFhSa3B6VjI1d1dsWldXbEJXTUZwaFl6RmFjVlZzYUdoTmJFWXpWbTEwYTFNeFNuTlhia1pWWWtad2NGWnJWa2RPUmxwMFpFZEdXbFpzY0hsVWJGcGhWbGRLU0dGSE9WcFdSVm96VmpGYVlWTkhWa2hTYkhCWFRVUkZNRlp0TURGVE1rWnpVMjVLYWxKVWJGZFphMXAzVFRGU1YxZHRSbGRXYTNCNlYydGFWMVJzV2xkalJGcFlWak5DVUZsVVNrZFdNVTV6WVVkb1UySldTbGxYVm1SNlRWZFNjMWR1UmxOaWJWSllWRlpvUTFJeFVYaGFTRTVvVm10d1ZsWnRlRzlXTWtWNVZWaGtWbVZyV25wV2JYTjRWakZ3UjJGR1pGTldia0phVmpGa05HSXlTWGhYYTJSWFYwZDRjMVZzV25kamJGSlhWbTVrVGxKc1NucFdNakExVmpBeFYyTkVSbFpXTTJoRVZqQmFXbVZzVm5SaFJuQnNZVE5DVVZaWGNFZFRNazE1VW10b1UySkZOVmhaYTJoRFYxWmFkR05GVGxkTlZURTBWakkxVDFZeFpFaGxTRTVXWVd0S2FGWnRlSE5qYkd3MlZtczFUbFl6YURWV2JURTBWREZhZEZOclpHbFNSbHBZVm1wT2IyTnNaRmRYYlVacVRXczFTVmxWV210aFZrcDFVV3hHVjJKVVJUQldWRXBQWXpGV2RWUnRSbE5oZWxaYVZsZDRWMlF4WkhOWGJsSnJVakJhYjFSWGRGZE9SbHBJVGxVNVZrMVhVa2xXVjNoVFYyMUtSMU5zYUZkaVJuQm9XWHBHYTJSV2NFZFdhelZYVFRKbk1WWnRjRXRPUjBWNFZWaG9XR0pyY0ZsWmEyUTBWMVpzVlZKdFJrNU5WbkJaV1hwT2IxVXlTbFpPVldoWFRXNW9hRlpITVV0a1IwWklUMVprYUUxc1JYZFhhMk40VlcxV1YxUnVTbGhpVlZwVVdXdGFkMWRXV2tkVmEzUnBUVmRTU0ZkcmFFOVhSMHBJVld4U1ZWWXpVak5hVjNoaFUwZFdTRkpzWkZkTlJsbDZWMVJDYTJJeFdsZFhiR2hXVmtWS1YxbHJXbmRYUmxsM1drWmtVMDFXU25wV1YzTXhWakpLY2xOVVJsZGhNWEJvV1ZkemVGWXhaSEphUm1ocFVqRktlRlpYZUZOak1XeFhZa1pXVTJKdFVsbFZiWGhMWld4WmVXUkhkRmhTYTNBeFZWZDBhMWRyTVVkalJYaFhVak5vVEZZeFdrZGpNWEJIV2taa1UxWjZhRE5XYWtaaFdWWlZlVlJZYkZSWFNFSm9WV3BLTkZaR1duUmtTR1JYVW14d01Ga3dWakJXYXpGV1RWUlNWMkpZYUZoV1Z6RkdaVlpXZFZGc2NHaE5XRUY2Vm1wS05HTXlUbk5hU0ZKclVtMVNUMVpzYUVOWGJHUnpWbXhrVjAxV2NIcFdNalZUVm0xS2NtTkdaRlZXZWxaMlZXcEdkMUpXU25Ka1IzUlRWa1phV1Zac1pEUmhNVmw1VTI1S1ZHSkZXbGhVVm1SU1pERmtWMWRzY0d0TlJGWllWMnRhVDJGV1NYbGhSemxYVmpOb2RsVlVSbFpsUmxaelYyeGthVlpXY0hsV2JURTBaREpXYzJKR1dtaFNWR3hZVkZWU1IxZEdhM2RXYlhSWVlsVldORll5ZUZOV01WbDZZVWRHWVZac2NGaFpNakZUVWpGa2RHSkdhRk5XUmtZelZtcEdiMlF4U1hoaVJtUmhVbTFvVlZsVVJuZFdWbXh6Vm0xR1ZVMVdXakJhUldoclZqRktkRlZzV2xaV2VrWklWbTF6ZUZack1WVlZiR1JPWVd4YVRWWnJaRFJaVlRWelYyNU9WMkpIVW5CVmJYaFhUa1phVjFWclpHaE5helZZVlRJMVYxbFdTbkpPVmxKVlZsWktXRlV4V21Gak1YQkZVVzEwVGxac2NEVldSbHBYV1ZkR2MxTnVUbXBTYlZKV1ZtcE9RMUl4VWxaWGJVWlVVakZhU2xZeU1UQlViVVY2VVd0b1YySkhVVEJWZWtaYVpEQXhXVlJzVW1oTk1taFpWbTAxZDFJd05YTmpSbHBoVWxSV2MxVnRNVk5sYkd4eVdraE9WazFXY0ZwVlZ6QTFWakZLYzFkdVNsVmhNWEJNVm1wR1lXTXlSa1pPVm1SVFZsaENXRlpzWkhkUk1sRjRVMWhvVm1KSFVtRmFWM1JoVjBaV2RHVklaRmhTYlhRelZteFNWMWRIU2xaalJXaGFUVVp3ZGxac1pFdFNNazVHWVVaa1RsSnVRWHBXVnpCNFZERkplRlJ1U2s5V2F6VllXVzEwUjA1R1duUmxSazVUVFZac05GWldhRzlWTVdSSVlVWnNXbFpGV2pOWk1WcFdaREZhVlZKc1pHbFNia0kwVmxSS05GUXhXa1pOVm1SWVlXdEtZVnBYY3pGa2JHeFlZek5vVjAxck5VaFpNRnAzWVVVeFYyTkZNVmROVm5CWFdsVmFUMU5HV25KWGJHUnBVbTVDV1Zkc1pEQldNREI0VjI1S1YySllVbFZVVmxaM1pWWlNWMWR0T1ZWTlZuQjZWVEo0YjFZeVNrZFRiR2hXWVRGd1lWcFdaRTlTYkZKMFkwVTFWMWRGU2twV2JHTjRUa2RKZUdKR1pGUmlhelZ4VlRCVk1WZEdiSE5WYkdSVFVteHdNRnBWV21GaVJrcHpZMGhzVlUxV2NFeFpWbHBMVG0xRmVtTkdhRmROTVVwWlZteFNSMVl5VFhoYVJteHBVbXh3YjFSVVJrdFhSbVJZWlVjNVZVMUVWa2haTUZaaFYwZEtWbGRzYkZkaGEwb3pWV3BHVm1WVk1WWmFSbFpwVWxkM01sZFdWbGRaVmxsNFYyNU9hbE5GY0dGV2ExWmhZVVp3UmxkdFJtcE5XRUpJV1ZWa2MxVXlTa2xSYkdSWFlsUkZNRlp0YzNoV01VcFpZVWRHVkZKV2NGUlhWekY2VFZaYVYxWnVVbXhTTUZwWldXdGFZVTFHY0ZaYVJXUm9WbXR3ZWxrd1dtdFdNREZ4Vm14b1YySlVSa2RhVldSUFVtMUdTRkpzVGxOV2JrSjJWbXhqZDJWR1VYaFViR1JXWW1zMVdGbHJaRk5VTVd4eVZtNWtWVlpzY0hwV01uaFBWV3N4Vm1KRVRsVldiSEJ5VmpCa1MxTkhWa2xSYkZwT1VqRktWVlpxUW1GV01rMTRZMFZXVm1KRk5WaFphMXAzVjJ4a2MxWnRSbFZOVm5CSFZGWm9TMkZzU2xoVmJGcGFZVEpTVUZScldtRmpWa3AwVW14T2FHVnNXbGhXUkVaaFlqSkdTRkpZWkdwU1JuQllWbXBPUTFOR1dsVlNiWFJUWVhwR1dGZHJXbTloVm1SSVlVWnNWMkpZYUdoYVJFRjRWakZrYzFac1RtbFNNVXBYVjFab2QxSXhaRWRYV0d4clVqQmFiMVJXVlRGU01WSnpWMjFHVjAxcldubFpNRnBUVm0xV2NsZHNhR0ZTVjFKUFdsY3hSMU5IVWtkVWJXeFVVbFZ3YjFacVJtdE5SbGw0VkZob2FWSnNjRTlXYkdSdll6RldjMWR0UmxkTlZuQXdWRlphVDJGdFNrZFdhbFpoVmxaYWFGbFVRWGhXYXpWWlkwWmthVmRIYUZWWFZscGhZVEZPU0ZKclpGSmlSMUpQV1cxMFMxSldaRmxqUldSVVlsWmFTRlp0TlU5aFJrcFZWbXhvV21FeWFFUmFWM2hoWkVkV1IxcEdjRmROVlhCWlZtMTRiMkl4V1hsU2FscFhZWHBzV0Zsc2FHOU5NVlp4VW01a1UySlZXa2RVTVZwclZqSktTR1I2UmxkaVIxRjNWRlZhWVdNeFpISlhiRkpvVFcxb2FGZFhlRzlpTVZaSFYyNVNiRkpyTlhGWmExVXhUVVpXZEdONlJsZE5hM0JKV2tWU1UxWXlTbGxSYTNoVllURndWMXBWV2xOa1ZsSnpWR3hvVTAxVmNGWldNV1EwVlRGWmVGZHNaRmhpYXpWWVZtdFdZVlV4VWxkYVJrNXNVbXhhV1ZSc1ZUVldhekZGVW14b1ZrMXVhSHBXYkZwaFl6Sk9TR0ZHWkZOTk1taHZWbFJDYTFZeFNYaGFTRTVvVW0xU1ZGWnJXbHBOYkZwelYyMTBUMUl4U2pCV2JYUnJWMGRLY2xkc2FGcGhNbEoyV1RCYVYyUkhVa2xhUmxaVFlraENXVlpzWkRCVU1WVjNUVmhLYWxOSVFsaFdhazVUWkd4c2NsZHJkRmRXYkhBeFZXMTRhMkZXWkVoaFIyaFhVbXh3YUZacVJscGxSMDVHWVVkMFUyRjZWbGxYVjNSaFpERnNWMWRzWkdGU1JrcFlWRlphZDFOV1ZYbGxTRTVvVW10d2VWVXllSE5YYlVwSFUydG9WMUpGV2pOV2FrWnJZekZ3U0dORk5WZGlTRUV5Vm0xd1MyVnJNVmRYV0doWVlURndXVmxYZEdGWFJscHlWbTFHV0ZKc2NFWlZiWFJoWWtaS2RGVnViRmROYWtZelZtdGFTMVpXV25OYVJtaFhZa2hDTWxac1VrZFhiVlpIVm01T1lWSnRVbTlVVjNoTFpERmtXR1JHV2s1V2JHdzBWakZvYzJGdFZuSlhiVGxYWWxob00xcFhlR0ZrUjA1SFZHeGtWMVpGV2xwWFZsWlRWREZrUjFkdVRtcFNXR2hoVkZjMVRtVkdXbkZTYlVacVRWaENTRmxWV2s5VWF6RjBZVVZhVjJKWVFreGFSRVpHWlZaU1dXRkdVbGhTTW1oWVYxZDBhMkl4VVhoWGJsSnNVMGRTY1ZSV1duZGxiRnAwVFZWa2FFMVdjSHBXYlhCVFZqSktXVlJVUmxkV2VrWk1WVEJWTlZaV1VuTmpSMmhPVm01Q1ZsWnRlR3BsUmsxNFUxaG9WV0pyY0hOVmJUVkRZakZTVjFkc2NFNVNiVkpaVkZaU1UxWlZNVmRqU0hCWVlUSm9URlpFUmxwbFYxWkhZVVp3YUUxWVFtaFdSbFpoV1ZaS1YxTnVVbEJXTTFKUFZtcE9iMWRXV2xWVFZFWlVUVlpHTkZZeU5VOVhSMHBJWVVab1ZWWlhVbE5VVlZwWFZsWktkR1JIY0ZkaE1XOTRWbXRrTkZReFZYbFNXR2hxVW01Q1dGUlhOVk5YUm5CRlVteGthbUY2UmxkV01uaHZZVmRLUjJOR2JGaFdNMUp5V1dwS1YyTXhjRWRhUm1ocFZsWndWVmRYZUZka01VbDRWMnhvYkZKWVVsaFVWVkpIWld4VmVXUkVVbGROVm5CNlZUSjBVMVp0Um5KalJYaGFaV3RhVkZsNlJtdGpNa1pJWVVkNGFWSnVRWHBXYlRCM1pVVTFSMWRZWkU5WFJUVlhXVzF6TVZkV2JISldWRVpZVW0xNGVWWnRlR3RVYXpGWFYycENWVlpXU2toV2FrRjRWMFpXY21KSFJsZFdNVW95Vm0xd1MxSnRWa2hVYTJ4WFlsVmFXRlJVU205V1ZtUnlWbTEwVmsxVmJEUlhhMmhMVkRGYWRGVnNhRlppV0dnelZqQmFZV014Vm5KYVJtUk9WbXRaTUZaWE1ERlVNa1pXVFVoc1ZtSkhVbUZaVkVaaFRURnJlRmRzWkd0U01WcEhXa1ZhVjFVeVNsbGhSRlpYWWxob1ZGVlVTa2RrUms1eVdrZHNVMUpyY0ZsV1JtTXhWR3N4VjFkWVpHRlNWbkJ6V1d0V1lXVnNiSEpYYlVaVllrWnNORlV5TlhOV01WcEdZbnBDVm1KVVJsTmFWVnBUWkZaU2MxcEhiRk5oTTBJelZtMXdRMkV5U1hoV2EyUllWMGQ0Y1ZWc1ZURmpWbEpYVm01a1ZGSnNXakJhVldNMVYyeGFjbU5HY0ZaV00yaFVWako0YTFOV1JuSmhSbFpYVm01Q2IxZFljRWRXTWs1eVRsWmFUMVp0VW5CV2JYUjJUV3hhZEUxVVVtbE5hMncwVmpKNGIxWkhSWGxsUms1YVZrVTFWRlpxUm1GamJGcHlaRVpTVTJKWVozZFhiRlpXVGxaWmVWTnJhRlppYlhoV1dXdGtVMlZzV25GVGEzUlRUV3RXTmxsVldtdFdNa3BKVVc1c1dGWnNTa2hXUkVwT1pVWk9jMkpIUmxOaGVsWjNWbTEwWVZsV1duTlhibEpzVW14d1QxWnRkSGRUUmxsNVRsVjBWMDFyY0RCV1Z6VkhWbFphYzJORmVGZE5WbkJ5V1RKNFlXUldjRWRYYXpWb1RWZDBOVlpzWTNoa01VVjRWMWhzVkdFeVVsVlpXSEJ6Vm14YWRHVklaR3BpUjNjeVZXMHhSMWRHV1hkWGEyeGFWbFpWZUZsV1pFdFhSMFpJVDFaa1RsWnVRbTlXYlhCSFUyMVdWMVJ1VmxWaVJscHdWVzAxUTFZeFpGZFZhMDVyVFd0YVNGWlhlR0ZaVmtwSFUyeFNWMkpZYUdoV01GcHJZMnh3UlZGc1pFNWhNMEpaVm1wS05HSXhaSEpOVldScVVtMW9XRmxVUm5kaFJscDBZM3BHVjJKR1NucFpWV1J2WVVVeFNWRlVTbGRpUjFGM1YxWmFTbVZHY0VaYVIzQlRWbTVDZUZaWE1YcE5WMGw0WTBab2ExSnVRbkpVVmxwM1RVWndWbGw2Vm1oaGVrWlhWakkxZDFkdFJuSk9XRXBhVm14d1RGWnFSazlqTVZKeldrZG9hRTB3U2xaV2JURjNVakpSZUZkWWFHRlRSbHBvVlcweFUxZEdiSFJrUlhCclRWZFNlbFp0TURWV1ZURlhZa1JTVmsxcVZsUldiVEZMVWpGa2MyRkdjR2xTYTNCSlYyeGtORlp0VmxoV2ExcFlZbGhTVDFac2FFSmtNVnBJWlVkR1ZVMVdWalZWYkdodllWVXdlbEZzYUZwaVIyaFVWakJhVTFac2NFWk9WM2hUWWtad05sZFdWbXRTTVZWNFdrVmFWR0pHU2xoVmJYaGhWMFp3UlZOc1RsZE5WMUl4VmtjeGIxWkdTbFZXYkd4WFVtMVJkMWRXV2xwbFIwcEpVMnhrYVZKVVZsaFhWM2hYWkRGT1IxWlliR3BOTW1oWldXeFdkMU5HV1hsT1dHUllZbFZ3V2xsVldrTldNa3BaWVVaU1drMXVhRkJhUlZwTFkyczFWMVJyTlU1aVYyaE1WbTB3ZUUxR2JGaFRXR2hVVjBkb1dWbHRlRXRYUm14eVYyNWtWMUp0ZUhwV1YzaHJWakZhYzJOSWNGZGlSa3BJVmxkemVGZEdWblZoUmxwWFpXeGFVVlpzVWtkVE1rNXpXa2hPYVZKdGFHOVVWbHAyWld4YWMxVnJkRk5OUkZaNlZUSTFSMVp0U2toVmF6bFhZV3RhVEZSdGVHRldNWEJGVlcxMGFWWnJXVEZXVkVvd1dWWmFkRk5yV21wU2JXaFdWbXBPYjFSR1drWlhiVVpYVFZaYWVWWkhlRk5VYlVZMlZtcGFWMkV4Y0haWmVrcExVakZPYzFac1pHbFdNbWhYVm0xNGExVnJNVWRXV0dSWVlsVmFWRlJYZEdGU01XUnlWMjEwYUZac2NIcFpNRnB2VmpGYU5sRnFUbFZXYkhCb1ZXcEdhMk15UmtkWGJXaE9WbGhDV2xZeFdsTlNNV3hXVFVob1dGZEhVbGxaV0hCelYxWldkRTVWVGxOTlYzUXpWakowTUZaWFNrWmpSbWhhVFVaS1NGWnFSbUZTYkdSellVWmtVMUpXY0VsWFdIQkxVMjFXZEZKclpHRlNNbWh3VlcwMVEwNUdXbk5aTTJoUFVtc3hORlpHYUc5V01rcEhWMnhPV2xaRmNGUlpNRnB6WTJ4YVZWSnNaRTVXYmtKS1YydFdWMDFHWkhOWGJGWlRZVEo0YUZac1dtRmtiRnB4VW10MGExSXdXa2RaVlZwclZHMUdjbGRyYkZkaVZFVXdWWHBLVTFKck5WZGFSbHBwVWpGS1dWWnRkR0ZaVmtwWFYyNUdWR0p0VWxSVVZscHpUVEZTYzFkdE9WZFdNRlkxVmxkNGExZHNXa1pPVlZKWFZrVmFWRlp0ZUdGa1JrcDBaRVprYVZJelkzZFdiVEIzWlVaSmVGZHNhRlJpUm5CeFZXeGtiMWxXYkZWVGJUbFRVbXh3V1ZwVlduZGlSbHB6VjI1c1YwMXVhSEpXYWtwTFYwZEdSbFpzWkdsWFIyaHZWbXRqZUZZeFpFZFhia3BZWVhwc1dGUlZXbmRWUmxwWVkwVTVhVTFWY0hwV01uaHJWMGRLV1ZWdE9WVldiSEF6VkZWYVlXUkhWa2hrUm1oVFRVaENTVlpxU2pSV01WbDVVMnRrVjFkSGFGZFpWRVozWVVacmVXVkhSbXBXYTFvd1dUQlZNVll5UlhwUmJXaFhZbFJDTkZSVlpGSmxSbHAxVTJzMVYxWnVRbHBYVnpFMFdWWlplRlZzWkZoaVZWcHZWVzE0ZDFOV1VsZFdWRlpYVFVSR1dGa3dhRzlXTWtwWllVVjRWMkZyUmpSWmVrWlBZMjFXUjFwR1pHbFNXRUpHVm14a2QxTXhUWGxVV0doV1ltczFXVmxyV21GaU1WSldZVVZPYVUxV2NFaFdiVEV3VkRGS2NrNVZhRmROYmxKeVdWVmFTMWRHVm5OaFJuQnBVbTVDYjFadE1UUlpWbVJHVFZWV1UySkhVbFJaYTJoRFYwWmFTR1ZHWkZWTlYxSkpWVzAxUzFaSFNuVlJiR1JhVmtWYVYxcFZXbUZqVmtweldrZHdhVlpzY0VwWFYzUmhWREZaZUZOc1pHbE5NbWhZV1d0YVMxTkdXbkZTYms1WFRWWmFNVlpYZUZkaFZrbDRVMnhzV0ZadFVUQlhWbHBXWlVaa2RWSnNVbWxTVkZaV1ZrWmFZVmxXV25OV2JHaHJVa1ZLV0ZSV1duZGxWbEp6WVVoa1YwMUVSakZXUm1odlYwWmFjMVpxVWxaTlIxSllWVzE0WVdNeFpITmFSMnhYWVROQk1WWnRlRk5UTURWSFUyNVNWbGRIYUZWWmJYaExWVVphZEUxV1RsaFdiRnA0Vmtjd01XSkhTa2RqUkVKaFVsWndjbGxYYzNoV2JVNUdZVVphYVZkSGFESldNVnBoVXpGa1YxSnVUbFZpUmxwWVZtMTRkMkl4WkhKWGJVWlhZbFphU0ZZeU5WTlZNa3BIVjI1Q1YySkdTbGhXTVZwaFpFVXhXVnBHWkU1V2Exa3dWbFJHYjJNeFduUlNXSEJXWWtkU1dGbFVSbUZVUmxWM1YyNU9hMUl4V2tsVmJYaHZWakF4U1ZGcmRGZE5ibEpvV1ZSR1ZtVkdaRmxqUjJoVFZtNUNXVlp0TVRSa01rNXpZa1pXVTJGNmJIRlVWbFV4VFZaVmVXTjZSbGhTYTNCV1ZtMTRjMVl5Um5KVGJrcFZZVEZ3UjFwVlduZFRWa3B6VTIxc1UxWkdXbGxXTVdRMFZtc3hWMVJyWkZoaVIyaHlWV3RhUzJJeFduUmtTR1JYWWtaYU1GUnNXbXRXTWtZMlVteG9WMDF1YUVSV2JYaGFaVzFHUlZOdFJsZFdia0p2VjFSR1lWbFhUWGxTYTJocFVtczFiMVJVUWt0VWJGcDBaVWRHVmsxVlZqUlZNV2h6VmtkS2NrNVdiRnBoTVhCb1ZtdGFjMWRYVGtsVWJHaFRZa1p2ZDFaR1dsTlZNVkp6VjI1T2FsSlhhRmxaVkVwU1pERmFjbHBGZEZOaVZUVktXV3RhVjFZeVNsaGhSRXBYWWxoQ1NGbFVSazlUUmxweVYyeFdhVkl5YUhaWFZsSkRaREExYzFkc2FHdFNNRnBVVkZaa1UxTkdhM2RXYlVab1lrVndlVmt3VlRWV2JVcEhZMFJPVlZac2NHaFdiRnBMWXpGd1IxWnJOVmRXYkd0M1ZtMXdTMDFIUlhoWFdHaGhVbGRvYjFWdGVIZFpWbXh5V2taS1RsSnRkRFJXTW5oUFZqQXhWMWRxUmxkU00wMHhXVlphU21WR1RuRldiR1JvWVROQk1sWkhlR0ZYYlZaSFZHNVdWV0pIYUZoVmJGcDNWMFphZEUxSWFGWk5helY2Vm14b2MySkdTbGxWYmtaYVYwaENTRll5ZUhOV2JHUjBaRVpvVTJFeWR6SlhWbFpYVlRGWmQwMVlWbEpoTVVwaFdsZDBZVlJHVm5GU2EzUnJWbXhLZWxZeU1XOVVhekZXWTBST1YySkhVVEJXVkVaS1pWWldjMXBHWkZoU01taFpWMVpvZDJNeFZYaGlTRXBhWld4YVQxUldaRFJsVmxwMFpVVTVWMkpWY0VoWmExSlhWakZaZW1GSVNsaFdiSEJvV2tWa1IxSnNWbk5hUjJ4VFltdEtVbFp0TUhoT1JsVjVWRzVPVldKc1NsUlpXSEJYVmtaU1ZWTnRPVk5OVm5CNlZqSXhSMkZGTVhKV2FsSlhVbnBXVUZaVVJtdFRSbFp6Vm14d2FFMVlRbTlXYWtKaFdWZE9jMWR1VWxOaVJuQlVXV3hvYjFkV1dYbGtSbHBQVm14R05GWXlOVXRYUjBwSVpVWnNXbFpGV2pOWlZWcHpZMnhrZEdSR1RtbFNWRlkyVm1wS05GbFdVbk5YYms1cVVtdGFXRlp0TVZKTlJuQklUVlpLYkZack5YbFdNakZIVlRKS1IyTkdiRmhpUjFGM1YxWmFhMUl4Y0VsVWJHaHBVakZLVlZaR1pEQmtNbFp6Vmxoc2ExSXpVbGRVVjNSM1RVWmFXR1ZIT1ZkaVZYQkpXVlZhVTFsV1dYcGhSMmhXWVd0YU0xVXdaRk5TTVZaMFlrWk9WMkpIZHpKV2JYaHFaREpSZDAxV1pGaFhSMmhaV1ZSR2QxZFdiSEpXYTNSWVVtMTRWbFZ0TVVkaVIwcEhWMjVzVjAxdVVuSldNRnBMWkZaR2NscEdjRTVTYmtKUlYxWmFZV0V4VGtoU2EyUmhVbTFTY0ZZd1pHOVdWbHBZWTBWa1UwMXJNVFZWTVdoM1dWWkplV1ZHVWxkaGExcE1WbXBHWVdOV1JuTmFSbkJYWWtkM01GZFVRbUZoTVZsNVVsaHNWbUpyU21GWlZFWldaVVphY1ZKdFJsUlNNVXBIV2tWYWQxWXhXa1pYYTNCWVlrWmFXRlpxUm1Gak1XUjFWV3hhYVdFelFsaFdSbU14WWpGSmVHTkZWbE5oTTFKeVZXeFNWMWRHWkhKV1ZFWlhUV3R3ZVZVeWVFdFdNa3BWVWxoa1dGWnNjR0ZhVlZwVFl6RmtjazlXWkdsV2EzQTBWbXhqZUU1SFVYaFZXR2hZWW1zMVYxbHJaRk5pTVZaMFpVWmtUMUpzY0RCWk0zQlhWbTFLVm1ORmJGVk5Wa3BRVmpJeFJtVkdaSFZUYkdScFVtNUNlVlpYTVRSaE1rMTRZMFZvVTJKSFVuQlZiVFZEVTJ4WmVGa3phRTlTYkVZMFZqSTFUMVp0U25KalJscGFZVEpTVkZaclduTmpiR1J6WTBVMVUySklRalZXYWtsNFRVZEdSazFXV2s5WFNFSlhXV3RrYjJOc1dsVlRhM1JYVm14d2VsWnRlR3RoVmtwelZtcFNWMVpzU2toWlZFcFBWakZPZFZSdFJsTldSM2haVmtaV1UxWXhUbGRYYms1aFVrVktjbFJXV21GbFZsSlhWbTFHV0ZJd2NIcFdNbmhyVmxaYWMyTkhhRmRXVm5CWVZqQmtWMU5XWkhSa1JUVm9UVEJLU1ZadGVHdE9SazE0VjFoa1RsZEZOVlZaYTJoRFYwWnNjMVZyWkU5aVJrcFlWakl4UjFZd01WaFZibkJYVFc1b1dGbFZWWGhUVmtaMFQxWmtVMkpJUW05V2FrcDZaVVpaZVZKWWNHRlNiV2h3Vld4U1YxWnNaRmhrUm1SWFRVUkNORlp0TlZOVWJFcEdWMnhvVm1KWWFETldNRnB5WkRGa2NsUnNaRTVoTVZrd1YxUkNZV0l4V2xoVGEyUnFVbGRvV0ZSVlduZE5NVlowWlVkR2FrMVhVbnBaVlZwUFZqRmtSbE5zYkZkaVZFSTBWR3RhV21WR1ZsbGhSazVwWVhwV2QxWkdVa3RWTWs1SFZtNU9XR0V6VWxkVVZscDNaVVpWZVdWRk9WZFNWRVpZVmpKNFlWWnNXWHBWYmtwYVZtMVNURlZ0Y3pGV01YQkhXa1pPVGsxVmNFNVdha1poVm0xV1IxUnJhRmRoTVhCWVdXdGFkMWRHYkhOWGEzUnNWbXh3VmxVeWNGTlZNa3BYVW1wU1ZrMXFWbFJXUkVaaFl6Rk9jMkZHWkdsV1JscEZWbXhhWVZsWFRYaGFTRTVoVWpOQ1QxWnNhRU5UVmxwWVRWUlNhVTFYZUZoVk1uaHpWVzFLUms1V1dsZGlSbkJvV1ZWYWQxSXhaSE5YYlhoVFlraENOVlpFUm1GVE1rWlhVMnBhYUUwelFsbFdhazVUVjBaYVZWSnNaR3BOVjFKYVdXdGFZV0ZGTUhoVGJHaFhZbGhTV0ZWNlJrOVNNa3BKVlcxNFUxWkhlRmxYVjNSaFV6SldWMVpZYkU1V1YxSldXV3RXYzA1c2JGWldiVVpYVFZad2Vsa3dhRXRYYkZwR1YyeENXbVZyV2t4V01WcDNVakZTZEdKR1pGTmlTRUpZVm0wd2VFNUdiRmhWV0doWFlUSlNXVmxyWkZOWFJteDBZM3BHVjFKc1dqQmFSV1JIVjBaYWRGVnViRmRpVkZaeVZtMHhSMDVzU25KYVJtUk9ZV3hhV1ZadE1YcGxSbGw0V2toT1VtSkdjRmhVVkVwdVpWWmtjbFZyZEZSTlZYQjZWbTAxVDFaSFNraFZhemxhWVRGYU0xWkdXbUZqTVdSelZHeEtUbFpYZHpGV1ZFa3hWREZrU0ZOclpGaGlSa3BoVm10V1MwMHhiRlpYYkU1WFlraENSbFpYZUU5V01rcEhZMFpzVjAxdVVuSlVWVnBoVTBaT2NsZHNaR2hoZWxaWVYxZDRVMUZ0VmtkWGJrcFlZbFZhV0ZsWWNGZFdNVnBJWlVjNWFGSXdWak5aTUZKaFZqRlplbFZ0YUZaaGExcHlWV3BLVDFKc1pIUmpSazVvVFRCS1VWWnNaRFJaVjFGM1RWWmtXR0pzU25OVmJYTXhWa1pTVjFadFJteGlSM2g0VmtjeE1HRkdXbkpqUm1oV1RXNW9VRlpxU2tkamJVNUhWV3hhYkdFeGNGbFdiWGhoVWpKT2MyTkZhR2xTTW5oVVZtdGFZVmRXV25Sa1IzUk9VbXN4TkZscldtRlViRnBZVld4V1dtRXhWWGhYVmxwVFZteGtkVnBGTlU1V2JGa3hWMnhXVjFsWFJYZE5WbHBxVWtWS1ZsbHJXbmRXUmxweFVtMUdWMVpzY0hsV1YzaHJWRzFLY2xOclZsaFhTRUpJVlhwR1NtVkdUblZVYldoVFRVWndWVlpxUWxkVE1WcEhWMnRrVjJKSFVtRldha1pMVjBaYWMyRkhPVmROYTFreVdXdGFUMWR0UlhsVVZFWlZWa1ZhZWxreWVHRmpNVkp6VjIxc1UySllZM2hXYlhoclRVVXhSMWR1VWxSaVJscFVWakJrVTFsV2JITmhSemxXVW14d01GcFZXazloYlVwR1RsUkNWbUpZVFhoV1ZFRjNaVmRHUmxwR1pHbFNia0p2VjFaU1MxSnRWa2RWYmxaVllrVTFXVlZxUmt0V1ZtUllaVVpPVjAxV2NGaFdNalZQVmpGYVJsZHNUbFZXYlZKVVdsVmFWMWRGTlZaUFZscE9WbGhDTlZacVNqUmpNV1JJVWxob1dHRnJOVmhXYWs1UFRrWldkR1ZIZEd0V2JIQjZWakp6TVZZeVNrbFJiRXBYWWtad2NsUnJaRk5rUmxaWllrWlNhRTFZUWxoWFYzUlhaREZrUjFWc2FHeFNXRkpXVlcxNGQxZFdVbFpoUnpsVllrVnNNMWt3YUhkV01VbDZZVWRvVjJKSFVrZGFSRXBQVTBkR1IxWnNaRmROVlZZelZteGtORmxXV1hoWFdHaHFVbGRvY2xWdGVFdGpSbFp6VjJ4d2JHSkdjRmxVVldoclZHeGFjMk5GYUZkTmJtaG9Wa1JHWVZack5WZGlSbkJYVFRGS1RWZHNaRFJXTWs1eldraEtZVkp0YUZSWmJYUkxVMVprVjFadFJscFdiRXA2VlRKNGEyRnNTa1pYYkdoWFlURmFhRll3V21GU1ZrcHlXa2R3VG1FeWR6SldNblJyWXpGVmVGZHVTbXBTYkVwWVdXeG9RMVJHV2xWU2F6VnNVbXh3ZWxadGVFdGhSVEZ6VTI1a1dGWXpVbGRVVmxwYVpVWmtjbUZIZEZOWFJrcG9WbTE0VTFJeFRsZGpSbHBYWWtkU1dGbHJXbmROUmxwWVRsVjBWMDFFUmtoWk1GcHJXVlpLUmxkcmVHRlNWbFY0Vm1wR1YyTXhjRWRhUm1SVFlraENSMVp0TVhkVE1sRjRVbGhzVlZkSGFGVlpWRXBUVmtac2NscEhPV2hTYkZwNldWVldUMVpyTVZkVGJHUlhZbFJHU0ZsVVJtRmpNV1IxWWtaa1RtSnNTbmxYVmxKTFV6Rk9SazlXVmxWaVNFSnZWRlphZDA1c1duRlJiVVpvVFZVMVNWVnRkR0ZVTVZwMVVXeG9WVlpGUlhkVVZWcGhZMnhXY2xwR1RtbFdiSEJhVmxSS01GbFhSbk5UV0d4b1VtMW9XRmxYY3pGa2JGSlZVbTEwVjAxV1dubFZNbk14VmpKRmVsRnJiRmhXUlVwVVYxWmFWMlJHU2xsalIyaFRZbGhvYUZadGRGZGtNVnBIVjFoa1dHSnJOWEZVVmxwM1RWWmFTR1ZHVGxaTlZuQkhWako0ZDFkR1duTlhia3BhWVd0YVlWcFdXbUZrVmxKelZXMW9hRTB3U2xsV01uaHJUVVpzVjFkclpHcFNWMmh6Vlcxek1XTldiSEpYYTNST1ZteGFXVnBWVmpCV01ERkZVbTV3VmsxdVVUQldha1poWXpGT2NsVnNXbXhoTTBKUlYxaHdTMU14U1hoalJXaG9VbXMxV0ZWcVRtOU9WbHB5VjIxMFRsSXhSalJXUjNoclZqSktjMU51UmxaaVZFWlVWakZhWVdNeFZuSmFSM2hYWWtkM01WZFVRbXRTTVdSSFUyNU9hbEpYVW1GVVZXUnZUVEZaZVdNemFGTk5helZLVm0weFIxWXlTa2xSYXpGWVlURndjbFY2Ums5VFJsWnlXa1pTYUdWc1duZFdiVEV3WXpBMWMxZHVUbUZTUlVwaFZtMTBjMDVXV2xoT1ZUbG9WbFJDTlZaWE5VTldiVXBIWTBWNFYxWkZXbWhaTVZwUFl6RlNkR05HWkdsU2JHdzJWbTB3ZDAxWFJYbFNXR1JPVm0xb2MxVnJWa3RXYkd4eVYyNWtWVkp0ZUZoV2JHaHZWa1phYzFkdWNGZFNNMmhZVm1wR1lXTXlTa1ZVYkdSWFVsYzRkMVpYTUhoVmJWWkhWRzVXVm1GNmJGaFphMVozVjFaYWRHTkZkR2xOVlhCWVYydG9UMWRIU2xsVmJGSlZWbTFTVkZWcVJsTmpNV1J6V2taYWFWWldXVEpYVmxaaFZERmFWMWRxV2xkaVJrcFlWbXhhZDFkR1duTlhhemxyVm14S2VsVXlNWE5WTWxaMFpFUmFWMDFYVVhkV2FrWldaVVphZFZWc1RtbGhNMEphVjFjeE1GbFdXbk5YYmtaVllsUnNiMVZ0ZUV0bGJGbDVUbFU1YUUxVmNGWlZiWGhyVjBkRmVWVllaRmRXUlhCTVdUSjRUMk14WkhOYVJtUnBVMFZLVmxZeGFIZFNNVkY1VkZob1ZXSkhlSEJWYWs1dlZrWldjMWR1WkdoU2JIQklWbTB4TUdGVk1WaFZhMmhYVmpOb2FGWnFTa2RqYkU1elZXeGFhVmRGTVRSV1JsWmhXVlpPU0ZScVdsTmlSbkJQVm14b1ExWXhXbGhsUms1VVRWWnNOVlZ0TlV0VU1WcEdUbFpvVm1Gck5WQlVhMXBXWkRGa2NrOVhjRTVXTVVvMlZqSjBhMk15UmxkVGJsWlNZV3hhV0ZsclpGTk5NVlp4VW01T1YyRjZWbGhYYTFwWFlWWktkVkZ1V2xkV2VrWTJWRlprVDFJeFZuTmFSMmhUVmxSV1dWWnRNVFJaVm1SWFlUTmtWMkY2YkZsVmFrSjNVMVphV0dSSGRGaGhla1pKV1ZWYWIxWXdNVWhWYTNoV1RVZFNTRlZxUmxOak1rNUlZa1prVTFadVFsTldiWFJyVGtac1YxTlliRlZpYkVwV1dWUktiMk5HVm5GVGFsSnBUVmhDV1ZwVlZuZGlSMHBIWTBob1ZtSlVSa2haVlZWNFkyeGFjVlpzWkdsWFIyaDVWMVphWVZNeVVraFNhMXBRVm14d2IxbFVUa05XVm1SVlUycFNXR0pXUmpSV01uaFhWVEpLV1ZGck9WZGhhelZUVkZaYVlWSXhXbk5VYkU1T1lURndTVlpVUm05aE1rWnpVMjVTYkZKdGFHRlphMXBMVTBaYVZsZHRSbFJTTVZwSFdrVmFUMkZIVm5KWGJHUlhZV3R2TUZsVVJsTmphekZKV2taU2FWSlZjRnBYVjNSclZEQTFSMVpxV2xOaVZWcFVWRlpXZDJWc2JGWmFTR1JXVFd0V05Ga3dhR0ZXTWtwWllVWm9XRlp0VWxOYVZWcGhZMVprYzFSdGFFNVhSVW8xVm10YVlWWnRWa1pOU0docFUwVndXRmxyVlRGV01XeHlWMjVPVDFac2NGbGFSVkpEVmpKR05sSnJhRmROYmxFd1ZteGtTMUl5VGtsalJtUm9ZVEZ3TmxaSE1UUlRNazV5VGxaa1ZXSkhhRlJaVkU1RFZFWmFkRTFZWkZOTmExWTFWa1pvYjFsV1NuUlZiRlphVmtWYU0xWnJXbk5YUjFaSldrWmthVkp1UWpWV2JUQjRVakZSZVZOcmJGSmlSM2hoVkZST1ExSkdiSEpYYlVaWFZtdHdlbGxWV210V01sWnlWbXBPVjJKR1NrTmFWVnBLWlZaT2NWZHNUbWxTTW1oMlZrWmFZV1F4VmxkWGJHUldZVE5TV0ZSWGMzaE9WbHBJWkVkMGFGSnJjRlpaYTFwdlZsWmFSbGRyZUdGU00yaG9Xa1ZWTVZkV2NFZGFSVFZwVWxoQ1dsWnRkR3RPUm14WVVtdGtWV0V4Y0ZCV01GWjNXVlpzY2xkdVpGVlNiR3cxV2xWYVlXSkdTblZSYTJ4aFVsZFNkbGxXV21GWFZrWnpZa1prYUdFelFYcFdhMUpIWVRKU1IxTnVWbFJoZW14WVZqQmtiMVl4V25SbFIwWmFWakZhZWxac2FHOVhSMHBJVlc1S1YySlVSbFJhVmxweVpERmtjazlYYUZkTlNFSlpWbGN4ZDFsV1dYbFNXR2hxVTBad2FGVnJWbUZWTVhCV1drVjBWRlpyTlhsVWJGcHJWVEpLY2xOc1dsZE5WMDQwVkd0YVRtVldVbGxoUmxwcFVteHdWVmRYZUZkWlZsWkhZa2hLWVZKck5YTlphMlEwVmpGYWRHTkZUbWhTVkVaWVdUQlNRMWxXV2xkalNIQlhZa1p3YUZwRldsZFdWa1p6WTBkc1UySnJTbGxXTW5SVFV6Rk5lRlJzWkdwU1YxSldXV3RWTVdJeFVsZFplbFpQVm14d2VGVXlOV3RWYXpGeVRWUlNWazF1VW5KV1ZFcExVMGRHU0dGR1dtaGhlbFpGVm0xNFlWWXlUWGxTYTFwVllYcFdUMVpxUmt0WGJGcEhWbXhPVTAxV2NEQlZNbmhoWVZaS1IxTnRSbFZXVjFKMlZXdGFZV05zY0Vaa1IzUlhZVEZ2ZUZaVVNqUlpWMFpJVWxoa2FsSjZiRmhWYWs1dllVWndSVkpyZEdwTlZscDZWbTE0UzJGV1pFZFRiR3hYWVd0S2NsbHFRWGRsUm1SeldrWm9hVmRHU25oV1JscGhVekZPUjFkdVVteFNiVkpYV1d4V1YwNXNiRlpYYkdSWFRXdHdTRlpzYUc5V2JGcEdWMjVLV2sxV2NFaGFSbHBUWXpGT2RHRkhlR2hOV0VKS1ZtcEtNRll4V1hsVldHaFhZbXR3VDFac1duZFhWbXgwWlVkR1YwMVdTbGhXTWpGSFlXMUtTR1I2U2xaTmJtaFFWbFJCZUdOdFRrWmhSbkJYVmpGS1NWWnNVa0prTWxaWVVtdHNhRkp0YUhCVmJUVkRWMVphV0UxWWNFNVdiR3cwVmxjMVQxZEhTa2hoUnpsYVZrVktNMXBFUm1Ga1IxWklaRVU1VTJGNlZsbFdha1p2WXpGUmVGZFlaRmhpVkd4aFdXdGFZV0ZHV25GU2JGcHNWbFJXV0ZaSGVHdFZNa3BKVVd4d1YySkhUWGhhUkVaelZqRk9kVlJzYUdsaWEwcFlWa1pXWVZack1WZFhXR2hoVWxSc1ZGbFljRWRYVm14eVYyMDVWazFFUmpCWGExSmhWakpHY2xkdVdtRlNSVnBUV2xWYVlWZFhTa2RVYkdoVFRUSm9WbFl4WkRCaE1EVkhWMnhrV0dKc1duRlZNRlV4VjBaYWRHVklaR3hpUm5CWldrVmtNRlp0UmpaU2JHaFhUV3BXZGxadGVGcGxiVVpKVTJ4b1YySldTazFXVnpCNFZERk9XRk5yWkZkaGVsWllXV3RhY21ReFduUmxSazVUVFZVeE5GWXhhRzlaVms1R1RsWmtXbUV4Y0V4V1JFWmhZekZXYzFwR1RsZGlWa3BYVmxaamVGSXlSWGROV0VwUFZsZG9WMWxzVWxkV1JscElaVWRHVjFacmNERlZWM2hyWVZaa1NGb3piRmhpUmxwb1ZqSXhWMWRHVm5KaFJrSlhZa1p3VUZaWGRGZFRhekZYVjJ4b1RsWkdTbkZVVmxwM1RVWlZlV1ZHWkdoV2EzQldWVzE0YTFZeVJYaFhhazVhVFc1b00xVnFSbXRqTVZKelZXeE9WMUpzY0ZsV2JYUnFaVVV4UjFkWWJGUmlhM0JVVmpCa2IxZEdVbGRYYTNSV1VteHdSbFZ0Y3pWaGF6RldZMFp3V21FeGNGaFpWV1JHWlVkT1NHRkdaR2xXUmxsNlZtMXdSMU14U1hsVGEyeFdZbGhTVlZWcVJrdFZWbHAwWTBWa1UwMUVWbGhYYTJoTFZqSkdjbE51UWxaaVdHZ3pWVEJhV21WWFRrZFViR2hUWWtoQ1NGWlVTVEZUTVZsNVVtNUthbEpZYUdGVVYzQkhWVVpXYzFkdFJtdFNNRnBIVkd4Vk1WVXhaRVpUYlRsWFlsUkZNRmRXV2xabFJrcFpZVVphYUUxc1NsWlhWbEpMVlRGYVIySklVbXhUUjFKdlZXMTRTMVl4WkhKVmJFNVdUVlp3ZWxZeWVHOVhSMFY1VlZoa1dsWldWalJWYkZwTFkxWkdkRkpzVGxOV1JsbzFWbTF3UzA1R2JGZFhia3BQVm14d1YxbHJaRk5qUmxaeFVtdDBWRlpzY0ZaVmJURkhWbFV4YzFOcmJGZGlXRkp5V1ZkNFMyUkdWbkpQVm1ScFVqSm9SVlp0ZEdGWGJWWkhZMFZzWVZKc1NtOWFWM2hoVjJ4YWNsZHRPV2xOVm5CSlZUSjBiMkpHU2paaVJtUmFWak5OZUZwSGVHdFdNV1J6Vkd4a1YyRXpRalpYVkVKclRVWlNjMWRZY0doU1JrcFlXVlJLVW1ReGNFVlRhMlJYWVhwR1YxbHJXbUZoVmtwelkwWm9WMkpVVmpOVmFrcFRZekpLUjJGRk5WZGlWa3BaVjFkMFZrMVZNVmRYYTJoT1ZsZFNXRlJXV25OT1JsVjVaVWhPV0ZKc2NEQldSM0JUVmpGYVJsZHVTbGRoYTFwb1drWmFZV015UmtoaVJtaFRWbGhCZVZacVJtdE9SbFY1VkZob1YyRXlVbGhaYTFwaFZsWnNkR042UmxaTlYzaDVWMWh3VjFSck1WaGxTR3hYWWxob1VGWnRNVXRTTWtwRlZteGtWMDB4UmpOV2JURTBXVlpLYzFSdVNtaFNia0p3VmpCa2IyVldaSEpXYkZwT1ZteHNORmt3Vm1GVU1WcHlUbFU1VjJKSGFFUlpWVnBoWXpGV2NtTkhlRk5XUmxwS1ZsY3dNVlV4V1hsVGEyUnFVbXhLV0ZsVVJuZGhSbHB6VjIxR2FrMVlRa2xVYkdRd1ZHeFplbUZFVmxkTmJsSm9XVlJHWVZJeFRuVlViWEJUVWxWd2FGWkdWbXRWYlZGNFYxaGtXR0V6VW5GWmJGWnpUbXhzY2xkdE9WZE5WWEJhVlZkd1YxWXhTbk5qU0VwWFlXdHdWRlZxUm1Ga1ZsSjBZVVpPYVZKWVFqTldNV1F3VmpKUmVWVnVUbGhpYTFwVFdXeFdZVlpHVWxobFJYUnNZa2Q0ZVZaWE1VZFdNVWwzWTBWc1YxWjZWa3hXYWtwTFZsWmFjbFZzV2s1U2JrSlVWMnhXYTFJeFNuTlZibEpvVW0xU2NGVnFUbXRPYkZwMFkwVndUbFpzYkRSWGExWnZWa2RGZUdOR1FsWk5SMmhFVmpGYWMxZEhVa2xhUmxKT1YwVktXbGRzVm1GVU1XUkhWMjVPYWxKRlNtRlVWVnAzVlVaYVNHVkZkR3RTTVVZMldUQmFhMVJzV25WUmJHeFhZVEpTTmxwVldtdFNNVloxVkcxb1UySkZjRnBXVjNCUFlqSlJlRmRzVmxKaVZWcGhWbTE0UzFkR1duUk9WVGxhVm10d1NGVXllR0ZXVmxwelkwZG9WMDFHY0doYVJWVjRWbFpHYzFkck5XaE5NRXBMVm1wS01GVXhVWGhYV0dST1YwWmFiMVZzV2t0WFJteHlWMjVrVlZKc2NIaFZiWE0xWVcxS1NWRnJhRmhoTVhCeVZrY3hTMlJHVmxWVGJHUm9ZVE5CZWxaWWNFZFRiVlpIWTBWYVdHRjZWbGhaYkdSdlpHeGFXR05GVGxwV2JFWTBXV3RvUzFkSFNsWlhhemxWVm14d00xVnFSbUZrUjA0MlZteGFhR1ZyV2pWV2FrcDNVVEZhZEZOc2JGWmliSEJZVm10V2QxTkdhM2xsUlRscVRXczFTRlp0ZUd0aVIwVjRWbXBPVjAxV1NreFVhMXBXWlVaT2RWUnNXbWxoTTBKWFYxWm9kMVl4WkVkVmJGcFdZVEZ3VDFadGVIZE5SbEpXVld0a2FHRjZSbmxXTW5oelZtc3hkV0ZIYUZkTlIxSklXVEo0VDJNeVNrZGpSMmhPVm14Wk1GWXllR0ZaVmxWNVZXdG9WbUV5ZUZaWmExcExWa1pTVm1GRlRsUk5WbkI2VjJ0U1UyRXdNVmRpUkU1VlZtMW9VRlpyWkV0a1ZrWnpXa1pXVjJKSVFtOVhWRW8wWVRGWmVHTkZaRlZpV0ZKVVdXdFdkbVZHV2xkYVJGSlVUV3RhV0ZkclZtRldSMHB6WTBab1YyRnJOVVJWYTFwYVpWVXhWMU50ZUZOaWEwcElWbTB4TkZVeVJsaFNhbHBYWW14d1dGVnRlR0ZqYkZKeVYyczVWMDFyY0VwVk1qRnZWVEpLVjFOc1dsaFdNMUpZV2tSR1dtVkdWblZVYkdScFlsWktXVmRYZEdGa01sWnpZVE5rV0dKRk5WbFZha0ozVjJ4c1ZsZHJUbGROYTNCYVdWVmFiMWR0Vm5KWGJHaGFUV3BHVUZWcVJsTmphelZYWVVaT1YxWnRkRFJXYlRGM1VqRlZlRlJZYkZWWFIyaFVWakJrTkZac2JGVlRiVGxYVm0xNGVWZHJZelZXTVVwMFpVaHdWMVl6YUhKWlZWcExZekpPUjFkc1dsZE5NVVl6VjFaU1FtVkdaRWhXYTFaU1lraENiMVJXV25kVlZtUlhXa1JTVkdKV1JqVldSM1JyWVZaS2MyTklRbGRoTVZwSVZHdGFXbVZHWkhSU2JXaE9WbGhDTlZaSGVGZFdNVmw1VTJ0YVQxWnNTbUZXYTFaaFRXeHdWMWRzY0d4V01EVkhWa2N4ZDFSc1dsbFJhMnhYVm5wRk1GbHFSbk5XTVU1ellrWkthVkpVVmxkV2JYaGhXVmRHUjJORlpGaGlSbkJ6VlcxNGQwMUdjRVpYYm1SWFRVUkdWMWxxVG10V01rVjVWRmhvVmxaRldsaGFSVnBQWXpGYWMxUnRiR2hOTUVwYVZtdGFWMWxYVVhoVVdHaHFVbXh3V1ZsdGRIZGpNVnB6Vld0a1dGSnNiRFZVVmxaclZsZEtWbFpxVWxwTlJuQXpWbXBHU21Wc1ZuVlRiSEJYVWxad05sWnFRbUZVTWxKWFZXNU9hRkp0YUZSVVZsWjNaR3hhYzFrelpHeFNNR3cwVmxkMGEyRldUa1pqUjJoV1lrWktlbFpWV25Oak1WcDFWR3MxVGxacmNEWldiVEUwVkRKR1IxTnVUbXBTYlZKWVZGZHdWMWRHV25Sak0yaFhUVmRTZWxWWGVHRldNREI1V2pOc1dHRXhTa3hWZWtaTFl6RmFkVlJzVW1sU01VcFFWMWQwVjJReFVsZFhiazVZWWtVMVUxUldWbk5PVmxWNVRsVTVWMVl3Y0VoWk1HUnZWbXN4UjFaWWFGcE5ibWhZV2tWVmVGWldWbk5oUm1ScFZtdHZNVlpxU2pCVk1WVjRXa1ZrV0dKR1dsUlpiVEZ2VjBac2MxVnJTazVXYkd3MVZGWldNRlpHU25OWGJuQllZVEZ3ZGxsVlpFWmxSMDVHVm14a2FWZEdTbTlXVjNCTFZURktjazFXWkdoU00xSlVXV3hrYjFaV1pGZFZhM1JPVFVSR1NGWXhhRzlXYlVWNlVXNU9WbUpZYUhwVWJGcGhaRVUxVms5V2FHaGxhMGt4VjJ4V1lXTXhaSE5YV0hCV1lsZG9ZVlJYTlc5V01YQkZVbTEwYTFKcmNIbFVNVnByWVZaYWNtSjZTbGRpV0VKSVdXcEtSbVZHWkhOaFJrNVlVakZLVVZacVFtdFZNVmw0VjI1U1RsWnJOWEZaYTFwWFRsWndWbFp0Um1oTlJFWlhXVEJTUTFaWFNrZGpSbEpYWVd0YWFGWnNXbUZqYkZaeldrVTFhV0V3Y0VaV01XaDNVakZOZUZOWWFGUmlhelZ2VldwQ1lWWkdXWGRXYTNSWFlrWndXVlJXVWtOaE1rWTJVbXhvV0dFeWFGQldNR1JMVW1zMVdWTnNjR2hOV0VKTlYyeGFZVmxXVGtaT1ZscFZZa1p3Y0ZWdE1UTk5WbHB6V2tSQ1RsSnNjSHBXTW5SaFZrZEZlV0ZIUmxwaVIyaDJWbFZhWVdSSFZrZFViWEJwVWxSVmQxWlhNWHBOVmxWM1RVaHNhRkpYVWxoWmExcDNZVVpzVlZOcldteFNiRW94VmtkNFQxZEdTWGhUYkZaWVZqTm9WRlpxUm1GV01XUjFWR3hrVjFKV2NGVldWekF4VVRGa1IxZFliRTlXTTFKWlZXMTRkMlZzVlhsalJXUllVakJXTlZaWE5YZFdNVW8yVW10b1dtVnJXbkpXYkZwUFl6RndSazVYYkdsV01taFRWbTE0WVdFeVZuSk9WbVJZWW14S1ZWbFVSbmRpTVZaMFRWYzVhVTFYZUZaVmJUVnJZa1phYzJOR1dsWldla1pJVmpKNFlWWldXbk5oUm1ob1RXMW9VVlp0ZUdGWlZrcHpXa2hXVldKSFVuQldhMXBoVWxaYWNWTnFVbHBXYXpWSlZrZDBZVmxXU1hsaFJtaGFWMGhDV0ZVeFdtRlhSVEZGVW14d1YySklRa2hXUmxwaFdWWlplVkp1U2s5V2JWSm9WbXBPVTFSR2NGaGxSbVJxWWtkU2VWZHJXbTlWTWtweVUydG9XRlpGU21oVmVrWlRZekZPYzFwSGNGTlNWbkJaVm0xMFYxbFdaRWRYYTFaVFlUSlNjVlJYZEhOT2JHUnlXa2hPVmsxV2NIbFpNRnBUVmpKS1dWRnJlRmRXUlZwUFdsVmFZV014V25OVGJXaE9Za1Z3TTFZeFpEQldhekZYVjFob1lWTkZjRzlWYkZKellqRmFkR1ZJWkZoV2JrSlhWbTAxYTFZeVJqWlNibWhXWWtaS1JGWXllRnBsYkZKeFZHMUdVMUpXY0ZGWFZFWmhWREpOZVZScmFHbFNiVkpVV1d0b1ExVXhXbkZTYlhST1VteHNNMVJzVm05V2JVcElWV3hrV21KWVVtaFdWRVp6WTIxR1JsUnNhRmRpUm05M1YydFdiMVF4VVhoVGJsSldZa2hDWVZSVldtRmhSbHBGVW14d2EwMVhVbmhWVjNoaFZHeFplV0ZFV2xkaVZFSTBWWHBHYTFkR1NuSlhiWFJUWWtoQ1dWWlhlRmRrTVdSSFYydG9iRkl3V2xaVVZscDNaV3hhZEU1VmRHaGlSV3cyVmxkek5WWnRSWGhYYldoV1lXdGFjbFl3WkU5U2JFNXlUbFprYUUwd1NrdFdiR040VGtac1YxWlliRlJpUmxwWVdXdGFZVmRHYkhKWGJGcHNVbXhhVmxWdE1UQmhiRnB5VjJwR1YxSXphRkJXVkVwR1pVZE9SMk5HWkU1aWJFcFpWMnRTUjFZeVRuSk5WbHBZWWtkb2NGbHJXbmRYUmxwSFYyMUdXbFpzV2toV2JYaHZZa1pPUjJOSVNsVldNMUl6VldwR1lWZEhWa1prUm1ST1VrVmFObFpVU2pCT1JsbDRWMjVPVkdFeFNsZFpWM1IzVkVac05sTnJXbXhpU0VKSldWVmFUMWRHU25KalJGSlhZa2RTTTFWVVNsSmtNREZYV2tab2FWSXhTbWhYYkdRMFdWWnNWMWR1UmxKaVZWcFlWRlprTUUweFpISmhSM1JYVFZad2Vsa3dXbTlXYXpGMVZGUkdXRlpzY0dGYVZ6RkhVMVpPYzFadGJGaFNNbWhXVm0xd1IyRXhTWGhVYTJoVVlUSlNhRlZ0TVZOalJsWjFZMGM1VDFKc2NIaFZiWGhQVmtkS1YxSnFUbFZpUm5CMlZtcEtTMUl5VGtkU2JHUk9VbXh3VFZac1VrZGpNazV6V2toU1UySlhlRTlXYlhoM1RrWmFXRTFVVW1oTmExcFpWVEowYTJGc1NrWlRiV2hYWWtad2FGWlZXbUZqTVZwWllVWlNVMDFXY0VoWFYzUmhaREpHUmsxWVVtRk5NMEpZVm10V2RrMUdXa1ZTYTNCc1VteEtlbGxyWkc5Vk1rcHlVMnhDV0ZadFVYZFZha0V4VWpGd1IyRkhkRk5OUm5CNVZrWmFWMlF4VGtkV2JsSlBWbTFTV1ZWcVFuZFdNVmw1VGxWT1YwMXJjRlpWYkdoM1dWWmFWMk5HWkdGV1ZuQXpWVEZhVTJSSFRraGlSazVvVFRCRmVGWnRNVEJoYXpGWFVsaG9WMkpyTlZsV01HUTBWakZzVlZSc1RsZE5WbkI1Vm0xME1GWkdTblJsUkVKaFZsWlZNVlpxU2t0U01VNTFZa1phVG1GcldrbFdhMlEwVTIxV2RGSnJXbGhpUjFKWVdXdG9RMlZXWkZkVmEyUlZUV3N4TkZaSGVITmhSa3AwWVVab1ZtSkdXak5XTW5oaFpFZFNSMXBIZEU1V01VcEpWMVJDVjFZeFdraFRhMXBQVm14S1YxbHNhRk5oUm5CWFYyeHdiRlpVUmxaV1YzaGhWR3hLUmxkclpGZGlWRUY0V2tSR2ExSXhaSEpYYkZKcFlraENXVlp0ZEZka01WWkhWbGhrV0dGNmJGbFdha0ozVWpGUmVGZHJPVlZpVlhCSFdUQmpOVll5U2xsUmExSlhZbFJHV0ZVd1drOWtWbEowVW14U1UxWkdXbGxXTVdONFRrZFJlRmR1VG1sU2JGcFRWbXRXWVdOc1VsZFhiVVpZVW0xU2VWZHJVa05XTVVsM1kwVmtWMkpZUWxCV2JURkxWbFpHV1dGR1pHaE5XRUp2Vm0weGVrMVdXbk5WYms1b1VqSm9iMVJWYUVKTmJGcHpXa1JDV2xacmJEUlhhMVpyWVd4S1YyTklSbFppV0ZJelZrUkdWMk14WkhWYVJUVlhZa2hDVjFaWE1UUmhNVnBXVFZaYVYyRnNXbGhXYlRGdlpXeGFjMXBGZEdwTlZUVXhWVmQ0WVZSc1NuVlJiVGxZVmtWdk1GWnFSbUZXTVZKMVZXeENWMDB4U2xWWFZtaDNWakZrYzFwSVRsZGlSVFZXVkZkMFYwMHhVbGRXYkdSV1RWWndSMWt3V205V2JVcDFVV3RvVjFKV2NHaFZNRlY0VmpGd1NHTkhiRk5OVlc4d1ZteGFhMDVHYkZoU2JHUlVWMGQ0YjFWc1VrZFhWbXh5VjI1a2FtSkdWalZVVmxwcllXc3hWMU51Y0ZkaVdHaDJXVlZWZDJReFRuTldiR2hYVFRGS1dWZHJVa0psUjAxNFdrWnNhVkl6YUZSV2EyUTBWa1phUjFwRVVscFdWRVpJVm0wMVUySkdTalppUjBaWFlsaE5lRlV3V2xwbFZURldXa1prVG1FeGNEVldSM2h2VXpGa2RGTnNiR2hUU0VKWVdWZDBkMU5HVm5SamVrWllVbXR3ZVZSc1pITlZNVnAwWkVSU1YySlVRak5hUkVwWFUwWk9XV0pHVG1oTmJXaFpWMWQwWVZsV1dYaGlTRkpyVWxoU1dGWnRlRXRYUmxwMFpVZDBWV0Y2UmxoV01WSkxWbXhhTmxac1FsZFdSVnBNV1RKNGEyTXlTa2RoUjJoT1ZtMDVObFp0ZUd0bGJWWkhVMjVPWVZOR1dsaFphMXAzVkRGYWRHVklaRlpXYkhCWVYydFNVMkV5U2xkU2FsWldUVzVTYUZadE1VdFNiVTVIWVVaV1YwMHlhRTFXYTFaaFdWWlplRlp1U2xWaVJUVlBXVlJPUTA1c1duSmFSRkphVm14V05GZHJWbTlXYlVwSFYyeGFWMkpIVWxOVVZWcFhZekZrYzFwR1pFNVhSVXBLVjJ0V1lWVXlSbGRUYkZaWFlUSm9XRlpyVm5kTk1WcHhVbTEwYWsxWFVqRldWM2hYVjBaSmVXRkdaRmRpV0dob1drUktVMVl5VGtkYVJtUllVakpvV2xaWGNFZFpWazVYWVROa1YxWkZXbFpaYTFaM1UwWlplV05GZEZkTmExcDVXVEJTVDFadFZuSlhiVVpoVmxkU1VGVXhXbGRqTVdSellVWk9UazF0WjNwV2JYaHJUVVpaZUZSWWJGUlhSMmhZV1cxNFMyTldWWGRXVkVacVlrWktXRmRyVWxOVWJFcHpVMjV3VjAxdVRURlpWVnBoWTIxS1JWUnNWbWxTYTNCSlZtMXdRbVZIVGxkVGJsWllZa2hDV0ZscmFFTlRSbVJ6VjIxR2EwMVZOVmhWYlRWUFlVWktjazVXYUZwV1JUVkVWV3hhV21WWFZraGtSM2hwVm10Wk1WWnRNVEJpTVZwWFdrVnNVbUpyV2xkWmExcExWMFpyZDFkdFJtcGlSbkF3VlcxNGExWXlTa2hrZWtaWVlrWmFjVlJzV2xkamF6RlpWR3hTYUdFd2NGbFdWelYzVmpGa1IxZHVVbXhTYmtKelZtMTRZV1ZzWkhKWGJHUlhUVlZ3V0Zrd1l6VlhSbHBHVTIxb1dtVnJjRTlhVldSUFVtMUtSMVp0YUd4aVJuQldWbXRhWVZZeVVYaFViazVZWW14S1QxVXdaRzlVTVZaMFkzcEdiR0pHVmpWVWJGWXdWbFV4Vms1VmJGcFdWbkI2Vm1wS1JtVkdaSEZVYkdSWFZtNUNObGRVU2pSa01VcHlUbFpvYkZJeWVGUlpWRWsxVFRGYWNsZHRSbWhOUkVaSVZqRm9hMVJzVGtobFJ6bFdZVEZ3TTFZeFduTmpiR1IxV2taV1RsWnJjRmhXTW5SWFlURlplVk5zWkZoaE1sSllWbXBPYjFSR1dYZFhhM0JzVW1zMWVWUXhXbTlXTWtwV1RrUkNXRlpzU2t4V2FrcE9aVVpXZFZSc2FHbFNia0oyVmtaU1ExTXlWbGRYYTJSWFlrVTFWRlJXVm5kbGJGcDBaVWQwYUZKcmNGZFViRnBUVmpKS1dXRkhhRmROVm5CVFdsVmFZVlpXV25OWGJXaHNZVEZ2TUZac1kzZE5WMUY0V2toU1ZHRXlVbGxaYlRWRFZqRnNXR1JGV2s1V2JHd3pWakl4TUdFeFNYZGpSV3hhWVRGd2NsWnFTa3RXVjBWNlkwWmthVmRGU2sxV1IzUmhZVEpPY2s1V1pHRlNNMEpWVld4b1EyUXhXbGhsUjBaYVZteEdORlp0TlV0WlZrcEhVMnhXVlZac2NHaFdiWGhYVjBVMVdHUkhhRmRpU0VGM1ZteGtNRmxXV25KTlZtaG9VMFp3WVZac1duZFRNWEJGVW0xMGFrMXJjRWhXYlRGelZUQXhWbU5JV2xkaVdFSklXVlJHV21WR1pIVlZiRTVvWWtoQ1ZsZFhkRlpOVmxwSFlrWldVMkpzY0hOV2JYaHpUbFpyZDFack9XaGhla1pYV1RCV2IxWnRTbGxoU0ZwWVZteHdTMXBXWkZkU01rWkhWbXhrVjJKclJqWldhMXBUVWpKRmVGcEZXazVXYlhoV1dXeGtOR05HV25OVmJHUlVVbXh3ZWxkclVsTldSVEZ5VjJ4c1YySlVWa2hXVnpGTFkyeE9jMVpzVmxkaVJuQnZWa1pTUjJNeVRuTmpSV1JoVW14S1ZGbHJhRUprTVdSVlVXeGtUMUpzVmpOVVZsWnpWVzFLYzJOR2JGZE5SMmhFVmtWYVlXUkhUWHBoUjNCb1pXeGFXRlpzWkhwT1ZsbDNUVmhXYUZKcldsbFdiVEZTVFVaV05sTnJPV3BOV0VKS1ZrY3hSMVV4V2tobFNHeFlWak5TZGxWVVJrOVdNV1IxVkd4d2JHSkdjSGRXVnpFd1ZqQTFWMk5GV21oU00xSlZXV3hXWVZkV2NFWldhbEpZVWpCd1NWbFZhR0ZYYlVWNFkwaHdWV0pIVWtoVk1HUkxVakpPUjJGR1RsZFNiRzh5Vm0xMGFtVkhVWGhXYmxKV1lrZFNjRlV3Vm1GWFZscHlWbXQwYUZKc1duaFZiVEZIWVd4YWRHVklhRlpOYm1oUVdWWmFTMWRXVm5KalJtaG9ZWHBXUlZaclZtRldNVnBXVFZWV2FWSllRbTlXYWs1VFZGWlplV1ZIT1dsTmEzQklXV3RTVjJGR1NYbGxSMFpYVFVaVmVGbDZSbE5rUjA1SFUyMTBWMkpZYURSV2FrWlRVVEZzVjFOWWFGaGlhMXBoV1ZkMGQxWkdiSEpXYWtKVVZtMDVObFZYZERSV2JGcEZVVlJXVkZZeWVIbFZla1ozVjFkR1NHVkdjR3hXTW1oM1ZqRmFiMVF5U2taT1dFWldWMFphWVZsWGVISmtNV1J5V2taa2FHSlZiRFZXVnpFMFZFWk9TRnBJWkZSTlZWVTFWVVpPU21ORlRuUldhbEpoVmpBeGRsZFhNVWRsYkhCVlYxUkNUV0pWYTNsVWEyUlRZa1pyZVU5WGRHRlZNbWN3VXpGT2NsQlRTWEJEYlZZMFdsZE5iMWx0Um5wYVZGa3dURzFKTWs1SFVteFpNamxyV2xOb05FdFRhejBpS1FwbGVHVmpLR0poYzJVMk5DNWlOalJrWldOdlpHVW9lQ2twIikKZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKHgpKQ==")
exec(base64.b64decode(x))")
exec(base64.b64decode(x))